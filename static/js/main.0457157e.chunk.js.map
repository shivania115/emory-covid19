{"version":3,"sources":["components/AppBar.js","components/MapProvider.js","utils.js","components/useGeographies.js","components/Geographies.js","components/Geography.js","components/ComposableMap.js","components/Marker.js","components/Annotation.js","components/Notes.js","components/USMap.js","components/StateMap.js","components/CountyReport.js","components/MapState.js","components/AboutUs.js","components/DataSources.js","components/Privacy.js","components/App.js","index.js"],"names":["AppBar","props","history","useHistory","Menu","borderless","inverted","fixed","style","backgroundImage","backgroundSize","Container","width","Item","as","header","onClick","push","fontWeight","color","lineHeight","active","menu","content","name","position","Image","size","src","geoPath","d3Geo","projections","MapContext","createContext","MapProvider","height","offsetX","offsetY","projection","projectionConfig","restProps","center","cx","cy","rotate","rx","ry","rz","parallels","p1","p2","s","scale","projMemo","useMemo","scl","proj","translate","forEach","d","makeProjection","useCallback","value","path","Provider","getFeatures","geographies","parseGeographies","Array","isArray","feats","feature","objects","Object","keys","features","useGeographies","geography","useContext","useState","setGeographies","useEffect","url","window","fetch","then","res","ok","Error","statusText","json","catch","error","console","log","geos","map","i","rsmKey","svgPath","prepareFeatures","Geographies","children","className","length","memo","onMouseEnter","onMouseLeave","onMouseDown","onMouseUp","onFocus","onBlur","isPressed","setPressed","isFocused","setFocus","tabIndex","evt","ComposableMap","Marker","coordinates","x","y","transform","Annotation","subject","connectorProps","dx","dy","curve","connectorPath","curvature","curveX","curveY","createConnectorPath","fill","stroke","Notes","state","paddingTop","Divider","Grid","Row","Column","fontSize","href","hidden","columns","paddingLeft","List","paddingBottom","right","paddingRight","data-size","data-text","data-url","data-show-count","target","rel","async","charSet","bottom","data-href","data-action","text","alert","numberWithCommas","toString","pattern","test","replace","colorPalette","MapLabels","offsets","VT","NH","MA","RI","CT","NJ","DE","MD","DC","geo","centroid","geoCentroid","cur","stateLabels","find","val","id","key","indexOf","textAnchor","alignmentBaseline","USMap","stateName","setStateName","fips","setFips","setTooltipContent","dataFltrd","setDataFltrd","dataStateFltrd","setDataStateFltrd","dataState","setDataState","data","setData","date","setDate","setStateLabels","colorScale","setColorScale","legendMax","setLegendMax","legendMin","setLegendMin","legendSplit","setLegendSplit","metric","setMetric","metricOptions","setMetricOptions","setMetricName","varMap","setVarMap","_","filter","variable","group","k","Population","black","cs","scaleQuantile","domain","range","scaleMap","each","max","min","toFixed","split","quantiles","c","l","marginTop","minWidth","Breadcrumb","Section","Header","Content","Subheader","padding","Dropdown","icon","background","theme","top","left","borderTop","borderLeft","borderRight","borderBottom","borderRadius","minHeight","placeholder","inline","search","pointing","options","onChange","e","strokeWidth","splitpoint","data-tip","stateFips","substring","configMatched","configs","orientation","labels","fontFamily","sortKey","datum","fillOpacity","label","axisLabel","tickLabels","dependentAxis","tickCount","tickFormat","Math","round","Loader","monthNames","BarChart","countyFips","VictoryTheme","material","domainPadding","ylog","minDomain","containerComponent","responsive","title","horizontal","barRatio","parseFloat","var","countyName","labelComponent","StateMap","useParams","config","setConfig","setCountyFips","setCountyName","dataTS","setDataTS","dataRD","setDataRD","caseRate","setCaseRate","percentChangeCases","setPercentChangeCases","mortality","setMortality","percentChangeMortality","setPercentChangeMortality","setPositive","pctPositive","setPctPositive","pctBedsOccupied","setPctBedsOccupied","delayHandler","setDelayHandler","t","covidMetric","setCovidMetric","countyMost","mortalityMA","percentChangeCase","percentBedsOccupied","positive","percentPositive","v","percent14dayDailyCases","caseRateMean","percent14dayDailyDeaths","mortalityMean","fips2county","takeRight","link","tickValues","Date","toLocaleDateString","includes","maxDomain","axis","properties","COUNTYFP","setTimeout","clearTimeout","flyoutStyle","borderPadding","symbolSpacer","getMonth","getDate","caseRateMA","centerOffset","ScatterChart","showLegend","cornerRadius","rescaleX","CountyReport","tooltipContent","cases","deaths","cfr","countyCasesOutcome","setCountyCasesOutcome","countyDeathsOutcome","setCountyDeathsOutcome","stateCasesOutcome","setStateCasesOutcome","stateDeathsOutcome","setStateDeathsOutcome","nationCasesOutcome","setNationCasesOutcome","nationDeathsOutcome","setNationDeathsOutcome","countyCases","stateCases","nationCases","countyDeaths","stateDeaths","nationDeaths","covidmortality7dayfig","Table","celled","singleLine","textAlign","HeaderCell","colSpan","toLocaleString","centered","xlog","striped","compact","basic","Body","Cell","isNaN","colorPalette2","MapState","setStateFips","measureA","setMeasureA","measureB","setMeasureB","colorScaleA","setColorScaleA","colorScaleB","setColorScaleB","measureOptionsA","setMeasureOptionsA","measureOptionsB","setMeasureOptionsB","legendSplitA","setLegendSplitA","legendSplitB","setLegendSplitB","legendMaxA","setLegendMaxA","legendMaxB","setLegendMaxB","legendMinA","setLegendMinA","legendMinB","setLegendMinB","setName","coldata","splitA","maxA","minA","splitB","maxB","minB","selection","stateOptions","fluid","labeled","AboutUs","bulleted","DataSources","App","to","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.0457157e.chunk.js","sourcesContent":["import React from \"react\";\nimport ErrorBoundary from \"react-error-boundary\";\nimport { Container, Menu, Image } from 'semantic-ui-react';\n\nimport { useHistory } from 'react-router-dom';\n\n\nexport default function AppBar(props) {\n\n  const history = useHistory();\n\n  return (\n    <ErrorBoundary>\n      <Menu borderless inverted fixed='top'\n        style={{backgroundImage: 'url(\"/Emory_COVID_header_LightBlue.jpg\")',\n                backgroundSize: 'cover'}}>\n        <Container style={{width: '1290px'}}>\n          <Menu.Item as='a' header onClick={() => history.push('/')}>\n            <span style={{fontWeight: 400, color: '#fff', lineHeight: 1.3}}>\n           COVID-19 Health Equity<br/>Interactive Dashboard\n           </span>\n          </Menu.Item>\n          <Menu.Item \n            active={props.menu==='countyReport'} \n            content='Home'\n            onClick={() => history.push('/')}\n            name='countyReport'/>\n\n          <Menu.Item \n            active={props.menu==='mapState'} \n            onClick={() => history.push('/map-your-state')}\n            name='mapState'>\n            Map Your State\n          </Menu.Item>\n          <Menu.Item \n            active={props.menu==='dataSources'} \n            onClick={() => history.push('/data-sources')}\n            name='dataSources'>\n            Data Sources &<br/>Interpretation\n          </Menu.Item>\n          <Menu.Item \n            active={props.menu==='aboutUs'} \n            content='About Us'\n            onClick={() => history.push('/about-team')}\n            name='aboutUs'/>            \n          <Menu.Menu position='right'>\n            <Menu.Item as='a' header>\n              <Image size='small' src='/logo_white.png' />\n            </Menu.Item>\n          </Menu.Menu>\n        </Container>\n      </Menu>\n    </ErrorBoundary>\n  );\n}\n\n\n\n","\nimport React, {\n  createContext,\n  useMemo,\n  useCallback,\n} from \"react\"\nimport PropTypes from \"prop-types\"\nimport * as d3Geo from \"d3-geo\"\n\nconst { geoPath, ...projections } = d3Geo\n\nconst MapContext = createContext()\n\nconst makeProjection = ({\n  projectionConfig = {},\n  projection = \"geoEqualEarth\",\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0\n}) => {\n  const isFunc = typeof projection === \"function\"\n\n  if (isFunc) return projection\n\n  const scl = projectionConfig.scale || null;\n\n  let proj = projections[projection]().translate([width/2 + (offsetX)*scl/1000 ,\n                                              height/2 + (offsetY)*scl/1000]);\n\n  const supported = [\n    proj.center ? \"center\" : null,\n    proj.rotate ? \"rotate\" : null,\n    proj.scale ? \"scale\" : null,\n    proj.parallels ? \"parallels\" : null,\n  ]\n\n  supported.forEach(d => {\n    if (!d) return\n    proj = proj[d](projectionConfig[d] || proj[d]())\n  })\n\n  return proj\n}\n\nconst MapProvider = ({\n  width,\n  height,\n  offsetX,\n  offsetY,\n  projection,\n  projectionConfig,\n  ...restProps\n}) => {\n  const [cx, cy] = projectionConfig.center || []\n  const [rx, ry, rz] = projectionConfig.rotate || []\n  const [p1, p2] = projectionConfig.parallels || []\n  const s = projectionConfig.scale || null\n\n  const projMemo = useMemo(() => {\n    return makeProjection({\n      projectionConfig: {\n        center: (cx || cx === 0) || (cy || cy === 0) ? [cx, cy] : null,\n        rotate: (rx || rx === 0) || (ry || ry === 0) ? [rx, ry, rz] : null,\n        parallels: (p1 || p1 === 0) || (p2 || p2 === 0) ? [p1, p2] : null,\n        scale: s,\n      },\n      projection,\n      width,\n      height,\n      offsetX,\n      offsetY,\n    })\n  }, [ width, height, projection, cx, cy, rx, ry, rz, p1, p2, s, offsetX, offsetY ])\n\n  const proj = useCallback(projMemo, [projMemo])\n\n  const value = useMemo(() => {\n    return {\n      width,\n      height,\n      projection: proj,\n      path: geoPath().projection(proj),\n    }\n  }, [ width, height, proj ])\n\n  return (<MapContext.Provider value={value} {...restProps} />)\n}\n\nMapProvider.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  offsetX: PropTypes.number,\n  offsetY: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n}\n\nexport { MapProvider, MapContext }\n","\nimport { feature } from \"topojson-client\"\n\nexport function getCoords(w, h, t) {\n  const xOffset = (w * t.k - w) / 2\n  const yOffset = (h * t.k - h) / 2\n  return [w / 2 - (xOffset + t.x) / t.k, h / 2 - (yOffset + t.y) / t.k]\n}\n\nexport function fetchGeographies(url) {\n  return fetch(url)\n    .then(res => {\n      if (!res.ok) {\n        throw Error(res.statusText)\n      }\n      return res.json()\n    }).catch(error => {\n      console.log(\"There was a problem when fetching the data: \", error)\n    })\n}\n\nexport function getFeatures(geographies, parseGeographies) {\n  if (Array.isArray(geographies)) return parseGeographies ? parseGeographies(geographies) : geographies\n  const feats = feature(\n    geographies,\n    geographies.objects[Object.keys(geographies.objects)[0]]\n  ).features\n  return parseGeographies ? parseGeographies(feats) : feats\n}\n\nexport function prepareFeatures(geographies, path) {\n  return geographies ? geographies.map((d, i) => {\n    return {\n      ...d,\n      rsmKey: `geo-${i}`,\n      svgPath: path(d),\n    }\n  }) : []\n}\n\nexport function createConnectorPath(dx = 30, dy = 30, curve = 0.5) {\n  const curvature = Array.isArray(curve) ? curve : [curve, curve]\n  const curveX = dx / 2 * curvature[0]\n  const curveY = dy / 2 * curvature[1]\n  return `M${0},${0} Q${-dx / 2 - curveX},${-dy / 2 + curveY} ${-dx},${-dy}`\n}\n\nexport function isString(geo) { return typeof geo === \"string\" }\n","\nimport { useMemo, useState, useEffect, useContext } from \"react\"\nimport { MapContext } from \"./MapProvider\"\n\nimport { fetchGeographies, getFeatures, prepareFeatures, isString } from \"../utils\"\n\nexport default function useGeographies({ geography, parseGeographies }) {\n  const { path } = useContext(MapContext)\n  const [geographies, setGeographies] = useState()\n\n  useEffect(() => {\n    if (typeof window === `undefined`) return\n\n    if (isString(geography)) {\n      fetchGeographies(geography).then(geos => {\n        if (geos) setGeographies(getFeatures(geos, parseGeographies))\n      })\n    } else {\n      setGeographies(getFeatures(geography, parseGeographies))\n    }\n  }, [geography, parseGeographies])\n\n  const output = useMemo(() => {\n    return prepareFeatures(geographies, path)\n  }, [geographies, path])\n\n  return { geographies: output }\n}\n","\nimport React, { useContext } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapContext } from \"./MapProvider\"\nimport useGeographies from \"./useGeographies\"\n\nconst Geographies = ({\n  geography,\n  children,\n  parseGeographies,\n  className = \"\",\n  ...restProps\n}) => {\n  const { path, projection } = useContext(MapContext)\n  const { geographies } = useGeographies({ geography, parseGeographies })\n\n  return (\n    <g className={`rsm-geographies ${className}`} {...restProps}>\n      {\n        geographies && geographies.length > 0 &&\n        children({ geographies, path, projection })\n      }\n    </g>\n  )\n}\n\nGeographies.propTypes = {\n  geography: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n    PropTypes.array,\n  ]),\n  children: PropTypes.func,\n  parseGeographies: PropTypes.func,\n  className: PropTypes.string,\n}\n\nexport default Geographies\n","\nimport React, { useState, memo } from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Geography = ({\n  geography,\n  onMouseEnter,\n  onMouseLeave,\n  onMouseDown,\n  onMouseUp,\n  onFocus,\n  onBlur,\n  style = {},\n  className = \"\",\n  ...restProps\n}) => {\n  const [isPressed, setPressed] = useState(false)\n  const [isFocused, setFocus] = useState(false)\n\n  function handleMouseEnter(evt) {\n    setFocus(true)\n    if (onMouseEnter) onMouseEnter(evt)\n  }\n\n  function handleMouseLeave(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onMouseLeave) onMouseLeave(evt)\n  }\n\n  function handleFocus(evt) {\n    setFocus(true)\n    if (onFocus) onFocus(evt)\n  }\n\n  function handleBlur(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onBlur) onBlur(evt)\n  }\n\n  function handleMouseDown(evt) {\n    setPressed(true)\n    if (onMouseDown) onMouseDown(evt)\n  }\n\n  function handleMouseUp(evt) {\n    setPressed(false)\n    if (onMouseUp) onMouseUp(evt)\n  }\n\n  return (\n    <path\n      tabIndex=\"0\"\n      className={`rsm-geography ${className}`}\n      d={geography.svgPath}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      style={style[isPressed || isFocused ? (isPressed ? \"pressed\" : \"hover\") : \"default\"]}\n      {...restProps}\n    />\n  )\n}\n\nGeography.propTypes = {\n  geography: PropTypes.object,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  style: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default memo(Geography)\n","\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapProvider } from \"./MapProvider\"\n\nconst ComposableMap = ({\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0,\n  projection = \"geoEqualEarth\",\n  projectionConfig = {},\n  className = \"\",\n  ...restProps\n}) => {\n  return (\n    <MapProvider\n      width={width}\n      height={height}\n      offsetX={offsetX}\n      offsetY={offsetY}\n      projection={projection}\n      projectionConfig={projectionConfig}\n    >\n      <svg\n        width={width}\n        height={height}\n        className={`rsm-svg ${className}`}\n        {...restProps}\n      />\n    </MapProvider>\n  )\n}\n\nComposableMap.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default ComposableMap\n","\nimport React, { useContext, useState } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapContext } from \"./MapProvider\"\n\nconst Marker = ({\n  coordinates,\n  children,\n  onMouseEnter,\n  onMouseLeave,\n  onMouseDown,\n  onMouseUp,\n  onFocus,\n  onBlur,\n  style = {},\n  className = \"\",\n  ...restProps\n}) => {\n  const { projection } = useContext(MapContext)\n  const [isPressed, setPressed] = useState(false)\n  const [isFocused, setFocus] = useState(false)\n\n  const [x, y] = projection(coordinates)\n\n  function handleMouseEnter(evt) {\n    setFocus(true)\n    if (onMouseEnter) onMouseEnter(evt)\n  }\n\n  function handleMouseLeave(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onMouseLeave) onMouseLeave(evt)\n  }\n\n  function handleFocus(evt) {\n    setFocus(true)\n    if (onFocus) onFocus(evt)\n  }\n\n  function handleBlur(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onBlur) onBlur(evt)\n  }\n\n  function handleMouseDown(evt) {\n    setPressed(true)\n    if (onMouseDown) onMouseDown(evt)\n  }\n\n  function handleMouseUp(evt) {\n    setPressed(false)\n    if (onMouseUp) onMouseUp(evt)\n  }\n\n  return (\n    <g\n      transform={`translate(${x}, ${y})`}\n      className={`rsm-marker ${className}`}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      style={style[isPressed || isFocused ? (isPressed ? \"pressed\" : \"hover\") : \"default\"]}\n      {...restProps}\n    >\n      {children}\n    </g>\n  )\n}\n\nMarker.propTypes = {\n  coordinates: PropTypes.array,\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node),\n  ]),\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  style: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default Marker\n","\nimport React, { useContext } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapContext } from \"./MapProvider\"\nimport { createConnectorPath } from \"../utils\"\n\nconst Annotation = ({\n  subject,\n  children,\n  connectorProps,\n  dx = 30,\n  dy = 30,\n  curve = 0,\n  className = \"\",\n  ...restProps\n}) => {\n  const { projection } = useContext(MapContext)\n  const [x, y] = projection(subject)\n  const connectorPath = createConnectorPath(dx, dy, curve)\n\n  return (\n    <g\n      transform={`translate(${x + dx}, ${y + dy})`}\n      className={`rsm-annotation ${className}`}\n      {...restProps}\n    >\n      <path d={connectorPath} fill=\"transparent\" stroke=\"#000\" {...connectorProps} />\n      {children}\n    </g>\n  )\n}\n\nAnnotation.propTypes = {\n  subject: PropTypes.array,\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node),\n  ]),\n  dx: PropTypes.number,\n  dy: PropTypes.number,\n  curve: PropTypes.number,\n  connectorProps: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default Annotation\n","import React, {useState } from 'react'\nimport { Grid, List, Divider, Image } from 'semantic-ui-react'\nimport ReactDOM from 'react-dom';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nfunction myFunction() {\n  alert('Link is copied to clipboard!');\n  \n}\n\nexport default function Notes(props){\n\n\n  const [state, setState] = useState(\"https://covid19.emory.edu/\");\n \n  return (\n\n  \t\n\n    <div style={{paddingTop: '2em', fontWeight: 300}}>\n    <Divider/>\n    <Grid>\n      <Grid.Row>\n        <Grid.Column style={{fontSize: '1em', lineHeight: '1.5em'}}>\n          Early data about COVID-19 suggests that communities are affected very differently due to social determinants of health like population density, poverty, residential segregation, underlying chronic health conditions, and availability of medical services. \n          In order to predict how the epidemic will continue to unfold and prepare for the future, it is critical to understand differences in underlying risk factors. \n          There is no one-size-fits all approach to combat the epidemic, but accurate and meaningful data is a key component of a robust public health response that is informed by contextual factors and prioritizes health equity.\n          <br/><br/>\n          The COVID-19 Health Equity Dashboard (<a href=\"COVID19.emory.edu\"> COVID19.emory.edu</a>) seeks to fill the gaps in county-level data about the virus and underlying social determinants of health. \n          Our goal is for this Dashboard to facilitate easy comparisons of counties with respect to COVID-19 outcomes and social determinants. \n          We hope this becomes a valuable resource for and critical component of tailored public health responses to COVID-19 across the wide range of environments that Americans inhabit.\n\n        </Grid.Column>\n      </Grid.Row>\n      <Divider hidden/>\n      <Grid.Row columns={3}>\n        <Grid.Column>          \n          <Image size='small' src='/logo.png' />\n          &copy; 2020 Emory University. All rights reserved.\n          <br/>\n          <a href=\"/privacy\"> Privacy Statement</a> \n\n        </Grid.Column>\n        <Grid.Column style={{paddingLeft: 130}}>          \n          <small>\n            This <a href=\"COVID19.emory.edu\"> COVID-19 Health Equity Dashboard </a> is created using\n            <List as='ol'>\n              <List.Item as='li' value='-'><a href=\"https://www.react-simple-maps.io/\">React Simple Maps</a> by <a href=\"https://www.zcreativelabs.com/\">z creative labs</a></List.Item>\n              <List.Item as='li' value='-'><a href=\"https://formidable.com/open-source/victory/\">Victory</a> by <a href=\"https://formidable.com/\">Formidable</a></List.Item>\n              <List.Item as='li' value='-'><a href=\"https://github.com/Semantic-Org/Semantic-UI-React\">Semantic UI React</a> by <a href=\"https://github.com/levithomason\">@levithomason</a> and an amazing community of <a href=\"https://github.com/Semantic-Org/Semantic-UI-React/graphs/contributors\">contributors</a></List.Item> \n              <List.Item as='li' value='-'><a href=\"https://github.com/facebook/create-react-app\">Create React App</a> by <a href=\"https://about.fb.com/company-info/\">Facebook</a></List.Item> \n            </List>\n          </small>\n\n        </Grid.Column>\n\n        <Grid.Column style={{paddingLeft: 0}}>\n          \t<Grid>\n\t        \t<Grid.Row style={{width: 400, paddingBottom: 0, right: -295}}> \n\t            \tShare This Dashboard \n\t\t\t\t</Grid.Row>\n\t\t\t\t<Grid.Row columns = {15} style ={{ paddingTop: 0}}>\n\t\t\t\t  <Grid.Column style ={{paddingLeft: 0, paddingRight: 0, right: -295}}>\n\t            \t<a href=\"https://twitter.com/share?ref_src=twsrc%5Etfw\" className=\"twitter-share-button\" data-size=\"large\" data-text=\"Check out the Emory COVID-19 Health Equity Interactive Dashboard! \" data-url=\"https://covid19.emory.edu/\" data-show-count=\"false\" target=\"_blank\" rel=\"noopener noreferrer\"><Image width= \"24px\" src='/Twitter_Logo_Blue.png' /> </a><script async src=\"https://platform.twitter.com/widgets.js\" charSet=\"utf-8\"></script>\n\t\t\t  \t  </Grid.Column>\n\t\t\t  \t  <Grid.Column style ={{paddingLeft: 0, paddingRight: 0, right: -299, bottom: -5}}>\n\t            \t<a href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fcovid19.emory.edu%2F&amp;src=sdkpreparse\" data-href=\"https://covid19.emory.edu/\" target=\"_blank\" rel=\"noopener noreferrer\"><Image width= \"14px\" src='/f_logo_RGB-Blue_512.png' /></a>\n\t\t\t  \t  </Grid.Column>\n\t\t\t  \t  <Grid.Column style ={{paddingLeft: 0, paddingRight: 0, right: -295}}>\n\t            \t<a href=\"https://web.whatsapp.com/send?text= Check out the Emory COVID-19 Health Equity Interactive Dashboard! https://covid19.emory.edu/\" data-action=\"share/whatsapp/share\" target=\"_blank\" rel=\"noopener noreferrer\"><Image width= \"22px\" src='/WhatsApp_Logo_1.png' /></a>\n\t\t\t  \t  </Grid.Column>\n\t\t\t\t  <Grid.Column style ={{paddingLeft: 9, paddingRight: 0, paddingTop: 4, right: -290}}>\n\t\t\t\t      <div>\n \n              <CopyToClipboard text={state}>\n                <img onClick={()=>myFunction()} src='/copy_icon.png' style={{height: \"13px\", width: \"13px\" }}/>\n              </CopyToClipboard>\n              \n            </div>\n\t\t\t\t  \t\n\t\t\t\t\t\t\t\t\n\t\t\t\t  </Grid.Column>\n\t\t\t  \t</Grid.Row>\n\t\t  \t</Grid>\n\t\t  \t\n       \t  \n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n\n\n    </div>);\n}\n","import React, { useEffect, useState } from 'react'\nimport { Container, Grid, Dropdown, Breadcrumb, Header, List, Loader, Divider } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport { geoCentroid } from \"d3-geo\";\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport Marker from './Marker';\nimport Annotation from './Annotation';\nimport ReactTooltip from \"react-tooltip\";\nimport { VictoryChart, \n  VictoryGroup, \n  VictoryBar, \n  VictoryTheme, \n  VictoryAxis, \n  VictoryLegend,\n  VictoryLine,  \n  VictoryLabel, \n  VictoryScatter,\n} from 'victory';\nimport { useHistory } from \"react-router-dom\";\nimport Notes from './Notes';\nimport _ from 'lodash';\nimport { scaleQuantile } from \"d3-scale\";\nimport configs from \"./state_config.json\";\n\n\n\nfunction numberWithCommas(x) {\n    x = x.toString();\n    var pattern = /(-?\\d+)(\\d{3})/;\n    while (pattern.test(x))\n        x = x.replace(pattern, \"$1,$2\");\n    return x;\n}\n\n//const geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\"\nconst colorPalette = [\n        \"#e1dce2\",\n        \"#d3b6cd\",\n        \"#bf88b5\", \n        \"#af5194\", \n        \"#99528c\", \n        \"#633c70\", \n      ];\nconst colorHighlight = '#f2a900';\n\n\nfunction MapLabels(props){\n\n  const offsets = {\n    VT: [50, -8],\n    NH: [34, 2],\n    MA: [30, -1],\n    RI: [28, 2],\n    CT: [35, 10],\n    NJ: [34, 1],\n    DE: [33, 0],\n    MD: [47, 10],\n    DC: [49, 21],\n  };\n\n  return (\n    <svg>\n\n      {props.geographies.map(geo => {\n          const centroid = geoCentroid(geo);\n          const cur = props.stateLabels.find(s => s.val === geo.id);\n          return (\n            <g key={geo.rsmKey + \"-name\"}>\n              {cur &&\n                centroid[0] > -160 &&\n                centroid[0] < -67 &&\n                (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                  <Marker coordinates={centroid}>\n                    <text y=\"2\" fontSize={14} textAnchor=\"middle\" fill=\"#eee\">\n                      {cur.id}\n                    </text>\n                  </Marker>\n                ) : (\n                  <Annotation\n                    subject={centroid}\n                    dx={offsets[cur.id][0]}\n                    dy={offsets[cur.id][1]}\n                  >\n                    <text x={4} fontSize={14} alignmentBaseline=\"middle\">\n                      {cur.id}\n                    </text>\n                  </Annotation>\n                ))}\n            </g>\n          );\n        })}\n    </svg>\n    );\n}\n\n\nexport default function USMap(props) {\n\n  const [stateName, setStateName] = useState('Georgia');\n  const [fips, setFips] = useState('13');\n  const [tooltipContent, setTooltipContent] = useState('');\n  const history = useHistory();\n  const [dataFltrd, setDataFltrd] = useState();\n\n  const [dataStateFltrd, setDataStateFltrd] = useState();\n  const [dataState, setDataState] = useState();\n\n  const [data, setData] = useState();\n  const [date, setDate] = useState('');\n  const [stateLabels, setStateLabels] = useState();\n  const [colorScale, setColorScale] = useState();\n\n  const [legendMax, setLegendMax] = useState([]);\n  const [legendMin, setLegendMin] = useState([]);\n  const [legendSplit, setLegendSplit] = useState([]);\n\n  const [metric, setMetric] = useState('mean7daycases');\n  const [metricOptions, setMetricOptions] = useState('mean7daycases');\n  const [metricName, setMetricName] = useState('Average Daily COVID-19 Cases');\n\n  const [varMap, setVarMap] = useState({});\n  const [delayHandler, setDelayHandler] = useState();\n\n\n  useEffect(()=>{\n    fetch('/data/rawdata/variable_mapping.json').then(res => res.json())\n      .then(x => {\n        setVarMap(x);\n        setMetricOptions(_.filter(_.map(x, d=> {\n          return {key: d.id, value: d.variable, text: d.name, group: d.group};\n        }), d => (d.text !== \"Urban-Rural Status\" && d.group === \"outcomes\")));\n      });\n  }, []);\n\n\n\n\n  useEffect(() => {\n    if (metric) {\n    fetch('/data/data.json').then(res => res.json())\n      .then(x => {\n        \n        setData(x);\n        setDataFltrd(_.filter(_.map(x, (d, k) => {\n          d.fips = k\n          return d}), \n          d => (d.Population > 10000 && \n              d.black > 5 && \n              d.fips.length === 5 && \n              d['covidmortalityfig'] > 0)));\n      \n        const cs = scaleQuantile()\n        .domain(_.map(_.filter(_.map(x, (d, k) => {\n          d.fips = k\n          return d}), \n          d => (\n              d[metric] >= 0 &&\n              d.fips.length === 5)),\n          d=> d[metric]))\n        .range(colorPalette);\n\n        let scaleMap = {}\n        _.each(x, d=>{\n          if(d[metric] >= 0){\n          scaleMap[d[metric]] = cs(d[metric])}});\n      \n        setColorScale(scaleMap);\n        var max = 0\n        var min = 100\n        var length = 0\n        _.each(x, d=> { \n          if (d[metric] > max && d.fips.length === 5) {\n            max = d[metric]\n          } else if (d.fips.length === 5 && d[metric] < min && d[metric] >= 0){\n            min = d[metric]\n          }\n        });\n\n        if (max > 999) {\n          max = (max/1000).toFixed(0) + \"K\";\n          setLegendMax(max);\n        }else{\n          setLegendMax(max.toFixed(0));\n\n        }\n        setLegendMin(min.toFixed(0));\n\n        var split = scaleQuantile()\n        .domain(_.map(_.filter(_.map(x, (d, k) => {\n          d.fips = k\n          return d}), \n          d => (\n              d[metric] >= 0 &&\n              d.fips.length === 5)),\n          d=> d[metric]))\n        .range(colorPalette);\n\n        setLegendSplit(split.quantiles());\n\n\n      });\n\n    fetch('/data/date.json').then(res => res.json())\n      .then(x => setDate(x.date));\n    \n    fetch('/data/allstates.json').then(res => res.json())\n      .then(x => setStateLabels(x));\n\n    fetch('/data/data.json').then(res => res.json())\n      .then(x => {\n        setDataState(x);\n        setDataStateFltrd(_.filter(_.map(x, (c, l) => {\n          c.fips = l\n          return c}),\n          c => (c.fips.length === 2)));\n      });\n    }\n\n  }, [metric])\n\n  if (data && dataFltrd && stateLabels && dataStateFltrd && dataState) {\n\n  return (\n      <div>\n\n        <AppBar menu='countyReport'/>\n        <Container style={{marginTop: '6em', minWidth: '1260px'}}>\n          <Breadcrumb>\n            <Breadcrumb.Section active>United States</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n          </Breadcrumb>\n          <Divider hidden />\n          <Grid columns={16}>\n          <div>\n            See Dashboard Guide (<a href=\"Dashboard user guide.pdf\" target=\"_blank\" rel=\"noopener noreferrer\"> PDF </a> / <a href=\"https://youtu.be/PmI42rHnI6U\" target=\"_blank\" rel=\"noopener noreferrer\"> YouTube </a>)\n            \n          </div>\n            <Grid.Row>\n              <Grid.Column width={9}>\n                <Header as='h2' style={{fontWeight: 400}}>\n                  <Header.Content>\n                    COVID-19 is affecting every community differently.<br/>\n                    Some areas are much harder-hit than others.<br/>\n                    What is happening where you live?\n                    <Header.Subheader style={{fontWeight: 300}}></Header.Subheader>\n                  </Header.Content>\n                </Header>\n                \n\n                <Grid.Row columns={2} style={{width: 630, padding: 0, paddingTop: 0, paddingRight: 0, paddingBottom: 0}}>\n\n                      <Dropdown\n                        icon=''\n\n                        style={{background: '#fff', \n                                fontSize: 16,\n                                fontWeight: 400, \n                                theme: '#000000',\n                                width: '370px',\n                                top: '12px',\n                                left: '0px',\n                                text: \"Select\",\n                                borderTop: 'none',\n                                borderLeft: '1px solid #FFFFFF',\n                                borderRight: '0px', \n                                borderBottom: '0.5px solid #bdbfc1',\n                                borderRadius: 0,\n                                minHeight: '1.0em',\n                                paddingBottom: '0.0em'}}\n                        placeholder= \"Average Daily COVID-19 Cases\"\n                        inline\n                        search\n                        pointing = 'top'\n                        options={metricOptions}\n                        onChange={(e, { value }) => {\n                          setMetric(value);\n                          setMetricName(varMap[value]['name']);\n                        }}\n\n                        \n                      />\n\n                <svg width=\"260\" height=\"80\">\n                  \n\n                  <text x={50} y={70} style={{fontSize: '0.8em'}}>Low</text>\n                  <text x={50+20 * (colorPalette.length - 1)} y={70} style={{fontSize: '0.8em'}}>High</text>\n\n                  {_.map(colorPalette, (color, i) => {\n                    return <rect key={i} x={50+20*i} y={40} width=\"20\" height=\"20\" style={{fill: color, strokeWidth:1, stroke: color}}/>                    \n                  })} \n\n                  <rect x={195} y={40} width=\"20\" height=\"20\" style={{fill: \"#FFFFFF\", strokeWidth:0.5, stroke: \"#000000\"}}/>                    \n                  <text x={217} y={50} style={{fontSize: '0.7em'}}> None </text>\n                  <text x={217} y={59} style={{fontSize: '0.7em'}}> Reported </text>\n\n                  {_.map(legendSplit, (splitpoint, i) => {\n                    if(legendSplit[i] < 1){\n                      return <text key = {i} x={70 + 20 * (i)} y={37} style={{fontSize: '0.7em'}}> {legendSplit[i].toFixed(1)}</text>                    \n                    }\n                    return <text key = {i} x={70 + 20 * (i)} y={37} style={{fontSize: '0.7em'}}> {legendSplit[i].toFixed(0)}</text>                    \n                  })} \n                  <text x={50} y={37} style={{fontSize: '0.7em'}}>{legendMin}</text>\n                  <text x={170} y={37} style={{fontSize: '0.7em'}}>{legendMax}</text>\n\n                </svg>\n                </Grid.Row>\n\n\n                <ComposableMap \n                  projection=\"geoAlbersUsa\" \n                  data-tip=\"\"\n                  width={630} \n                  height={380}\n                  strokeWidth= {0.1}\n                  stroke= 'black'\n                  projectionConfig={{scale: 750}}\n                   >\n                  <Geographies geography={geoUrl}>\n                    {({ geographies }) => \n                      <svg>\n                        {geographies.map(geo => (\n                          <Geography\n                            key={geo.rsmKey}\n                            geography={geo}\n                            onMouseEnter={()=>{\n\n                              //console.log(geo); \n                              const stateFips = geo.id.substring(0,2);\n                              const configMatched = configs.find(s => s.fips === stateFips);\n\n                              setFips(stateFips);\n                              setStateName(configMatched.name);\n                              //setStateName(geo.id.substring(0,2));\n                              //setStateName(geo.properties.name); \n                              //setTooltipContent()                            \n                            \n                            }}\n\n\n\n                            onMouseLeave={()=>{\n                              setTooltipContent(\"\")\n                            }}\n                            onClick={()=>{\n                              history.push(\"/\"+geo.id.substring(0,2)+\"\");\n                            }}\n\n                            \n                            fill={fips===geo.id.substring(0,2)?colorHighlight:\n                            ((colorScale && data[geo.id] && (data[geo.id][metric]) > 0)?\n                                colorScale[data[geo.id][metric]]: \n                                (colorScale && data[geo.id] && data[geo.id][metric] === 0)?\n                                  '#e1dce2':'#FFFFFF')}\n                            \n                          />\n                        ))}\n                        <MapLabels geographies={geographies} stateLabels={stateLabels} />\n                      </svg>\n                    }\n                  </Geographies>\n                  \n\n                </ComposableMap>\n                \n                <Grid.Row style={{paddingTop: \"11px\"}}>\n                    <small style={{fontWeight: 300}}>\n                    <em>Daily Cases</em> is the average number of new positive cases for COVID-19 infection over the last seven days. <br/>\n                    <em>Daily Deaths</em> is the average number of new deaths due to confirmed or presumed COVID-19 infection over the last seven days. <br/>\n                    For a complete table of variable defintion, click <a href=\"https://covid19.emory.edu/data-sources\" target=\"_blank\" rel=\"noopener noreferrer\"> here. </a>\n                    </small>\n                </Grid.Row>\n              </Grid.Column>\n              <Grid.Column width={7} style ={{paddingLeft: 0}}>\n                <Header as='h2' style={{fontWeight: 400}}>\n                  <Header.Content style={{width : 550}}>\n                    A Snapshot of Health Disparities in <span style={{color: colorHighlight}}>{stateName}</span>\n                    <Header.Subheader style={{fontWeight: 300}}>\n                      Counties with higher proportions of African American residents tend to have higher rates of death from COVID-19. \n                    </Header.Subheader>\n                    <Header.Subheader style={{fontWeight: 300}}>\n                      Click on the map to explore your state and county.\n                    </Header.Subheader>\n                  </Header.Content>\n                </Header>\n                <Grid>\n                  <Grid.Row>\n                    <VictoryChart\n                      width={500}\n                      height={400}\n                      scale={{y: 'log'}}\n                      padding={{left: 65, right: 30, top: 50, bottom: 50}}>\n\n                      <VictoryLegend\n                        x={10} y={10}\n                        orientation=\"horizontal\"\n                        style={{labels:{ fontFamily: 'lato'}}}\n                        colorScale={[\"#bdbfc1\", colorHighlight]}\n                        data ={[\n                          {name: ('Other counties in '+ 'US')}, {name: 'Counties in '+stateName}\n                          ]}\n                      />\n                      <VictoryScatter\n                        sortKey={(d) => d.fips.substring(0,2)===fips}\n                        style={{ data: { fontFamily: 'lato',\n                                  fill: ({datum}) => datum.fips.substring(0,2)===fips?\"#f2a900\":\"#bdbfc1\",\n                                 fillOpacity: ({datum}) => datum.fips.substring(0,2)===fips?1.0:0.5} }}\n                        data={dataFltrd}\n                        size={4}\n                        x='black'\n                        y='covidmortalityfig'\n                      />\n                      <VictoryAxis label={'% African American'} style={{axisLabel: {fontFamily: 'lato'}, tickLabels: { fontFamily: 'lato'}}}/>\n                      <VictoryAxis dependentAxis \n                        label={'COVID-19 Deaths / 100k (log-scale)'} \n                        style={{ axisLabel: {padding: 40, fontFamily: 'lato'}, tickLabels: {fontFamily: 'lato'}}} \n                        tickCount={5}\n                        tickFormat={(y) => (Math.round(y*100)/100)}/>\n                    </VictoryChart>\n                  </Grid.Row>\n                  <Grid.Row style={{paddingTop: 0, paddingLeft: 10}}>\n                    <small style={{fontWeight: 300}}>\n                    Data last updated: {date}, updated daily<br/>\n                    The chart does not contain those counties with less than 10,000 population and less than 5% African American. <br/>\n                    <a href=\"https://youtu.be/0eFjhnDQe6g\" target=\"_blank\" rel=\"noopener noreferrer\"> COVID-19 in African American Communities: A Brief Overview </a> <br/>\n                    <a href=\"https://youtu.be/U-Aqx7vQocY\" target=\"_blank\" rel=\"noopener noreferrer\"> COVID-19 in Southwest Native American Communities: A Brief Overview </a>\n                    \n                    </small>\n                  </Grid.Row>\n                </Grid>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <Notes />\n        </Container>\n        <ReactTooltip > <font size=\"+2\"><b >{stateName}</b> </font> <br/> <b> Daily Cases</b>: {numberWithCommas(dataState[fips]['mean7daycases'].toFixed(0))} <br/> <b> Daily Deaths</b>: {numberWithCommas(dataState[fips]['mean7daydeaths'].toFixed(0))} <br/> <b>Click for county-level data.</b> </ReactTooltip>\n      </div>\n      );\n  } else {\n    return <Loader active inline='centered' />\n  }\n}","import React, { useEffect, useState } from 'react'\nimport { Container, Dropdown, Grid, Breadcrumb, Header, Loader, Divider } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport { VictoryChart, \n  VictoryContainer,\n  VictoryGroup, \n  VictoryBar, \n  VictoryTheme, \n  VictoryAxis, \n  VictoryLegend,\n  VictoryLine,\n  VictoryLabel,\n  VictoryArea,\n  VictoryTooltip,\n  VictoryVoronoiContainer\n} from 'victory';\n\nimport { useParams, useHistory } from 'react-router-dom';\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\nimport _ from 'lodash';\nimport { scaleQuantile } from \"d3-scale\";\nimport fips2county from './fips2county.json'\nimport stateOptions from \"./stateOptions.json\";\n\n\n\nimport configs from \"./state_config.json\";\n\nfunction numberWithCommas(x) {\n    x = x.toString();\n    var pattern = /(-?\\d+)(\\d{3})/;\n    while (pattern.test(x))\n        x = x.replace(pattern, \"$1,$2\");\n    return x;\n}\n\n\nconst colorPalette = [\n        \"#e1dce2\",\n        \"#d3b6cd\",\n        \"#bf88b5\", \n        \"#af5194\", \n        \"#99528c\", \n        \"#633c70\", \n      ];\nconst countyColor = '#f2a900';\nconst stateColor = '#778899';\nconst nationColor = '#b2b3b3';\n\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\n\n\nfunction BarChart(props) {\n  const colors = {\"USA\": nationColor, \n                  stateName: stateColor, \n                  countyName: countyColor};\n  if (props.countyFips !== \"_nation\" && props.stateFips !== \"_nation\") {\n  return (\n    <VictoryChart\n      theme={VictoryTheme.material}\n      width={230}\n      height={90}       \n      domainPadding={10}\n      scale={{y: props.ylog?'log':'linear'}}\n      minDomain={{y: props.ylog?1:0}}\n      padding={{left: 120, right: 30, top: 20, bottom: 20}}\n      containerComponent={<VictoryContainer responsive={false}/>}\n    >\n      <VictoryLabel text={props.title} x={140} y={10} textAnchor=\"middle\" style={{fontSize: 12, fontFamily: 'lato'}}/>\n      <VictoryAxis style={{tickLabels: {fontSize: 10, fontFamily: 'lato'}}} />\n      <VictoryAxis dependentAxis style={{tickLabels: {fontSize: 8, padding: 1,  fontFamily: 'lato'}}}/>\n      <VictoryBar\n        horizontal\n        barRatio={0.8}\n        labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(1))}\n        data={[{key: 'USA', 'value': props.data['_nation'][props.var] || 0},\n              {key: props.stateName, 'value': props.data[props.stateFips][props.var]>0?props.data[props.stateFips][props.var] : 0},\n              {key: props.countyName, 'value': props.data[props.stateFips+props.countyFips][props.var] > 0? props.data[props.stateFips+props.countyFips][props.var]:  0}]}\n        labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: 10, fill: ({datum}) => datum.key === props.countyName?countyColor:datum.key === props.stateName?stateColor:nationColor }}/>}\n        style={{\n          data: {\n            fill: ({ datum }) => datum.key === props.countyName?countyColor:datum.key === props.stateName?stateColor:nationColor\n          }\n        }}\n        x=\"key\"\n        y=\"value\"\n      />\n    </VictoryChart>);\n  }\n\n  return (\n\n    \n\n    <VictoryChart\n      theme={VictoryTheme.material}\n      width={230}\n      height={90}       \n      domainPadding={10}\n      scale={{y: props.ylog?'log':'linear'}}\n      minDomain={{y: props.ylog?1:0}}\n      padding={{left: 120, right: 30, top: 20, bottom: 30}}\n      containerComponent={<VictoryContainer responsive={false}/>}>\n      <VictoryLabel text={props.title} x={140} y={10} textAnchor=\"middle\" style={{fontSize: 12, fontFamily: 'lato'}}/>\n      <VictoryAxis style={{tickLabels: {fontSize: 10, fontFamily: 'lato'}}} />\n      <VictoryAxis dependentAxis style={{tickLabels: {fontSize: 8, padding: 1, fontFamily: 'lato'}}}/>\n      <VictoryBar\n        horizontal\n        barRatio={0.8}\n        labels={({ datum }) => (Math.round(datum.value*100)/100)}\n        data={[{key: 'USA', 'value': props.data['_nation'][props.var] || 0}]}\n        labelComponent={<VictoryLabel dx={5} style={{fontFamily: 'lato', fontSize: 10, fill: ({datum}) => datum.key === props.countyName?countyColor:datum.key === props.stateName?stateColor:nationColor}}/>}\n        style={{\n          data: {\n            fill: ({ datum }) => datum.key === props.countyName?countyColor:datum.key === props.stateName?stateColor:nationColor\n          }\n        }}\n        x=\"key\"\n        y=\"value\"\n      />\n    </VictoryChart>\n\n    \n    );\n  \n}\n\nexport default function StateMap(props) {\n\n  let {stateFips} = useParams();\n  const [config, setConfig] = useState();\n  const [stateName, setStateName] = useState('');\n  const [countyFips, setCountyFips] = useState('');\n  const [countyName, setCountyName] = useState('{County}');\n  const history = useHistory();\n  const [data, setData] = useState();\n  const [dataTS, setDataTS] = useState();\n  const [dataRD, setDataRD] = useState();\n  const [colorScale, setColorScale] = useState();\n  const [tooltipContent, setTooltipContent] = useState('');\n\n  const [legendMax, setLegendMax] = useState([]);\n  const [legendMin, setLegendMin] = useState([]);\n  const [legendSplit, setLegendSplit] = useState([]);\n\n  const [caseRate, setCaseRate] = useState();\n  const [percentChangeCases, setPercentChangeCases] = useState();\n\n  const [mortality, setMortality] = useState();\n  const [percentChangeMortality, setPercentChangeMortality] = useState();\n\n  const [dataHospTestTS, setDataHospTestTS] = useState();\n  const [positive, setPositive] = useState();\n  const [pctPositive, setPctPositive] = useState();\n  const [pctBedsOccupied, setPctBedsOccupied] = useState();\n\n\n  const [metric, setMetric] = useState('mean7daycases');\n  const [metricOptions, setMetricOptions] = useState('mean7daycases');\n  const [metricName, setMetricName] = useState('Average Daily COVID-19 Cases');\n\n  const [varMap, setVarMap] = useState({});\n  const [delayHandler, setDelayHandler] = useState();\n\n  const [covidMetric, setCovidMetric] = useState({t: 'n/a'});\n\n\n  useEffect(()=>{\n    fetch('/data/rawdata/variable_mapping.json').then(res => res.json())\n      .then(x => {\n        setVarMap(x);\n        setMetricOptions(_.filter(_.map(x, d=> {\n          return {key: d.id, value: d.variable, text: d.name, group: d.group};\n        }), d => (d.text !== \"Urban-Rural Status\" && d.group === \"outcomes\")));\n      });\n  }, []);\n\n  useEffect(()=>{\n    if (metric) {\n\n    \n    const configMatched = configs.find(s => s.fips === stateFips);\n\n    if (!configMatched){\n      history.push('/');\n    }else{\n\n      setConfig(configMatched);\n\n      setStateName(configMatched.name);\n\n      fetch('/data/data.json').then(res => res.json())\n        .then(x => {\n          setData(x);\n\n          const cs = scaleQuantile()\n          .domain(_.map(_.filter(_.map(x, (d, k) => {\n            d.fips = k\n            return d}), \n            d => (\n                d[metric] >= 0 &&\n                d.fips.length === 5)),\n            d=> d[metric]))\n          .range(colorPalette);\n\n          let scaleMap = {}\n          _.each(_.filter(_.map(x, (d, k) => {\n            d.fips = k\n            return d}), \n            d => (\n                d[metric] >= 0 &&\n                d.fips.length === 5))\n                , d=>{\n            scaleMap[d[metric]] = cs(d[metric])});\n\n          setColorScale(scaleMap);\n          var max = 0\n          var min = 100\n          _.each(x, d=> { \n            if (d[metric] > max && d.fips.length === 5) {\n              max = d[metric]\n            } else if (d.fips.length === 5 && d[metric] < min && d[metric] >= 0){\n              min = d[metric]\n            }\n          });\n\n          if (max > 999) {\n            max = (max/1000).toFixed(0) + \"K\";\n            setLegendMax(max);\n          }else{\n            setLegendMax(max.toFixed(0));\n\n          }\n          setLegendMin(min.toFixed(0));\n\n          var split = scaleQuantile()\n          .domain(_.map(_.filter(_.map(x, (d, k) => {\n            d.fips = k\n            return d}), \n            d => (\n                d[metric] >= 0 &&\n                d.fips.length === 5)),\n            d=> d[metric]))\n          .range(colorPalette);\n\n          setLegendSplit(split.quantiles());\n        });\n      \n      fetch('/data/timeseries'+stateFips+'.json').then(res => res.json())\n        .then(x => {\n\n          let countyMost = '';\n          let mortalityMA = 0;\n          let caseRate = 0.1;\n          let mortality = 0;\n          let t = 0;\n          let percentChangeCase = 0;\n          let percentChangeMortality = 0;\n\n          let percentBedsOccupied = 0;\n\n          let positive = 0.1;\n          let percentPositive = 0;\n          _.each(x, (v, k)=>{\n            if (k.length===5 && v.length > 0 && v[v.length-1].mortalityMA > mortalityMA){\n              countyMost = k.substring(2, 5);\n              mortalityMA = v[v.length-1].mortalityMA;\n            }\n            if (k.length===2 && v.length > 0 && v[v.length-1].t > t){\n              percentChangeCase = v[v.length-1].percent14dayDailyCases;\n              caseRate = v[v.length-1].caseRateMean;\n\n              percentChangeMortality = v[v.length-1].percent14dayDailyDeaths;\n              mortality = v[v.length-1].mortalityMean;\n\n              positive = v[v.length-1].positive;\n              percentPositive = v[v.length-1].percentPositive;\n              percentBedsOccupied = v[v.length-9].pctBedsOccupied;\n\n\n            }\n          });\n\n\n          \n          setPercentChangeCases(percentChangeCase.toFixed(0) + \"%\");\n    \n          setPercentChangeMortality(percentChangeMortality.toFixed(0) + \"%\");\n          \n          setPctPositive(percentPositive.toFixed(0) + \"%\");\n          setPctBedsOccupied(percentBedsOccupied.toFixed(0) + \"%\");\n          \n\n          setCaseRate(numberWithCommas(caseRate.toFixed(0)));\n          setMortality(numberWithCommas(mortality.toFixed(0)));\n\n          setPositive(numberWithCommas(positive.toFixed(0)))\n\n          setCountyFips(countyMost);\n          setCountyName(fips2county[stateFips+countyMost]);\n          \n\n          setDataTS(x);\n        });\n\n  fetch('/data/staticracedata'+stateFips+'.json').then(res => res.json())\n        .then(x => {\n          setDataRD(x);\n        });\n\n      }\n    }\n  }, [stateFips, metric]);\n\n  useEffect(() => {\n    if (dataTS && dataTS[stateFips]){\n      setCovidMetric(_.takeRight(dataTS[stateFips])[0]);\n    }\n  }, [dataTS]);\n\n\n  if (data && dataTS && dataRD) {\n    console.log(\"yes\");\n  return (\n      <div>\n        <AppBar menu='countyReport'/>\n        <Container style={{marginTop: '6em', minWidth: '1260px'}}>\n          {config &&\n          <div>\n          <Breadcrumb>\n            <Breadcrumb.Section link onClick={() => history.push('/')}>United States</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n            <Breadcrumb.Section active>{stateName}</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n          </Breadcrumb>\n          <Divider hidden/>\n\n                      \n\n          <Divider horizontal style={{fontWeight: 400, color: 'black', fontSize: '2.0em', paddingBottom: 10}}> Covid-19 Outcomes in {stateName} </Divider>\n\n\n          <Grid columns={15}>\n\n          <Grid.Row columns={5} style={{width: 252, paddingLeft: 5, paddingTop: '2em', paddingBottom: \"0\"}}>\n\n            <VictoryChart theme={VictoryTheme.material} \n                        minDomain={{ x: dataTS[\"_nation\"][dataTS[\"_nation\"].length-15].t }}\n                        width={252}\n                        height={180}       \n                        padding={{left: 11, right: -1, top: 60, bottom: -0.9}}\n                        containerComponent={<VictoryContainer responsive={false}/>}>\n                        <VictoryLabel text=\"Daily Cases\" x={130} y={10} textAnchor=\"middle\" style={{fontSize: 21, fontFamily: 'lato'}}/>\n                        \n                        <VictoryAxis\n                          tickValues={[\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3)*2 - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3) - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length-1].t]}                        \n                          style={{tickLabels: {fontSize: 10}}} \n                          tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}/>\n                        \n                        <VictoryGroup \n                          colorScale={[stateColor]}\n                        >\n\n                        <VictoryLine data={stateFips !== \"_nation\"? dataTS[stateFips] : dataTS[\"_\"]}\n                            x='t' y='caseRateMean'\n                            />\n\n                        </VictoryGroup>\n                        <VictoryArea\n                          style={{ data: {  fill: percentChangeCases.includes(\"+\")? \"#C0C0C0\": percentChangeCases.includes(\"-\")? \"#C0C0C0\" : \"#C0C0C0\" , fillOpacity: 0.1} }}\n                          data={stateFips !== \"_nation\"? dataTS[stateFips] : dataTS[\"_\"]}\n                          x= 't' y = 'caseRateMean'\n\n                        />\n\n                        <VictoryLabel text= {caseRate} x={130} y={75} textAnchor=\"middle\" style={{fontSize: 24, fontFamily: 'lato'}}/>\n                        <VictoryLabel text= {percentChangeCases}  x={130} y={115} textAnchor=\"middle\" style={{fontSize: 24, fontFamily: 'lato'}}/>\n\n                        \n            </VictoryChart>\n            \n\n            <VictoryChart theme={VictoryTheme.material}\n                        minDomain={{ x: dataTS[\"_nation\"][dataTS[\"_nation\"].length-15].t }}\n                        width={252}\n                        height={180}       \n                        padding={{left: 11, right: -1, top: 60, bottom: -0.9}}\n                        containerComponent={<VictoryContainer responsive={false}/>}>\n                        <VictoryLabel text=\"Daily Deaths\" x={130} y={10} textAnchor=\"middle\" style={{fontSize: 21, fontFamily: 'lato'}}/>\n                        \n                        <VictoryAxis\n                          tickValues={[\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3)*2 - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3) - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length-1].t]}                        \n                          style={{tickLabels: {fontSize: 10}}} \n                          tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}/>\n                        \n                        <VictoryGroup \n                          colorScale={[stateColor]}\n                        >\n\n                          <VictoryLine data={stateFips !== \"_nation\"? dataTS[stateFips] : dataTS[\"_\"]}\n                            x='t' y='mortalityMean'\n                            />\n\n                        </VictoryGroup>\n\n                        <VictoryArea\n                          style={{ data: { fill: percentChangeMortality.includes(\"+\")? \"#C0C0C0\": (percentChangeMortality.includes(\"-\")? \"#C0C0C0\" : \"#C0C0C0\"), fillOpacity: 0.1} }}\n                          data={stateFips !== \"_nation\"? dataTS[stateFips] : dataTS[\"_\"]}\n                          x= 't' y = 'mortalityMean'\n\n                        />\n                        <VictoryLabel text= {mortality} x={130} y={75} textAnchor=\"middle\" style={{fontSize: 24, fontFamily: 'lato'}}/>\n                        <VictoryLabel text= {percentChangeMortality} x={130} y={115} textAnchor=\"middle\" style={{fontSize: 24, fontFamily: 'lato'}}/>\n\n            </VictoryChart>\n\n            <VictoryChart theme={VictoryTheme.material}\n                        minDomain={{ x: dataTS[\"_nation\"][dataTS[\"_nation\"].length-24].t }}\n                        maxDomain={{ x: dataTS[\"_nation\"][dataTS[\"_nation\"].length-9].t }}\n                        width={252}\n                        height={180}       \n                        padding={{left: 11, right: -1, top: 60, bottom: -0.9}}\n                        containerComponent={<VictoryContainer responsive={false}/>}>\n                        <VictoryLabel text=\"Percent Occupied Beds\" x={130} y={10} textAnchor=\"middle\" style={{fontSize: 21, fontFamily: 'lato'}}/>\n                        \n                        <VictoryAxis\n                          tickValues={[\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3)*2 - 9].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3) - 9].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length-9].t]}                        \n                          style={{tickLabels: {fontSize: 10}}} \n                          tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}/>\n                        \n                        <VictoryGroup \n                          colorScale={[stateColor]}\n                        >\n\n                          <VictoryLine data={stateFips !== \"_nation\" ? dataTS[stateFips] : dataTS[\"_\"]}\n                            x='t' y='pctBedsOccupied'\n                            />\n\n                        </VictoryGroup>\n\n                        <VictoryArea\n                          style={{ data: { fill: \"#C0C0C0\", fillOpacity: 0.1} }}\n                          data={stateFips !== \"_nation\"? dataTS[stateFips] : dataTS[\"_\"]}\n                          x= 't' y = 'pctBedsOccupied'\n\n                        />\n                        <VictoryLabel text= {pctBedsOccupied} x={130} y={95} textAnchor=\"middle\" style={{fontSize: 24, fontFamily: 'lato'}}/>\n\n            </VictoryChart>\n\n            <VictoryChart theme={VictoryTheme.material}\n                        minDomain={{ x: dataTS[\"_nation\"][dataTS[\"_nation\"].length-15].t }}\n                        width={252}\n                        height={180}       \n                        padding={{left: 11, right: -1, top: 60, bottom: -0.9}}\n                        containerComponent={<VictoryContainer responsive={false}/>}>\n                        <VictoryLabel text=\"Percent Positive\" x={130} y={10} textAnchor=\"middle\" style={{fontSize: 21, fontFamily: 'lato'}}/>\n\n                        \n                        <VictoryAxis\n                          tickValues={[\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3)*2 - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3) - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length-1].t]}                        \n                          style={{tickLabels: {fontSize: 10}}} \n                          tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}/>\n                        \n                        <VictoryGroup \n                          colorScale={[stateColor]}\n                        >\n\n                          <VictoryLine data={stateFips !== \"_nation\"? dataTS[stateFips] : dataTS[\"_\"]}\n                            x='t' y='positive'\n                            />\n\n                        </VictoryGroup>\n\n                        <VictoryArea\n                          style={{ data: { fill: \"#C0C0C0\", fillOpacity: 0.1} }}\n                          data={stateFips !== \"_nation\"? dataTS[stateFips] : dataTS[\"_\"]}\n                          x= 't' y = 'positive'\n\n                        />\n                        <VictoryLabel text= {pctPositive} x={130} y={95} textAnchor=\"middle\" style={{fontSize: 24, fontFamily: 'lato'}}/>\n\n            </VictoryChart>\n\n\n            <VictoryChart\n                        theme={VictoryTheme.material} \n                        width={252}\n                        height={180}        \n                        scale={{y: props.ylog?'log':'linear'}}\n                        minDomain={{y: props.ylog?1:0}}\n                        domainPadding={10}\n                        style={{labels:{ fontFamily: 'lato'}}}\n                        padding={{left: 115, right: 10, top: 60, bottom: -0.9}}\n                        containerComponent={<VictoryContainer style ={{fontFamily: 'lato'}} responsive={false}/>}\n                      >\n                        <VictoryLabel text=\"Cases per 100,000\" x={130} y={10} textAnchor=\"middle\" style={{fontSize: 21, fontFamily: 'lato'}}/>\n                        <VictoryLabel text=\"persons by race\" x={130} y={30} textAnchor=\"middle\" style={{fontSize: 21, fontFamily: 'lato'}}/>\n\n                        <VictoryAxis \n                            style={{axis: {stroke: \"transparent\"}, tickLabels: {fontSize: 10, fontFamily: 'lato'}}}\n\n                         />\n                        <VictoryAxis dependentAxis \n                          style ={{fontFamily: 'lato'}}\n                          tickValues = {\n                              data[stateFips]['natives'] >= 1?\n\n                              ([dataRD[stateFips][0]['All Races Combined'][0]['caseRate'], \n                              dataRD[stateFips][1]['African American'][0]['caseRate'],\n                              dataRD[stateFips][2]['White'][0]['caseRate'],\n                              dataRD[stateFips][3]['American Natives'][0]['caseRate']])\n                              :\n                              ([\n                              dataRD[stateFips][0]['All Races Combined'][0]['caseRate'],\n                              dataRD[stateFips][1]['African American'][0]['caseRate'],\n                              dataRD[stateFips][2]['White'][0]['caseRate']\n                                  \n                                    ])}\n\n                        />\n                        <VictoryBar\n                          horizontal\n                          barRatio={0.8}\n\n                          labels={({ datum }) => numberWithCommas((Math.round(datum.value*dataRD[stateFips][0]['All Races Combined'][0]['caseRate']))) !== 0?\n                                                  numberWithCommas((Math.round(datum.value*dataRD[stateFips][0]['All Races Combined'][0]['caseRate']))): \"Not Available\"}\n                          data={\n\n                            data[stateFips]['natives'] >= 1? \n                            [{key: \"White\", 'value': dataRD[stateFips][2]['White'][0]['caseRate']/dataRD[stateFips][0]['All Races Combined'][0]['caseRate'] || 0},\n                            {key: \"African American\", 'value': dataRD[stateFips][1]['African American'][0]['caseRate']/dataRD[stateFips][0]['All Races Combined'][0]['caseRate'] || 0},\n                            {key: \"Native American\", 'value': dataRD[stateFips][3]['American Natives'][0]['caseRate']/dataRD[stateFips][0]['All Races Combined'][0]['caseRate'] || 0},\n                            {key: \"All Races Combined\", 'value': dataRD[stateFips][0]['All Races Combined'][0]['caseRate']/dataRD[stateFips][0]['All Races Combined'][0]['caseRate'] || 0}\n                            ]\n                            :[{key: \"White\", 'value': dataRD[stateFips][2]['White'][0]['caseRate']/dataRD[stateFips][0]['All Races Combined'][0]['caseRate'] || 0},\n                            {key: \"African American\", 'value': dataRD[stateFips][1]['African American'][0]['caseRate']/dataRD[stateFips][0]['All Races Combined'][0]['caseRate'] || 0},\n                            {key: \"All Races Combined\", 'value': dataRD[stateFips][0]['All Races Combined'][0]['caseRate']/dataRD[stateFips][0]['All Races Combined'][0]['caseRate'] || 0}\n                            ]}\n                          labelComponent={<VictoryLabel dx = {0} style={{fontSize: 12, fontFamily: 'lato', fill: ({datum}) => '#000000' }}/>}\n                          style={{\n                            data: {\n                              fontFamily: 'lato',\n                              fill: ({ datum }) => '#b2b3b3'\n                            }\n                          }}\n                          x=\"key\"\n                          y=\"value\"\n                        />\n            </VictoryChart>\n\n\n            </Grid.Row>\n\n            <Grid.Row columns = {5} style={{paddingBottom: 0, paddingTop: 0, paddingLeft: 15, paddingRight: 0}}>\n              \n                <Grid.Column style={{padding: 0, paddingLeft: 0, lineHeight: '1em'}}>\n                  <small style={{fontWeight: 300}}>\n                    <i>Daily Cases</i>: Daily new COVID-19 cases <br/> \n                    (7-day rolling average) <br/>\n                    <i>Data source</i>: <a href = \"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\" target = \"_blank\" rel=\"noopener noreferrer\"> New York Times </a> <br/>\n                    </small>\n                </Grid.Column>\n                <Grid.Column style={{left: -3, padding: 0, paddingLeft: 0, lineHeight: '1em'}}>\n                  <small style={{fontWeight: 300}}>\n                    <i>Daily Deaths</i>: Daily new COVID-19 Death <br/> \n                    (7-day rolling average) <br/>\n                    <i>Data source</i>:<a href = \"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\" target = \"_blank\" rel=\"noopener noreferrer\"> New York Times </a> <br/>\n                    </small>\n                </Grid.Column>\n                <Grid.Column style={{left: -3, padding: 0, paddingLeft: 0, paddingRight: 0, lineHeight: '1em'}}>\n                  <small style={{fontWeight: 300}}>\n                    <i>Percent Occupied Beds</i>: Percentage of inpatient <br/>\n                    beds occupied by COVID-19 patients. <br/>\n                    <i>Data source</i>:  <a href = \"https://www.cdc.gov/nhsn/datastat/index.html\" target = \"_blank\" rel=\"noopener noreferrer\">CDC's NHSN </a><br/>\n                    </small>\n                </Grid.Column>\n                <Grid.Column style={{left: -8, padding: 0, paddingLeft: 0, lineHeight: '1em'}}>\n                  <small style={{fontWeight: 300}}>\n                    <i>Percent Positive</i>: Percentage of total tests for <br/>\n                     COVID-19 that resulted in a positive result. <br/>\n                    <i>Data Source</i>: <a href = \"https://covidtracking.com/about-data\" target = \"_blank\" rel=\"noopener noreferrer\"> The COVID Tracking Project </a> <br/>\n                    </small>\n                </Grid.Column>\n                <Grid.Column style={{left: -13, padding: 0, paddingLeft: 0, lineHeight: '1em'}}>\n                  <small style={{fontWeight: 300}}>\n                    <i>Rates</i>: Cases per 100,000, among those with race <br/> \n                    information available <br/>\n                    <i>Data source</i>: <a href=\"https://covidtracking.com/race\" target=\"_blank\" rel=\"noopener noreferrer\"> The COVID Racial Data Tracker </a> <br/> \n\n                    </small>\n                </Grid.Column>\n              \n            </Grid.Row>\n\n            <Grid.Row style={{paddingTop: 20, paddingBottom: 50, paddingLeft: 15}}>\n                    <small style={{fontWeight: 300}}>\n                      All percent changes for a 14-day period. <br/>\n                      Percent Occupied Beds updated on 07/07/2020.\n                    </small>\n            </Grid.Row>\n\n          </Grid>\n\n          <span style={{color: '#bdbfc1'}}>Last updated on {covidMetric.t==='n/a'?'N/A':(new Date(covidMetric.t*1000).toLocaleDateString())}</span>\n         \n         <Divider horizontal style={{fontWeight: 400, color: 'black', fontSize: '2.0em', paddingBottom: 10}}> COVID-19 County Outcomes </Divider>\n          <Grid columns={16}>\n            <Grid.Row>\n              <Grid.Column width={5}>\n\n                <Dropdown\n                        icon=''\n\n                        style={{background: '#fff', \n                                fontSize: 16,\n                                fontWeight: 400, \n                                theme: '#000000',\n                                width: '370px',\n                                top: '0px',\n                                left: '0px',\n                                text: \"Select\",\n                                borderTop: 'none',\n                                borderLeft: '1px solid #FFFFFF',\n                                borderRight: 'none', \n                                borderBottom: '0.5px solid #bdbfc1',\n                                borderRadius: 0,\n                                minHeight: '1.0em',\n                                paddingBottom: '0.0em',\n                                paddingRight: 0}}\n                        placeholder= \"Average Daily COVID-19 Cases\"\n                        inline\n                        search\n                        pointing = 'top'\n                        options={metricOptions}\n                        onChange={(e, { value }) => {\n                          setMetric(value);\n                          setMetricName(varMap[value]['name']);\n                        }}\n\n                        \n                      />\n                \n                <svg width=\"400\" height=\"90\">\n                  <text x={0} y={70} style={{fontSize: '0.8em'}}>Low</text>\n                  <text x={20 * (colorPalette.length - 1)} y={70} style={{fontSize: '0.8em'}}>High</text>\n\n                  {_.map(colorPalette, (color, i) => {\n                    return <rect key={i} x={20*i} y={40} width=\"20\" height=\"20\" style={{fill: color, strokeWidth:1, stroke: color}}/>                    \n                  })} \n\n                  <rect x={145} y={40} width=\"20\" height=\"20\" style={{fill: \"#FFFFFF\", strokeWidth:0.5, stroke: \"#000000\"}}/>                    \n                  <text x={167} y={50} style={{fontSize: '0.7em'}}> None </text>\n                  <text x={167} y={59} style={{fontSize: '0.7em'}}> Reported </text>\n\n                  {_.map(legendSplit, (splitpoint, i) => {\n                    if(legendSplit[i] < 1){\n                      return <text key = {i} x={20 + 20 * (i)} y={37} style={{fontSize: '0.7em'}}> {legendSplit[i].toFixed(1)}</text>                    \n                    }\n                    return <text key = {i} x={20 + 20 * (i)} y={37} style={{fontSize: '0.7em'}}> {legendSplit[i].toFixed(0)}</text>                    \n                  })} \n                  <text x={0} y={37} style={{fontSize: '0.7em'}}> {legendMin} </text>\n                  <text x={120} y={37} style={{fontSize: '0.7em'}}>{legendMax}</text>\n\n                  <text x={250} y={49} style={{fontSize: '0.7em'}}> Click on a county</text>\n                  <text x={250} y={59} style={{fontSize: '0.7em'}}> below for a detailed report. </text>\n\n\n                </svg>\n                <ComposableMap projection=\"geoAlbersUsa\" \n                  projectionConfig={{scale:`${config.scale*0.7}`}} \n                  width={400} \n                  height={500} \n                  strokeWidth = {0.1}\n                  stroke = 'black'\n                  data-tip=\"\"\n                  offsetX={config.offsetX}\n                  offsetY={config.offsetY}>\n                  <Geographies geography={config.url}>\n                    {({geographies}) => geographies.map(geo =>\n                      <Geography \n                        key={geo.rsmKey} \n                        geography={geo} \n                        onClick={()=>{\n                          history.push(\"/\" + stateFips + \"/\" +geo.properties.COUNTYFP);\n                        }}\n                        onMouseEnter={()=>{setDelayHandler(setTimeout(() => {\n                            setCountyFips(geo.properties.COUNTYFP);\n                            setCountyName(fips2county[stateFips + geo.properties.COUNTYFP]);\n                            // setTooltipContent('Click to see more county data');\n                          }, 300))\n                        }}\n                        onMouseLeave={()=>{\n                          clearTimeout(delayHandler);\n\n                          setTooltipContent(\"\")\n                        }}\n                        \n                        fill={countyFips===geo.properties.COUNTYFP?countyColor:\n                            ((colorScale && data[stateFips+geo.properties.COUNTYFP] && (data[stateFips+geo.properties.COUNTYFP][metric]) > 0)?\n                                colorScale[data[stateFips+geo.properties.COUNTYFP][metric]]: \n                                (colorScale && data[stateFips+geo.properties.COUNTYFP] && data[stateFips+geo.properties.COUNTYFP][metric] === 0)?\n                                  '#e1dce2':'#FFFFFF')}\n                        />\n                    )}\n                  </Geographies>\n                </ComposableMap>\n              </Grid.Column>\n              <Grid.Column width={5} style={{padding: 0, paddingLeft: 0}}>\n                <Header as='h2' style={{fontWeight: 400, width: 410}}>\n                  <Header.Content style={{fontSize: 20}}>\n                    How Does <span style={{color: countyColor, fontSize: 20}}>{countyName}</span> Compare?\n                    <Header.Subheader style={{fontWeight: 300, width: 390, fontSize: 14}}>\n                      The number of cases and deaths due to COVID-19 are dynamic. \n                      Cases are declining in many counties and rising in others. \n                      Trends in the case and hospitalization count in the past 14 days are being monitored to determine whether it is safe to reopen a county.\n                    </Header.Subheader>\n                  </Header.Content>\n                </Header>\n                <Grid>\n                  <Grid.Row columns={1} style={{padding: 0, paddingTop: 20, paddingBottom: 0}}>\n                     <text x={0} y={20} style={{fontSize: '16px', paddingLeft: 15, paddingBottom: 5, fontWeight: 400}}>Average Daily COVID-19 Cases /100,000 </text>\n\n                      <VictoryChart theme={VictoryTheme.material} minDomain={{ y: 0 }}\n                        width={330}\n                        height={160}       \n                        padding={{left: 50, right: 40, top: 24, bottom: 30}}\n                        containerComponent={<VictoryVoronoiContainer flyoutStyle={{fill: \"white\"}}/> }\n                        >\n                        <VictoryLegend\n                          x={40} y={5}\n                          borderPadding={{ left: 0, right: 0 }}\n                          symbolSpacer={5}\n                          orientation=\"horizontal\"\n                          style={{labels:{ fontFamily: 'lato'}}}\n                          colorScale={[nationColor, stateColor, countyColor]}\n                          data ={[\n                            {name: \"USA   \"}, {name: stateName }, {name: countyName}\n                            ]}\n                        />\n                        <VictoryAxis\n                          tickValues={[\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3)*2 - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3) - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length-1].t]}                        \n                          style={{tickLabels: {fontSize: 10, fontFamily: 'lato'}}} \n                          tickFormat={(t)=> monthNames[new Date(t*1000).getMonth()] + \" \" +  new Date(t*1000).getDate()}/>\n                        <VictoryAxis dependentAxis tickCount={5}\n                         style={{tickLabels: {fontSize: 8, padding: 1}}} \n                          tickFormat={(y) => (y<1000?y:(y/1000+'k'))}\n                          />\n                        <VictoryGroup \n                          colorScale={[nationColor, stateColor, countyColor]}\n                        >\n                          <VictoryLine data={dataTS[\"_nation\"]}\n                            x='t' y='caseRateMA'\n                            labels={({ datum }) => `${monthNames[new Date(datum.t*1000).getMonth()] + \" \" +  new Date(datum.t*1000).getDate()}: ${datum.caseRateMA.toFixed(1)}`}\n                            labelComponent={<VictoryTooltip style={{fontWeight: 400, fontFamily: 'lato'}} centerOffset={{ x: -50, y: 30 }} flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                            style={{\n                              \n                              data: {strokeWidth: ({ active }) => active ? 3 : 2},\n                            }}\n                            />\n                          <VictoryLine data={stateFips !== \"_nation\"? dataTS[stateFips] : dataTS[\"_\"]}\n                            x='t' y='caseRateMA'\n                            labels={({ datum }) => `${monthNames[new Date(datum.t*1000).getMonth()] + \" \" +  new Date(datum.t*1000).getDate()}: ${datum.caseRateMA.toFixed(1)}`}\n                            labelComponent={<VictoryTooltip style={{fontWeight: 400, fontFamily: 'lato'}} centerOffset={{ x: -50, y: 30 }} flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                            style={{\n                              fontFamily: 'lato',\n                              data: { strokeWidth: ({ active }) => active ? 3 : 2},\n                            }}\n                            />\n                          <VictoryLine data={dataTS[stateFips+countyFips] && (stateFips !== \"_nation\")?dataTS[stateFips+countyFips]:dataTS[\"99999\"]}\n                            x='t' y='caseRateMA'\n                            labels={({ datum }) => `${monthNames[new Date(datum.t*1000).getMonth()] + \" \" +  new Date(datum.t*1000).getDate()}: ${datum.caseRateMA.toFixed(1)}`}\n                            labelComponent={<VictoryTooltip style={{fontWeight: 400, fontFamily: 'lato'}} centerOffset={{ x: -50, y: 30 }} flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                            style={{\n                              fontFamily: 'lato',\n                              data: { strokeWidth: ({ active }) => active ? 3 : 2},\n                            }}\n                            />\n                        </VictoryGroup>\n                      </VictoryChart>\n                    </Grid.Row>\n                  <Grid.Row columns={1} style={{padding: 0, paddingTop: 20, paddingBottom: 0}}>\n                      <text x={0} y={20} style={{fontSize: '16px', paddingLeft: 15, paddingBottom: 5, fontWeight: 400}}>Average Daily COVID-19 Deaths /100,000 </text>\n\n                      <VictoryChart theme={VictoryTheme.material} minDomain={{ y: 0 }}\n                        width={330}\n                        height={160}       \n                        padding={{left: 50, right: 40, top: 24, bottom: 30}}\n                        containerComponent={<VictoryVoronoiContainer/>}\n                        >\n                        <VictoryLegend\n                          x={40} y={5}\n                          borderPadding={{ left: 0, right: 0 }}\n                          symbolSpacer={5}\n                          orientation=\"horizontal\"\n                          style={{labels:{ fontFamily: 'lato'}}}\n                          colorScale={[nationColor, stateColor, countyColor]}\n                          data ={[\n                            {name: \"USA   \"}, {name: stateName }, {name: countyName}\n                            ]}\n                        />\n                        <VictoryAxis\n                          tickValues={[\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3)*2 - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3) - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length-1].t]}                        \n                          style={{tickLabels: {fontSize: 10, fontFamily: 'lato'}}} \n                          tickFormat={(t)=> monthNames[new Date(t*1000).getMonth()] + \" \" +  new Date(t*1000).getDate()}/>\n                        <VictoryAxis dependentAxis tickCount={5}\n                         style={{tickLabels: {fontSize: 8, padding: 1}}} \n                          tickFormat={(y) => (y<1000?y:(y/1000+'k'))}\n                          />\n                        <VictoryGroup \n                          colorScale={[nationColor, stateColor, countyColor]}\n                        >\n                          <VictoryLine data={dataTS[\"_nation\"]}\n                            x='t' y='mortalityMA'\n                            labels={({ datum }) => `${monthNames[new Date(datum.t*1000).getMonth()] + \" \" +  new Date(datum.t*1000).getDate()}: ${datum.mortalityMA.toFixed(1)}`}\n                            labelComponent={<VictoryTooltip style={{fontWeight: 400, fontFamily: 'lato'}} centerOffset={{ x: -50, y: 30 }} flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                            style={{\n                              fontFamily: 'lato',\n                              data: { strokeWidth: ({ active }) => active ? 3 : 2},\n                            }}\n                            />\n                          <VictoryLine data={stateFips !== \"_nation\"? dataTS[stateFips] : dataTS[\"_\"]}\n                            x='t' y='mortalityMA'\n                            labels={({ datum }) => `${monthNames[new Date(datum.t*1000).getMonth()] + \" \" +  new Date(datum.t*1000).getDate()}: ${datum.mortalityMA.toFixed(1)}`}\n                            labelComponent={<VictoryTooltip style={{fontWeight: 400, fontFamily: 'lato'}} centerOffset={{ x: -50, y: 30 }} flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                            style={{\n                              fontFamily: 'lato',\n                              data: { strokeWidth: ({ active }) => active ? 3 : 2},\n                            }}\n                            />\n                          <VictoryLine data={dataTS[stateFips+countyFips] && (stateFips !== \"_nation\")?dataTS[stateFips+countyFips]:dataTS[\"99999\"]}\n                            x='t' y='mortalityMA'\n                            labels={({ datum }) => `${monthNames[new Date(datum.t*1000).getMonth()] + \" \" +  new Date(datum.t*1000).getDate()}: ${datum.mortalityMA.toFixed(1)}`}\n                            labelComponent={<VictoryTooltip style={{fontWeight: 400, fontFamily: 'lato'}} centerOffset={{ x: -50, y: 30 }} flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                            style={{\n                              fontFamily: 'lato',\n                              data: { strokeWidth: ({ active }) => active ? 3 : 2},\n                            }}\n                            />\n                        </VictoryGroup>\n                      </VictoryChart>\n                  </Grid.Row>\n                </Grid>\n              </Grid.Column>\n              <Grid.Column width={6} style={{padding: 0, paddingLeft: 10}}>\n                <Header as='h2' style={{width:460}}>\n                  <Header.Content style={{fontSize: 20, fontWeight: 400}}>\n                    County Population Characteristics\n                    <Header.Subheader style={{fontWeight: 300, width: 460, fontSize: 14}}>\n                    Social, economic, health and environmental factors impact an individual’s risk of infection and COVID-19 severity. \n                    Counties with large groups of vulnerable people may be  disproportionately impacted by COVID-19.\n                    </Header.Subheader>\n                  </Header.Content>\n\n                </Header>\n                <Grid>\n                  <Grid.Row columns={2} style={{padding: 20, width: 460, paddingBottom: 20}}>                    \n                      <BarChart \n                        title=\"% African American\" \n                        var=\"black\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        countyName={countyName}\n                        stateName={stateName}\n                        data={data} />\n                      <BarChart \n                        title=\"% Hispanic or Latino\" \n                        var=\"hispanic\"  \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        countyName={countyName}\n                        stateName={stateName}\n                        data={data} />\n                  </Grid.Row>\n                  <Grid.Row columns={2} style={{padding: 20, width: 460, paddingBottom: 20}}>\n                      <BarChart \n                        title=\"% Native American\" \n                        var=\"natives\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        countyName={countyName}\n                        stateName={stateName}\n                        data={data} />  \n                      <BarChart \n                        title=\"% Over 65 y/o\" \n                        var=\"age65over\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        countyName={countyName}\n                        stateName={stateName}\n                        data={data} />\n                  </Grid.Row>\n                  <Grid.Row columns={2} style={{padding: 20, width: 460, paddingBottom: 20}}>\n                      <BarChart \n                        title=\"% Obese\" \n                        var=\"obesity\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        countyName={countyName}\n                        stateName={stateName}\n                        data={data} />  \n                      <BarChart \n                        title=\"% Diabetes\" \n                        var=\"diabetes\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        countyName={countyName}\n                        stateName={stateName}\n                        data={data} /> \n                  </Grid.Row>\n                  <Grid.Row columns={2} style={{padding: 20, width: 460, paddingBottom: 20}}>                    \n                      <BarChart \n                        title=\"% in Poverty\" \n                        var=\"poverty\"  \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        countyName={countyName}\n                        stateName={stateName}\n                        data={data} />\n                      <BarChart \n                        title=\"% Uninsured\" \n                        var=\"PCTUI\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        countyName={countyName}\n                        stateName={stateName}\n                        data={data} />\n                  </Grid.Row>\n                  <Grid.Row columns={2} style={{padding: 20, width: 460}}>                    \n                      <BarChart \n                        title=\"% in Group Quarters\" \n                        var=\"groupquater\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        countyName={countyName}\n                        stateName={stateName}\n                        data={data} />\n                      <BarChart \n                        title=\"% Male\" \n                        var=\"male\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        countyName={countyName}\n                        stateName={stateName}\n                        data={data} />\n                  </Grid.Row>\n                </Grid>\n              </Grid.Column>\n\n            </Grid.Row>  \n            <span style={{color: '#bdbfc1'}}>Last updated on {covidMetric.t==='n/a'?'N/A':(new Date(covidMetric.t*1000).toLocaleDateString())}</span>\n          \n          </Grid>\n          </div>\n        }\n        <Notes />\n      </Container>\n      <ReactTooltip><font size=\"+1\"> <b> {countyName} </b> </font> <br/> Click for a detailed report. </ReactTooltip>\n    </div>\n    );\n  } else{\n    return <Loader active inline='centered' />\n  }\n\n\n\n\n}","import React, { useEffect, useState } from 'react'\nimport { Container, Grid, Breadcrumb, Header, Loader, Statistic, Table, Divider } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport { VictoryChart, \n  VictoryContainer,\n  VictoryGroup, \n  VictoryBar, \n  VictoryTheme, \n  VictoryAxis, \n  VictoryLegend,\n  VictoryLine,\n  VictoryLabel, \n  VictoryScatter,\n  VictoryTooltip,\n  VictoryVoronoiContainer\n} from 'victory';\n\nimport { useParams, useHistory } from 'react-router-dom';\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\nimport fips2county from './fips2county.json'\nimport configs from \"./state_config.json\";\nimport _ from 'lodash';\n\nconst countyColor = '#f2a900';\nconst stateColor = '#778899';\nconst nationColor = '#b2b3b3';\n\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\nfunction numberWithCommas(x) {\n    x = x.toString();\n    var pattern = /(-?\\d+)(\\d{3})/;\n    while (pattern.test(x))\n        x = x.replace(pattern, \"$1,$2\");\n    return x;\n}\n\nfunction ScatterChart(props) {\n\n  return (\n    <VictoryChart\n      width={400}\n      height={300}\n      scale={{y: props.ylog?'log':'linear'}}\n      minDomain={{y: props.ylog?1:0}}\n      padding={{left: 80, right: 20, top: 50, bottom: 50}}>\n      {props.showLegend && <VictoryLegend\n        x={10} y={10}\n        orientation=\"horizontal\"\n        style={{labels:{ fontFamily: 'lato'}}}\n        colorScale={[stateColor, countyColor]}\n        data ={[\n          {name: ('Other counties in '+ props.stateName)}, {name: props.countyName}\n          ]}\n      />}\n      <VictoryScatter\n        data={_.filter(_.map(props.data, (d, k)=>{d.fips=k; return d;}), (d)=> (\n                 d.fips.length===5 &&\n                 d.fips.substring(0,2)===props.stateFips &&\n                 d[props.x] >= 0 && d[props.y] >= 0))}\n        sortKey={(d) => d.fips===(props.stateFips + props.countyFips)}\n        style={{ \n                 data: { fontFamily: 'lato', \n                 fill: ({datum}) => datum.fips===(props.stateFips + props.countyFips)?countyColor:stateColor,\n                 fillOpacity: ({datum}) => datum.fips===(props.stateFips + props.countyFips)?1.0:0.7} }}\n        size={4}\n        x={props.x}\n        y={props.y}\n        labels={({ datum }) => `${datum[props.y].toFixed(1)}`}\n        labelComponent={<VictoryTooltip style = {{fontFamily: 'lato'}} centerOffset={{ x: -50, y: 30 }} cornerRadius={4} flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n\n      />\n      <VictoryAxis label={props.varMap[props.x]?props.varMap[props.x].name:props.x}\n        tickCount={4}\n        style={{axisLabel: {fontFamily: 'lato'}, tickLabels: { fontFamily: 'lato'}}}\n        tickFormat={(y) => (props.rescaleX?(Math.round(y/1000)+'k'):(Math.round(y*100)/100))} />\n      <VictoryAxis dependentAxis label={props.varMap[props.y]?props.varMap[props.y].name:props.y} \n        style={{ axisLabel: {padding: 40, fontFamily: 'lato'}, tickLabels: { fontFamily: 'lato'}}}\n        tickCount={5}\n        tickFormat={(y) => (Math.round(y*100)/100)} />\n    </VictoryChart>);\n\n}\n\nfunction BarChart(props) {\n  const colors = {\"USA\": nationColor, \n                  stateName: stateColor, \n                  countyName: countyColor};\n  if (props.countyFips !== \"_nation\" && props.stateFips !== \"_nation\") {\n\n  return (\n    <VictoryChart\n      theme={VictoryTheme.material}\n      width={props.width || 560}\n      height={140}       \n      domainPadding={10}\n      scale={{y: props.ylog?'log':'linear'}}\n      minDomain={{y: props.ylog?1:0}}\n      padding={{left: 165, right: 50, top: 40, bottom: 50}}\n      containerComponent={<VictoryContainer responsive={false}/>}>\n      <VictoryLabel text={props.title} x={(props.width || 560)/2} y={30} textAnchor=\"middle\" style ={{fontFamily: 'lato'}}/>\n      <VictoryAxis style={{tickLabels: {fontSize: 14, fontFamily: 'lato'}}}/>\n      <VictoryAxis dependentAxis style={{tickLabels: {fontSize: 14, fontFamily: 'lato'}}}/>\n      <VictoryBar\n        horizontal\n        barRatio={0.8}\n        labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(1))}\n        data={[{key: 'USA', 'value': props.data['_nation'][props.var] || 0},\n              {key: props.stateName, 'value': props.data[props.stateFips][props.var] > 0? props.data[props.stateFips][props.var] : 0},\n              {key: props.countyName, 'value': props.data[props.stateFips+props.countyFips][props.var] > 0 ? props.data[props.stateFips+props.countyFips][props.var] : 0}]}\n        labelComponent={<VictoryLabel dx={5} style={{fontFamily: 'lato', fill: ({datum}) => datum.key === props.countyName?countyColor:datum.key === props.stateName?stateColor:nationColor }}/>}\n        style={{\n          data: {\n            fill: ({ datum }) => datum.key === props.countyName?countyColor:datum.key === props.stateName?stateColor:nationColor\n          }\n        }}\n        x=\"key\"\n        y=\"value\"\n      />\n    </VictoryChart>);\n}\n\n\n\n\n}\n\nexport default function CountyReport() {\n\n  let { stateFips, countyFips } = useParams();\n  const [config, setConfig] = useState();\n  const [stateName, setStateName] = useState('');\n  const [countyName, setCountyName] = useState('');\n  const history = useHistory();\n  const [data, setData] = useState();\n  const [dataTS, setDataTS] = useState();\n  const [tooltipContent, setTooltipContent] = useState('');\n  const [covidMetric, setCovidMetric] = useState({cases: 'N/A', deaths: 'N/A', \n                                                  caseRate: \"N/A\", mortality: \"N/A\", \n                                                  caseRateMean: \"N/A\", mortalityMean: \"N/A\",\n                                                  caseRateMA: \"N/A\", mortalityMA: \"N/A\",\n                                                  cfr:\"N/A\", t: 'n/a'});\n  const [varMap, setVarMap] = useState({});\n\n\n  const [countyCasesOutcome, setCountyCasesOutcome] = useState();\n  const [countyDeathsOutcome, setCountyDeathsOutcome] = useState();\n\n  const [stateCasesOutcome, setStateCasesOutcome] = useState();\n  const [stateDeathsOutcome, setStateDeathsOutcome] = useState();\n\n  const [nationCasesOutcome, setNationCasesOutcome] = useState();\n  const [nationDeathsOutcome, setNationDeathsOutcome] = useState();\n\n\n\n  useEffect(()=>{\n\n    const configMatched = configs.find(s => s.fips === stateFips);\n    if(!configMatched || !fips2county[stateFips+countyFips]){\n      history.push('/');\n    }else{\n      setConfig(configMatched);\n      setStateName(configMatched.name);\n      setCountyName(fips2county[stateFips+countyFips]);\n\n      fetch('/data/rawdata/variable_mapping.json').then(res => res.json())\n        .then(x => setVarMap(x));\n\n      fetch('/data/data.json').then(res => res.json())\n        .then(x => setData(x));\n      \n      fetch('/data/timeseries'+stateFips+'.json').then(res => res.json())\n        .then(x => {\n        let t = 0;\n        let countyCases = 0;\n        let stateCases = 0;\n        let nationCases = 0;\n\n        let countyDeaths = 0;\n        let stateDeaths = 0;\n        let nationDeaths = 0;\n        _.each(x, (v, k)=>{\n            if (k === stateFips + countyFips && v.length > 0 ){\n              countyCases = v[v.length-1].caseRateMA;\n              countyDeaths = v[v.length-1].covidmortality7dayfig;\n            }else if(k.length===2 && v.length > 0 && v[v.length-1].t > t){\n              stateCases = v[v.length-1].caseRateMA;\n              stateDeaths = v[v.length-1].covidmortality7dayfig;\n            }else if(k === \"_nation\" && v.length > 0 && v[v.length-1].t > t){\n              nationCases = v[v.length-1].caseRateMA;\n              nationDeaths = v[v.length-1].covidmortality7dayfig;\n            }\n\n          });\n\n          setCountyCasesOutcome(countyCases.toFixed(0));\n          setStateCasesOutcome(stateCases.toFixed(0));\n          setNationCasesOutcome(nationCases.toFixed(0));\n\n          setCountyDeathsOutcome(countyDeaths.toFixed(1));\n          setStateDeathsOutcome(stateDeaths.toFixed(1));\n          setNationDeathsOutcome(nationDeaths.toFixed(1));\n\n          setDataTS(x);\n        }\n      );\n    }\n  }, [stateFips]);\n\n  useEffect(() => {\n    if (dataTS && dataTS[stateFips+countyFips]){\n      setCovidMetric(_.takeRight(dataTS[stateFips+countyFips])[0]);\n    }\n  }, [dataTS])\n\n\n  if (data && dataTS && varMap) {\n\n  return (\n      <div>\n        <AppBar menu='countyReport'/>\n        <Container style={{marginTop: '8em', minWidth: '1260px', paddingRight: 0}}>\n          {config &&\n          <div>\n          <Breadcrumb>\n            <Breadcrumb.Section link onClick={() => history.push('/')}>United States</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n            <Breadcrumb.Section link onClick={() => history.push('/'+stateFips)}>{stateName}</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n            <Breadcrumb.Section active>{countyName}</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n          </Breadcrumb>\n          <Header as='h1' style={{fontWeight: 300}}>\n            <Header.Content>\n              Covid-19 Health Equity Report for <span style={{color: countyColor}}>{countyName}</span>\n              <Header.Subheader style={{fontWeight: 300}}>\n              See how health determinants impact COVID-19 outcomes. \n              </Header.Subheader>\n            </Header.Content>\n          </Header>\n          <Grid style={{paddingTop: '2em', width: \"1260px\"}}>\n            <Grid.Row style={{ paddingTop: '2em', paddingLeft:20}}>\n              <Table celled fixed singleLine>\n                <Table.Header>\n                  <Table.Row textAlign = 'center'>\n                    <Table.HeaderCell colSpan='1' style={{width:150}}> </Table.HeaderCell>\n\n                    <Table.HeaderCell colSpan='1' style={{width:200, fontSize: '14px'}}> TOTAL TO DATE</Table.HeaderCell>\n                    <Table.HeaderCell colSpan='1' style={{width:200, fontSize: '14px'}}> TOTAL TO DATE PER 100,000</Table.HeaderCell>\n                    <Table.HeaderCell colSpan='1' style={{width:200, fontSize: '14px'}}> DAILY AVERAGE</Table.HeaderCell>\n                    <Table.HeaderCell colSpan='1' style={{width:200, fontSize: '14px'}}> DAILY AVERAGE PER 100,000</Table.HeaderCell>\n                    <Table.HeaderCell colSpan='1' style={{width:200, fontSize: '14px'}}> CASE FATALITY RATIO</Table.HeaderCell>\n                  </Table.Row>\n                  <Table.Row textAlign = 'center'>\n                    <Table.HeaderCell style={{fontSize: '24px'}}> Cases </Table.HeaderCell>\n                    <Table.HeaderCell style={{fontSize: '24px'}}> {covidMetric.cases===null || covidMetric.cases < 0?'0':covidMetric.cases.toLocaleString()} </Table.HeaderCell>\n                    <Table.HeaderCell style={{fontSize: '24px'}}> {covidMetric.caseRate===null || covidMetric.caseRate < 0?'0':numberWithCommas(parseFloat(covidMetric.caseRate).toFixed(0)).toLocaleString()} </Table.HeaderCell>\n                    <Table.HeaderCell style={{fontSize: '24px'}}> {covidMetric.caseRateMean===null || covidMetric.caseRateMean < 0?'0':numberWithCommas(parseFloat(covidMetric.caseRateMean).toFixed(0)).toLocaleString()} </Table.HeaderCell>\n                    <Table.HeaderCell style={{fontSize: '24px'}}> {covidMetric.caseRateMA===null || covidMetric.caseRateMA < 0?'0':numberWithCommas(parseFloat(covidMetric.caseRateMA).toFixed(0)).toLocaleString()} </Table.HeaderCell>\n                    <Table.HeaderCell style={{fontSize: '24px'}}> Deaths : Cases </Table.HeaderCell>\n\n                  </Table.Row>\n                  <Table.Row textAlign = 'center'>\n                    <Table.HeaderCell style={{fontSize: '24px'}}> Deaths </Table.HeaderCell>\n                    <Table.HeaderCell style={{fontSize: '24px'}}> {covidMetric.deaths===null || covidMetric.deaths < 0?'0':covidMetric.deaths.toLocaleString()} </Table.HeaderCell>\n                    <Table.HeaderCell style={{fontSize: '24px'}}> {covidMetric.mortality===null || covidMetric.mortality < 0?'0':numberWithCommas(parseFloat(covidMetric.mortality).toFixed(0)).toLocaleString()} </Table.HeaderCell>\n                    <Table.HeaderCell style={{fontSize: '24px'}}> {covidMetric.mortalityMean===null || covidMetric.mortalityMean < 0?'0':numberWithCommas(parseFloat(covidMetric.mortalityMean).toFixed(0)).toLocaleString()} </Table.HeaderCell>\n                    <Table.HeaderCell style={{fontSize: '24px'}}> {covidMetric.mortalityMA===null || covidMetric.mortalityMA < 0?'0':numberWithCommas(parseFloat(covidMetric.mortalityMA).toFixed(0)).toLocaleString()} </Table.HeaderCell>\n                    <Table.HeaderCell style={{fontSize: '24px'}}> {covidMetric.cfr===null || covidMetric.cfr < 0?'0':numberWithCommas(parseFloat(covidMetric.cfr).toFixed(2)).toLocaleString() + \"%\"} </Table.HeaderCell>\n\n                  </Table.Row>\n                </Table.Header>\n              </Table>\n            </Grid.Row>\n\n            <span style={{ color: '#bdbfc1', paddingTop: 20}}>Last updated on {covidMetric.t==='n/a'?'N/A':(new Date(covidMetric.t*1000).toLocaleDateString())}</span>\n\n          </Grid>\n          <Divider horizontal style={{fontWeight: 400, color: 'black', fontSize: '2.0em', paddingBottom: '1em', paddingTop: '1em'}}>COVID-19 Outcomes </Divider>\n          <Grid columns={2} centered>\n            <Grid.Row>\n              <Grid.Column>\n                <text x={0} y={20} style={{fontSize: 20, paddingBottom: 0, fontWeight: 400}}>Average Daily COVID-19 Cases /100,000 </text>\n\n                <VictoryChart theme={VictoryTheme.material}\n                  width={550}\n                  height={300}       \n                  padding={{left: 50, right: 60, top: 60, bottom: 30}}\n                  containerComponent={<VictoryVoronoiContainer/>}\n                  \n                  >\n                  <VictoryLegend\n                    x={40} y={25}\n                    orientation=\"horizontal\"\n                    style={{labels:{ fontFamily: 'lato'}}}\n                    colorScale={[nationColor, stateColor, countyColor]}\n                    data ={[\n                            {name: \"USA   \"}, {name: stateName }, {name: countyName}\n                      ]}\n                  />\n\n                  <VictoryAxis\n                    tickFormat={(t)=> monthNames[new Date(t*1000).getMonth()] + \" \" +  new Date(t*1000).getDate()}\n                    tickValues={[\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/4)*3 - 1].t,\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/4)*2 - 1].t,\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/4) - 1].t,\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length-1].t]}/>\n                  <VictoryAxis dependentAxis tickCount={5}\n                    tickFormat={(y) => (y<1000?y:(y/1000+'k'))}\n                    />\n                  <VictoryGroup \n                    colorScale={[nationColor, stateColor, countyColor]}\n                  >\n                    <VictoryLine data={dataTS[\"_nation\"]}\n                      x='t' y='caseRateMA'\n                      labels={({ datum }) => `${monthNames[new Date(datum.t*1000).getMonth()] + \" \" +  new Date(datum.t*1000).getDate()}: ${datum.caseRateMA.toFixed(1)}`}\n                      labelComponent={<VictoryTooltip style={{fontWeight: 400, fontFamily: 'lato'}} centerOffset={{ x: -50, y: 30 }} flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                      style={{\n                          data: { strokeWidth: ({ active }) => active ? 3 : 2},\n                      }}\n                      />\n                    <VictoryLine data={dataTS[stateFips]}\n                      x='t' y='caseRateMA'\n                      labels={({ datum }) => `${monthNames[new Date(datum.t*1000).getMonth()] + \" \" +  new Date(datum.t*1000).getDate()}: ${datum.caseRateMA.toFixed(1)}`}\n                      labelComponent={<VictoryTooltip style={{fontWeight: 400, fontFamily: 'lato'}} centerOffset={{ x: -50, y: 30 }} flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                      style={{\n                          data: { strokeWidth: ({ active }) => active ? 3 : 2},\n                      }}\n                      />\n                    <VictoryLine data={dataTS[stateFips+countyFips]?dataTS[stateFips+countyFips]:dataTS[\"99999\"]}\n                      x='t' y='caseRateMA'\n                      labels={({ datum }) => `${monthNames[new Date(datum.t*1000).getMonth()] + \" \" +  new Date(datum.t*1000).getDate()}: ${datum.caseRateMA.toFixed(1)}`}\n                      labelComponent={<VictoryTooltip style={{fontWeight: 400, fontFamily: 'lato'}} centerOffset={{ x: -50, y: 30 }} flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                      style={{\n                          data: { strokeWidth: ({ active }) => active ? 3 : 2},\n                      }}\n\n                      />\n                  </VictoryGroup>\n                </VictoryChart>\n              </Grid.Column>\n              <Grid.Column>\n                <text x={0} y={20} style={{fontSize: 20, paddingBottom: 0, fontWeight: 400}}>Average Daily COVID-19 Deaths /100,000 </text>\n\n                <VictoryChart theme={VictoryTheme.material}\n                  width={550}\n                  height={300}       \n                  padding={{left: 50, right: 60, top: 60, bottom: 30}}\n                  containerComponent={<VictoryVoronoiContainer/>}\n                  \n                  >\n                  <VictoryLegend\n                    x={40} y={25}\n                    orientation=\"horizontal\"\n                    style={{labels:{ fontFamily: 'lato'}}}\n\n                    colorScale={[nationColor, stateColor, countyColor]}\n                    data ={[\n                            {name: \"USA   \"}, {name: stateName }, {name: countyName}\n                      ]}\n                  />\n                  <VictoryAxis\n                    tickFormat={(t)=> monthNames[new Date(t*1000).getMonth()] + \" \" +  new Date(t*1000).getDate()}\n                    tickValues={[\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/4)*3 - 1].t,\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/4)*2 - 1].t,\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/4) - 1].t,\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length-1].t]}/>\n                  <VictoryAxis dependentAxis tickCount={5}\n                    tickFormat={(y) => (y<1000?y:(y/1000+'k'))}\n                    />\n                  <VictoryGroup \n                    colorScale={[nationColor, stateColor, countyColor]}\n                  >\n                    <VictoryLine data={dataTS[\"_nation\"]}\n                      x='t' y='mortalityMA'\n                      labels={({ datum }) => `${monthNames[new Date(datum.t*1000).getMonth()] + \" \" +  new Date(datum.t*1000).getDate()}: ${datum.mortalityMA.toFixed(1)}`}\n                      labelComponent={<VictoryTooltip style={{fontWeight: 400, fontFamily: 'lato'}} centerOffset={{ x: -50, y: 30 }} flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                      style={{\n                          data: { strokeWidth: ({ active }) => active ? 3 : 2},\n                      }}\n                      />\n                    <VictoryLine data={dataTS[stateFips]}\n                      x='t' y='mortalityMA'\n                      labels={({ datum }) => `${monthNames[new Date(datum.t*1000).getMonth()] + \" \" +  new Date(datum.t*1000).getDate()}: ${datum.mortalityMA.toFixed(1)}`}\n                      labelComponent={<VictoryTooltip style={{fontWeight: 400, fontFamily: 'lato'}} centerOffset={{ x: -50, y: 30 }} flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                      style={{\n                          data: { strokeWidth: ({ active }) => active ? 3 : 2},\n                      }}\n                      />\n                    <VictoryLine data={dataTS[stateFips+countyFips]?dataTS[stateFips+countyFips]:dataTS[\"99999\"]}\n                      x='t' y='mortalityMA'\n                      labels={({ datum }) => `${monthNames[new Date(datum.t*1000).getMonth()] + \" \" +  new Date(datum.t*1000).getDate()}: ${datum.mortalityMA.toFixed(1)}`}\n                      labelComponent={<VictoryTooltip style={{fontWeight: 400, fontFamily: 'lato'}} centerOffset={{ x: -50, y: 30 }} flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                      style={{\n                          data: { strokeWidth: ({ active }) => active ? 3 : 2},\n                      }}\n                      />\n                  </VictoryGroup>\n                </VictoryChart>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row columns={2} style={{paddingBottom: 50}}>\n              <Grid.Column>\n                <Header as='h2' style={{fontWeight: 400, width: 540, paddingLeft: 55}}>\n                  <Header.Content style={{fontSize: 20}}>\n                    <Header.Subheader style={{color: '#000000', fontWeight: 300, width: 540, fontSize: 20}}>\n                      As of <b>{covidMetric.t==='n/a'?'N/A':(new Date(covidMetric.t*1000).toLocaleDateString())}</b>, the daily average of new COVID-19 cases<br/> \n                      in <b>{countyName}</b> numbered <b>{numberWithCommas(parseFloat(countyCasesOutcome))} case(s) per 100,000 residents</b>. In comparison, the daily average in {stateName} was <b>{numberWithCommas(parseFloat(stateCasesOutcome))}</b> case(s) per 100,000 and in the United States was <b>{numberWithCommas(parseFloat(nationCasesOutcome))}</b> case(s) per 100,000.\n                    </Header.Subheader>\n                  </Header.Content>\n                </Header>\n              </Grid.Column>\n              <Grid.Column>\n                <Header as='h2' style={{fontWeight: 400, width: 540, paddingLeft: 55}}>\n                  <Header.Content style={{fontSize: 20}}>\n                    <Header.Subheader style={{color: '#000000', fontWeight: 300, width: 540, fontSize: 20}}>\n                      As of <b>{covidMetric.t==='n/a'?'N/A':(new Date(covidMetric.t*1000).toLocaleDateString())}</b>, the daily average of new COVID-19 deaths<br/>\n                      in <b>{countyName}</b> numbered <b>{numberWithCommas(parseFloat(countyDeathsOutcome))} death(s) per 100,000 residents</b>. In comparison, the daily average in {stateName} was <b>{numberWithCommas(parseFloat(stateDeathsOutcome))}</b> death(s) per 100,000 and in the United States was <b>{numberWithCommas(parseFloat(nationDeathsOutcome))}</b> death(s) per 100,000.\n                    </Header.Subheader>\n                  </Header.Content>\n                </Header>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <span style={{color: '#bdbfc1'}}>Last updated on {covidMetric.t==='n/a'?'N/A':(new Date(covidMetric.t*1000).toLocaleDateString())}</span>\n\n          <Divider horizontal style={{fontWeight: 400, color: 'black', fontSize: '2.0em', paddingTop: 14}}>County Characteristics</Divider>\n          <Grid>\n            <Grid.Row columns={3}>                    \n              <Grid.Column>\n                <BarChart \n                  title=\"% African American\" \n                  var=\"black\" \n                  width={400}\n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  countyName={countyName}\n                  stateName={stateName}\n                  data={data} />\n                <BarChart \n                  title=\"% Diabetes\" \n                  var=\"diabetes\" \n                  width={400}\n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  countyName={countyName}\n                  stateName={stateName}\n                  data={data} /> \n                <BarChart \n                  title=\"% Over 65 y/o\" \n                  var=\"age65over\" \n                  width={400}\n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  countyName={countyName}\n                  stateName={stateName}\n                  data={data} />\n                  \n              </Grid.Column>\n              <Grid.Column>\n                <BarChart \n                  title=\"% Hispanic or Latino\" \n                  var=\"hispanic\" \n                  width={400}\n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  countyName={countyName}\n                  stateName={stateName}\n                  data={data} />\n                <BarChart \n                  title=\"% in Poverty\" \n                  var=\"poverty\" \n                  width={400}                 \n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  countyName={countyName}\n                  stateName={stateName}\n                  data={data} />\n                <BarChart \n                  title=\"% in Group Quarters\" \n                  var=\"groupquater\" \n                  width={400}\n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  countyName={countyName}\n                  stateName={stateName}\n                  data={data} />\n                \n              </Grid.Column>\n\n\n              <Grid.Column>\n                <BarChart \n                  title=\"% Obese\" \n                  var=\"obesity\"\n                  width={400} \n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  countyName={countyName}\n                  stateName={stateName}\n                  data={data} />\n                <BarChart \n                  title=\"% Uninsured\" \n                  var=\"PCTUI\" \n                  width={400}\n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  countyName={countyName}\n                  stateName={stateName}\n                  data={data} />\n                <BarChart \n                  title=\"% Male\" \n                  var=\"male\" \n                  width={400}\n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  countyName={countyName}\n                  stateName={stateName}\n                  data={data} />\n                \n              </Grid.Column>\n            </Grid.Row>\n            <span style={{color: '#bdbfc1'}}>Last updated on {covidMetric.t==='n/a'?'N/A':(new Date(covidMetric.t*1000).toLocaleDateString())}</span>\n          </Grid>\n\n          <Divider horizontal style={{fontWeight: 400, color: 'black', fontSize: '2.0em', paddingTop: '1em'}}>Bivariate Relationships of Outcomes and Exposure Variables</Divider>\n          <Grid columns={3}>\n            <Grid.Row>\n              <Grid.Column>\n                <ScatterChart x=\"casesfig\" y=\"deathsfig\" \n                  showLegend={true}\n                  varMap={varMap}\n                  xlog={true} \n                  ylog={true} \n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n              <Grid.Column>\n                <ScatterChart x=\"caseratefig\" y=\"covidmortalityfig\" \n                  varMap={varMap}\n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n              <Grid.Column>\n                <ScatterChart x=\"RPL_THEME1\" y=\"covidmortalityfig\"\n                 varMap={varMap} \n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <ScatterChart x=\"RPL_THEME2\" y=\"covidmortalityfig\"\n                  showLegend={true}\n                  varMap={varMap}\n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n              <Grid.Column>\n                <ScatterChart x=\"RPL_THEME3\" y=\"covidmortalityfig\"\n                  varMap={varMap}\n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n              <Grid.Column>\n                <ScatterChart x=\"RPL_THEME4\" y=\"covidmortalityfig\"\n                  varMap={varMap}\n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <ScatterChart x=\"popden\" y=\"covidmortalityfig\"\n                  showLegend={true}\n                  xlog={true}\n                  varMap={varMap}\n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n              <Grid.Column>\n                <ScatterChart x=\"hhincome\" y=\"covidmortalityfig\"\n                  varMap={varMap}\n                  xlog={true}\n                  rescaleX={true}\n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n              <Grid.Column>\n                <ScatterChart x=\"black\" y=\"covidmortalityfig\"\n                  varMap={varMap}\n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n            </Grid.Row>\n            <span style={{color: '#bdbfc1'}}>Last updated on {covidMetric.t==='n/a'?'N/A':(new Date(covidMetric.t*1000).toLocaleDateString())}</span>\n\n          </Grid>\n          <Divider horizontal style={{fontWeight: 400, color: 'black', fontSize: '2.0em', paddingTop: '1em'}}>Data Table</Divider>\n          <Table striped compact basic='very'>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>County Population Characteristics</Table.HeaderCell>\n                <Table.HeaderCell>{countyName}</Table.HeaderCell>\n                <Table.HeaderCell>{stateName}</Table.HeaderCell>\n                <Table.HeaderCell>United States</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                  {_.map(data[stateFips + countyFips],\n                    (v, k) => {\n                      var rmList = [\"casesfig\", \"deathsfig\", \"dailycases\", \"dailydeaths\", \"mean7daycases\", \"mean7daydeaths\", \"covidmortalityfig\"\n                        , \"caseratefig\", \"covidmortality7dayfig\", \"caserate7dayfig\", \"fips\"];\n                      if (!rmList.includes(k)) {\n                        return (\n                          <Table.Row key={k}>\n                            <Table.Cell>{varMap[k] ? varMap[k].name : k}</Table.Cell>\n                            <Table.Cell>{isNaN(v) ? v : numberWithCommas(parseFloat(v).toFixed(0))}</Table.Cell>\n                            <Table.Cell>{isNaN(data[stateFips][k]) ? data[stateFips][k] : numberWithCommas(parseFloat(data[stateFips][k]).toFixed(0)) === \"NaN\" ? \"\" : numberWithCommas(parseFloat(data[stateFips][k]).toFixed(0))}</Table.Cell>\n                            <Table.Cell>{isNaN(data['_nation'][k]) ? data[stateFips][k] : numberWithCommas(parseFloat(data['_nation'][k]).toFixed(0)) === \"NaN\" ? \"\" : numberWithCommas(parseFloat(data['_nation'][k]).toFixed(0))}</Table.Cell>\n                          </Table.Row>\n                        )\n                      }\n                    })}\n                </Table.Body>\n          </Table>\n          <span style={{color: '#bdbfc1'}}>Last updated on {covidMetric.t==='n/a'?'N/A':(new Date(covidMetric.t*1000).toLocaleDateString())}</span>\n\n          </div>\n        }\n        <Notes />\n      </Container>\n      <ReactTooltip>{tooltipContent}</ReactTooltip>\n    </div>\n    );\n  } else{\n    return <Loader active inline='centered' />\n  }\n\n\n\n}","import React, { useEffect, useState } from 'react'\nimport { Container, Dropdown, Header, Grid } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport { useParams, useHistory } from 'react-router-dom';\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\nimport stateOptions from \"./stateOptions.json\";\nimport configs from \"./state_config.json\";\nimport _ from 'lodash';\nimport { scaleQuantile } from \"d3-scale\";\n\n\nconst colorPalette = [\n        \"#e1dce2\",\n        \"#d3b6cd\",\n        \"#bf88b5\", \n        \"#af5194\", \n        \"#99528c\", \n        \"#633c70\", \n      ];\nconst colorPalette2 = [\n        \"#e1dce2\",\n        \"#71C7EC\",\n        \"#1EBBD7\",\n        \"#0B92BF\", \n        \"#0270A1\", \n        \"#024174\",  \n      ];\n\nexport default function MapState() {\n\n  const [stateFips, setStateFips] = useState();\n  const [measureA, setMeasureA] = useState();\n  const [measureB, setMeasureB] = useState();  \n  const [colorScaleA, setColorScaleA] = useState();\n  const [colorScaleB, setColorScaleB] = useState();\n  const [config, setConfig] = useState();\n  const [tooltipContent, setTooltipContent] = useState('');\n  const [data, setData] = useState();\n  const [varMap, setVarMap] = useState({});\n  const [measureOptionsA, setMeasureOptionsA] = useState([]);\n  const [measureOptionsB, setMeasureOptionsB] = useState([]);\n\n  const [legendSplitA, setLegendSplitA] = useState([]);\n  const [legendSplitB, setLegendSplitB] = useState([]);\n\n  const [legendMaxA, setLegendMaxA] = useState([]);\n  const [legendMaxB, setLegendMaxB] = useState([]);\n\n  const [legendMinA, setLegendMinA] = useState([]);\n  const [legendMinB, setLegendMinB] = useState([]);\n\n  const [name, setName] = useState([]);\n\n\n\n  useEffect(()=>{\n    fetch('/data/rawdata/variable_mapping.json').then(res => res.json())\n      .then(x => {\n        setVarMap(x);\n        setMeasureOptionsA(_.filter(_.map(x, d=> {\n          return {key: d.id, value: d.name, text: d.name, group: d.group};\n        }), d => (d.text !== \"Urban-Rural Status\") && (d.group === \"outcomes\")));\n        setMeasureOptionsB(_.filter(_.map(x, d=> {\n          return {key: d.id, value: d.name, text: d.name, group: d.group};\n        }), d => (d.text !== \"Urban-Rural Status\") && (d.group !== \"outcomes\")));\n\n      });\n  }, []);\n\n  useEffect(()=>{\n    \n    const configMatched = configs.find(s => s.fips === stateFips);\n    setConfig(configMatched);\n\n    if (stateFips && varMap){\n      fetch('/data/data.json').then(res => res.json())\n        .then(data => {\n          let coldata = {};\n          const dataFltrd = _.filter(_.map(data, (d, k)=>{d.fips=k; return d;}), (d)=> (\n                 d.fips.length===5 &&\n                 d.fips.substring(0,2)===stateFips));\n          _.each(dataFltrd, (d) => {\n            _.each(d, (v, k)=>{\n              if (varMap[k]){\n                if (!(varMap[k].name in coldata)){\n                  coldata[varMap[k].name] = {};\n                }\n                coldata[varMap[k].name][d.fips] = v; \n              }\n            });\n          });\n          setData(coldata);\n\n        });\n      setMeasureA(null);\n      setMeasureB(null);\n      setColorScaleA(null);\n      setColorScaleB(null);\n    }\n  }, [stateFips]);\n\n  useEffect(() => {\n    if (measureA){\n      const cs = scaleQuantile()\n        .domain(_.map(data[measureA], d=>d))\n        .range(colorPalette);\n      let scaleMap = {}\n      _.each(data[measureA], d=>{\n        scaleMap[d] = cs(d)});\n      setColorScaleA(scaleMap);\n      \n      var splitA = scaleQuantile()\n        .domain(_.map(data[measureA], d=>d))\n        .range(colorPalette);\n\n      setLegendSplitA(splitA.quantiles());\n\n      var maxA = 0\n      var minA = 0\n      _.each(data[measureA],d=>{\n        if (d > maxA) {\n          maxA = d\n        }else if (d < minA && d >= 0){\n            minA = d\n        }\n      });\n\n      if (maxA > 999) {\n        setLegendMaxA((maxA/1000).toFixed(0) + \"K\");\n      }else{\n        setLegendMaxA(maxA.toFixed(0));\n      }\n      setLegendMinA(minA.toFixed(0));\n\n      setName(measureA);\n    }\n  }, [measureA]);\n\n  useEffect(() => {\n    if (measureB){\n      const cs = scaleQuantile()\n        .domain(_.map(data[measureB], d=>d))\n        .range(colorPalette2);\n      let scaleMap = {}\n      _.each(data[measureB], d=>{\n        scaleMap[d] = cs(d)});\n      setColorScaleB(scaleMap);\n\n      var splitB = scaleQuantile()\n        .domain(_.map(data[measureB], d=>d))\n        .range(colorPalette);\n\n      setLegendSplitB(splitB.quantiles());\n\n      var maxB = 0\n      var minB = 0\n      _.each(data[measureB],d=>{\n        if (d > maxB) {\n          maxB = d\n        }else if (d < minB && d >=0){\n          minB = d\n        }\n      });\n      if (maxB > 999) {\n        setLegendMaxB((maxB/1000).toFixed(0) + \"K\");\n      }else{\n        setLegendMaxB(maxB.toFixed(0));\n\n      }\n      setLegendMinB(minB.toFixed(0));\n    }\n  }, [measureB]);  \n\n\n\n  return (\n      <div>\n        <AppBar menu='mapState'/>\n        <Container style={{marginTop: '8em', minWidth: '1260px'}}>\n          <Header as='h3'>\n            <Header.Content style={{fontWeight: 400}}>\n              Side-by-Side View of Counties in&nbsp;\n              <Dropdown\n                icon=''\n                style={{background: '#fff', \n                        fontWeight: 400, \n                        width: '200px',\n                        borderTop: 'none',\n                        borderLeft: 'none',\n                        borderRight: 'none', \n                        borderBottom: '1px solid #bdbfc1',\n                        borderRadius: 0,\n                        minHeight: '2.2em',\n                        paddingBottom: '0.2em'}}\n                placeholder='Select State'\n                inline\n                search\n                selection\n                options={stateOptions}\n                onChange={(e, { value }) => {\n                  setStateFips(value);\n                }}\n              />\n            </Header.Content>\n          </Header>\n\n          {config &&\n          <Grid columns={2} style={{paddingTop: '2em', minHeight: '400px'}}>\n            <Grid.Row>\n              <Grid.Column>\n                <Grid columns={2} centered>\n                  <Grid.Column>\n                  <svg width = \"500\" height=\"30\">\n                       <text x={0} y={15} style={{fontSize: '1.4em'}}>COVID-19 Outcome Measure:  </text>\n                  </svg>\n                    <Dropdown\n                      style={{background: '#fff', \n                              fontWeight: 400, \n                              borderTop: 'none',\n                              borderLeft: 'none',\n                              borderRight: 'none', \n                              borderBottom: '1ox solid #bdbfc1',\n                              borderRadius: 0}}\n                      placeholder='Select Measure'\n                      search\n                      selection\n                      value={measureA}\n                      options={measureOptionsA}\n                      onChange={(e, { value }) => {\n                        setMeasureA(value)\n                      }}\n                    />\n\n                    <svg width=\"450\" height=\"110\">\n                            {_.map(colorPalette, (color, i) => {\n                              return <rect key={i} x={40*i} y={40} width=\"40\" height=\"40\" style={{fill: color, strokeWidth:1, stroke: color}}/>                    \n                            })} \n                            <rect x={280} y={40} width=\"40\" height=\"40\" style={{fill: '#FFFFFF', strokeWidth:0.1, stroke: '#000000'}}/>\n                            <text x={330} y={58} style={{fontSize: '1.2em'}}> None </text>\n                            <text x={330} y={74} style={{fontSize: '1.2em'}}> Reported </text>\n                            <text x={0} y={36} style={{fontSize: '1.2em'}}> Low </text>\n                            <text x={40 * (colorPalette.length - 1)} y={36} style={{fontSize: '1.2em'}}> High </text> \n                            {_.map(legendSplitA, (split, i) => {\n                              if (legendSplitA[0].toFixed(0) === legendSplitA[1].toFixed(0) && legendSplitA[1].toFixed(0) === legendSplitA[2].toFixed(0) && legendSplitA[2].toFixed(0) === legendSplitA[3].toFixed(0) && legendSplitA[3].toFixed(0) === legendSplitA[4].toFixed(0) ) {\n                                return <text key = {i} x={40 + 40*i} y={95} style={{fontSize: '1.0em'}}> {legendSplitA[i].toFixed(2) < 0? 0:legendSplitA[i].toFixed(2)} </text>\n                              }else if (legendSplitA[i].toFixed(0) < 1) {\n                                return <text key = {i} x={40 + 40*i} y={95} style={{fontSize: '1.0em'}}> {legendSplitA[i].toFixed(1) < 0? 0:legendSplitA[i].toFixed(1)} </text>\n                              }else if (legendSplitA[i] > 999) {\n                                return <text key = {i} x={40 + 40*i} y={95} style={{fontSize: '1.0em'}}> {(legendSplitA[i]/1000).toFixed(0) < 0? 0:(legendSplitA[i]/1000).toFixed(0)}K </text>\n                              }\n                              return <text key = {i} x={40 + 40*i} y={95} style={{fontSize: '1.0em'}}> {legendSplitA[i].toFixed(0) < 0? 0:legendSplitA[i].toFixed(0)} </text>                    \n                            })}\n                            <text x={0} y={95} style={{fontSize: '1.0em'}}> {legendMinA} </text> \n                            <text x={240} y={95} style={{fontSize: '1.0em'}}> {legendMaxA} </text> \n\n                    </svg>\n\n                  </Grid.Column>\n                </Grid>\n              </Grid.Column>\n              <Grid.Column>\n                <Grid columns={2} centered>\n                  <Grid.Column>\n\n                  <svg width = \"500\" height=\"30\">\n                      <text x={0} y={15} style={{fontSize: '1.4em'}}>COVID-19 County Population Characteristics:  </text>\n                  </svg>\n\n                    <Dropdown\n                      style={{background: '#fff', \n                              fontWeight: 400, \n                              borderTop: 'none',\n                              borderLeft: 'none',\n                              borderRight: 'none', \n                              borderBottom: '1ox solid #bdbfc1',\n                              borderRadius: 0}}\n                      placeholder='Select Measure'\n                      fluid\n                      labeled\n                      search\n                      selection\n                      value={measureB}\n                      options={measureOptionsB}\n                      onChange={(e, { value }) => {\n                        setMeasureB(value)\n                      }}\n                    />\n\n                    <svg width=\"450\" height=\"110\">\n                            {_.map(colorPalette2, (color, i) => {\n                              return <rect key={i} x={40*i} y={40} width=\"40\" height=\"40\" style={{fill: color, strokeWidth:1, stroke: color}}/>                    \n                            })} \n                            <rect x={280} y={40} width=\"40\" height=\"40\" style={{fill: '#FFFFFF', strokeWidth:0.1, stroke: '#000000'}}/>\n                            <text x={330} y={58} style={{fontSize: '1.2em'}}> None </text>\n                            <text x={330} y={74} style={{fontSize: '1.2em'}}> Reported </text>\n                            <text x={0} y={36} style={{fontSize: '1.2em'}}>Low</text>\n                            <text x={40 * (colorPalette2.length - 1)} y={36} style={{fontSize: '1.2em'}}>High</text> \n                            {_.map(legendSplitB, (split, i) => {\n                              if (legendSplitB[0].toFixed(0) === legendSplitB[1].toFixed(0) && legendSplitB[1].toFixed(0) === legendSplitB[2].toFixed(0) && legendSplitB[2].toFixed(0) === legendSplitB[3].toFixed(0) && legendSplitB[3].toFixed(0) === legendSplitB[4].toFixed(0) ) {\n                                return <text key = {i} x={40 + 40*i} y={95} style={{fontSize: '1.0em'}}> {legendSplitB[i].toFixed(2) < 0? 0:legendSplitB[i].toFixed(2)} </text>\n                              }else if (legendSplitB[i].toFixed(0) < 1) {\n                                return <text key = {i} x={40 + 40*i} y={95} style={{fontSize: '1.0em'}}> {legendSplitB[i].toFixed(1)< 0? 0:legendSplitB[i].toFixed(1)} </text>\n                              }else if (legendSplitB[i] > 999) {\n                                return <text key = {i} x={40 + 40*i} y={95} style={{fontSize: '1.0em'}}> {(legendSplitB[i]/1000).toFixed(0)< 0? 0:(legendSplitB[i]/1000).toFixed(0)}K </text>\n                              }\n                              return <text key = {i} x={40 + 40*i} y={95} style={{fontSize: '1.0em'}}> {legendSplitB[i].toFixed(0)< 0? 0:legendSplitB[i].toFixed(0)} </text>                    \n                            })}   \n                            <text x={0} y={95} style={{fontSize: '1.0em'}}> {legendMinB} </text> \n                            <text x={240} y={95} style={{fontSize: '1.0em'}}> {legendMaxB} </text>\n\n                            \n\n                    </svg>\n\n                  </Grid.Column>\n                </Grid>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <ComposableMap projection=\"geoAlbersUsa\" \n                  projectionConfig={{scale:`${config.scale}`}} \n                  width={500} \n                  height={600} \n                  strokeWidth = {0.1}\n                  stroke = 'black'\n                  data-tip=\"\"\n                  offsetX={config.offsetX}\n                  offsetY={config.offsetY}>\n                  <Geographies geography={config.url}>\n                    {({geographies}) => geographies.map(geo => \n                      <Geography \n                        key={geo.rsmKey} \n                        geography={geo} \n                        onMouseEnter={()=>{\n                          if(measureA && colorScaleA){\n                            const cur = data[measureA][geo.properties.COUNTYFP];\n                            setTooltipContent(cur?(Math.round(cur*100)/100):'');\n                          }\n                        }}\n                        onMouseLeave={()=>{\n                          setTooltipContent(\"\")\n                        }}\n                        fill={(measureA && colorScaleA && data[measureA][stateFips+geo.properties.COUNTYFP])?\n                                colorScaleA[data[measureA][stateFips+geo.properties.COUNTYFP]] : \"#FFFFFF\"}\n                      />\n                    )}\n                  </Geographies>\n                </ComposableMap>\n              </Grid.Column>\n              <Grid.Column>\n                <ComposableMap projection=\"geoAlbersUsa\" \n                  projectionConfig={{scale:`${config.scale}`}} \n                  width={500} \n                  height={600} \n                  strokeWidth = {0.1}\n                  stroke = 'black'\n                  data-tip=\"\"\n                  offsetX={config.offsetX}\n                  offsetY={config.offsetY}>\n                  <Geographies geography={config.url}>\n                    {({geographies}) => geographies.map(geo => \n                      <Geography \n                        key={geo.rsmKey} \n                        geography={geo} \n                        onMouseEnter={()=>{\n                          if(measureB && colorScaleB){\n                            const cur = data[measureB][geo.properties.COUNTYFP];\n                            setTooltipContent(cur?(Math.round(cur*100)/100):'');\n                          }\n                        }}\n                        onMouseLeave={()=>{\n                          setTooltipContent(\"\")\n                        }}\n                        fill = {(measureB && colorScaleB && data[measureB][stateFips+geo.properties.COUNTYFP])?\n                                colorScaleB[data[measureB][stateFips+geo.properties.COUNTYFP]] : \"#FFFFFF\"}\n                      />\n                    )}\n                  </Geographies>\n                </ComposableMap>\n                <ReactTooltip>{tooltipContent}</ReactTooltip>\n              </Grid.Column>\n            </Grid.Row>  \n          </Grid>\n          }\n          <Notes />\n        </Container>\n\n      </div>\n    );\n\n}","import React from 'react'\nimport AppBar from './AppBar';\nimport Notes from './Notes';\nimport { Container, Grid, List, Divider, Image, Header, Segment } from 'semantic-ui-react'\n\nexport default function AboutUs(props){\n\n  return (\n    <div>\n      <AppBar menu='aboutUs'/>\n      <Container style={{marginTop: '8em', minWidth: '1260px'}}>\n        <Header as='h1' style={{fontWeight: 400}}>\n          <Header.Content>\n            About Us\n            <Header.Subheader style={{fontWeight: 300}}>We are a group of epidemiologists, doctors, and software engineers from Emory University and University of Michigan.</Header.Subheader>\n          </Header.Content>\n        </Header>\n        <Grid columns={3}>\n          <Grid.Column>\n            <List bulleted>\n              <List.Item>Shivani A. Patel, PhD</List.Item>\n              <List.Item>K. M. Venkat Narayan, MD</List.Item>\n              <List.Item>Carlos Del Rio, MD</List.Item>\n              <List.Item>Mark Hutcheson, BS</List.Item>\n              <List.Item>Yubin Park, PhD</List.Item>\n              <List.Item>Daesung Choi, PhD</List.Item>\n              <List.Item>Pooja Naik, B.Pharm</List.Item>\n              <List.Item>Star Liu</List.Item>\n            </List>\n          </Grid.Column>\n          <Grid.Column>\n            <List bulleted>\n              <List.Item>Leanna Ehrlich, BA</List.Item>\n              <List.Item>Neil K. Mehta, PhD</List.Item>\n              <List.Item>Vince Marconi, MD</List.Item>\n              <List.Item>Michael Kramer, PhD</List.Item>\n              <List.Item>Rob O'Reilly, PhD</List.Item>\n              <List.Item>Sanjana Pampati, MPH</List.Item>\n              <List.Item>Joyce Ho, PhD</List.Item>\n              <List.Item>Shabatun Jamila Islam, MD</List.Item>\n            </List>\n          </Grid.Column>\n          <Grid.Column>\n            <List bulleted>\n              <List.Item>Anurag Mehta, MD</List.Item>\n              <List.Item>Aditi Nayak , MD</List.Item>\n              <List.Item>Arshed Quyyumi , MD</List.Item>\n              <List.Item>Yi-Ann Co, PhD</List.Item>\n              <List.Item>Samaah Sullivan, MD</List.Item>\n              <List.Item>Mohammed K. Ali, MD</List.Item>\n            </List>\n          </Grid.Column>\n        </Grid>\n        <Divider hidden/>\n        <Header as='h2' style={{fontWeight: 400}}>\n          <Header.Content>\n            Funding\n          </Header.Content>\n        </Header>\n        <p>The COVID-19 Health Equity Dashboard was developed with funding from the Robert Wood Johnson Foundation and Emory University’s Woodruff Health Sciences Center. Development was also supported by the Georgia Center for Diabetes Translation Research.</p>\n        <Divider hidden/>\n        <Header as='h2' style={{fontWeight: 400}}>\n          <Header.Content>\n            Feedback\n          </Header.Content>\n        </Header>\n        <p>We strive to make this a user-friendly resource for policy makers, public health actors, the public, researchers, \n          and the media. Please share your feedback by mailing us at: \n          <a href=\"mailto:covid19dashboard@emory.edu\"> covid19dashboard@emory.edu</a>\n        </p>\n\n        <Notes />\n\n      </Container>\n    </div>);\n}\n","import React from 'react'\nimport AppBar from './AppBar';\nimport Notes from './Notes';\nimport { Container, Grid, List, Divider, Image, Header, Table } from 'semantic-ui-react'\n\nexport default function DataSources(props){\n\n  return (\n    <div>\n      <AppBar menu='dataSources'/>\n      <Container style={{marginTop: '8em', minWidth: '1260px'}}>\n        <Header as='h2' style={{fontWeight: 400}}>\n          <Header.Content>\n            Data Sources and Interpretation\n          </Header.Content>\n        </Header>\n        <Divider hidden/>\n        <Table basic='very' style={{fontWeight: 400}}>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell width={3}>Measure</Table.HeaderCell>\n              <Table.HeaderCell width={5}>Data Source</Table.HeaderCell>\n              <Table.HeaderCell width={8}>How to Interpret</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            <Table.Row>\n              <Table.Cell>Total COVID-19 Cases</Table.Cell>\n              <Table.Cell> The <a href=\"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\" target=\"_blank\" rel=\"noopener noreferrer\"> New York Times Coronavirus (Covid-19) Data </a> in the United States </Table.Cell>\n              <Table.Cell><i>Total COVID-19 Cases</i> is the number of people who have tested positive for COVID-19 in each county. This database includes case counts from \"both laboratory confirmed and probable cases using criteria that were developed by states and the federal government.\" </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Total COVID-19 Deaths</Table.Cell>\n              <Table.Cell> The <a href=\"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\" target=\"_blank\" rel=\"noopener noreferrer\"> New York Times Coronavirus (Covid-19) Data </a> in the United States  </Table.Cell>\n              <Table.Cell><i>Total COVID-19 Deaths</i> is the number of people who have died of confirmed or presumed COVID-19 cases in each county. This database includes case counts from \"both laboratory confirmed and probable cases using criteria that were developed by states and the federal government.\" </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Average Daily COVID-19 Cases</Table.Cell>\n              <Table.Cell> Derived from the <a href=\"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\" target=\"_blank\" rel=\"noopener noreferrer\"> New York Times Coronavirus (Covid-19) Data </a> in the United States </Table.Cell>\n              <Table.Cell><i>Average Daily Cases</i> is the average number of positive cases for COVID-19 infection per county in the United States over the last seven days.</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Average Daily COVID-19 Deaths</Table.Cell>\n              <Table.Cell>Derived from the <a href=\"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\" target=\"_blank\" rel=\"noopener noreferrer\"> New York Times Coronavirus (Covid-19) Data </a> in the United States  </Table.Cell>\n              <Table.Cell><i>Average Daily Deaths</i> is the average number of deaths due to confirmed or presumed COVID-19 infection per county in the United States over the last seven days.</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Total COVID-19 Cases per 100,000</Table.Cell>\n              <Table.Cell>Derived from the <a href=\"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\" target=\"_blank\" rel=\"noopener noreferrer\"> New York Times Coronavirus (Covid-19) Data </a> in the United States and <a href=\"https://www.cdc.gov/nchs/nvss/bridged_race.htm#Newest%20Data%20Release\" target=\"_blank\" rel=\"noopener noreferrer\">Bridged-race population estimates </a> by The National Center for Health Statistics. </Table.Cell>\n              <Table.Cell><i>Total Cases per 100,000</i> helps us understand COVID-19 cases (people who have tested positive for COVID-19) by the population of the county per 100,000 people. <br/>\n                        If every county in the United States had 100,000 residents, this is how many would have COVID-19 in each county. This measurement adjusts for different counties’ populations to provide a standardized point of comparison of cases in each county.\n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Total COVID-19 Deaths per 100,000</Table.Cell>\n              <Table.Cell>Derived from the <a href=\"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\" target=\"_blank\" rel=\"noopener noreferrer\"> New York Times Coronavirus (Covid-19) Data </a> in the United States and <a href=\"https://www.cdc.gov/nchs/nvss/bridged_race.htm#Newest%20Data%20Release\" target=\"_blank\" rel=\"noopener noreferrer\">Bridged-race population estimates </a> by The National Center for Health Statistics.</Table.Cell>\n              <Table.Cell><i>Total Deaths per 100,000</i> helps us understand COVID-19 deaths by population of the county per 100,000 people. <br/>\n                          If every county in the United States had 100,000 residents, this is how many would have died in each county from COVID-19. This measurement adjusts for different counties’ populations to provide a standardized point of comparison of deaths in each county.\n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Average Daily COVID-19 Cases per 100,000</Table.Cell>\n              <Table.Cell>Derived from the <a href=\"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\" target=\"_blank\" rel=\"noopener noreferrer\"> New York Times Coronavirus (Covid-19) Data </a> in the United States and <a href=\"https://www.cdc.gov/nchs/nvss/bridged_race.htm#Newest%20Data%20Release\" target=\"_blank\" rel=\"noopener noreferrer\">Bridged-race population estimates </a> by The National Center for Health Statistics. </Table.Cell>\n              <Table.Cell><i>Average Daily Cases per 100,000</i> helps us understand the average number of positive cases for COVID-19 infection over the last seven days by population of the county per 100,000 people. <br/>\n                  If every county in the United States had 100,000 residents, this is how many would have tested positive for COVID-19 over a recent 7-day period, in each county. This measurement adjusts for different counties’ populations to provide a standardized point of comparison of cases in each county.\n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Average Daily COVID-19 Deaths per 100,000</Table.Cell>\n              <Table.Cell>Derived from the <a href=\"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\" target=\"_blank\" rel=\"noopener noreferrer\"> New York Times Coronavirus (Covid-19) Data </a> in the United States and <a href=\"https://www.cdc.gov/nchs/nvss/bridged_race.htm#Newest%20Data%20Release\" target=\"_blank\" rel=\"noopener noreferrer\">Bridged-race population estimates </a> by The National Center for Health Statistics. </Table.Cell>\n              <Table.Cell><i>Average Daily Deaths per 100,000</i> helps us understand the average number of deaths due to confirmed or presumed COVID-19 infection over the last seven days by population of the county per 100,000 people. \n                <br/>If every county in the United States had 100,000 residents, this is how many would have died from COVID-19 over a recent 7-day period, in each county. This measurement adjusts for different counties’ populations to provide a standardized point of comparison of deaths in each county.\n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Percent Positive</Table.Cell>\n              <Table.Cell> <a href=\"https://covidtracking.com/about-data\" target=\"_blank\" rel=\"noopener noreferrer\"> The COVID Tracking Project </a> </Table.Cell>\n              <Table.Cell><i>Percent Positive</i> is the percentage of total tests for COVID-19 that resulted in a positive result.\n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Percent Occupied Beds</Table.Cell>\n              <Table.Cell> CDC's<a href=\"https://www.cdc.gov/nhsn/datastat/index.html\" target=\"_blank\" rel=\"noopener noreferrer\"> National Healthcare Safety Network.  </a> </Table.Cell>\n              <Table.Cell><i>Percent Occupied Beds</i> is the state representative estimates for percentage of inpatient beds cccupied by COVID-19 patients.\n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% African American</Table.Cell>\n              <Table.Cell> <a href=\"https://www.census.gov/acs/www/data/data-tables-and-tools/data-profiles/\" target=\"_blank\" rel=\"noopener noreferrer\">American Community Survey </a> by the U.S. Census Bureau </Table.Cell>\n              <Table.Cell><i>% African American</i> is the percentage of residents in each county who self-identify as having African American ancestry. These data are from 2018. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% Hispanic or Latino</Table.Cell>\n              <Table.Cell><a href=\"https://www.census.gov/acs/www/data/data-tables-and-tools/data-profiles/\" target=\"_blank\" rel=\"noopener noreferrer\">American Community Survey </a> by the U.S. Census Bureau </Table.Cell>\n              <Table.Cell><i>% Hispanic or Latino</i> is the percentage of residents in each county who self-identified as Hispanic or Latino to the American Community Survey (ACS). These data are from ACS 2014-2016 (5-Year Estimate). </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% American Natives </Table.Cell>\n              <Table.Cell> <a href=\"https://www.census.gov/acs/www/data/data-tables-and-tools/data-profiles/\" target=\"_blank\" rel=\"noopener noreferrer\">American Community Survey </a> by the U.S. Census Bureau  </Table.Cell>\n              <Table.Cell><i>% American Natives </i> is the percentage of residents in each county who self-identified as American Indian and Alaska Native alone to the American Community Survey (ACS). These data are from ACS 2014-2016 (5-Year Estimate). </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% Minority</Table.Cell>\n              <Table.Cell><a href=\"https://www.census.gov/acs/www/data/data-tables-and-tools/data-profiles/\" target=\"_blank\" rel=\"noopener noreferrer\">American Community Survey </a> by the U.S. Census Bureau  </Table.Cell>\n              <Table.Cell><i>% Minority</i> is the percentage of residents in each county who self-identify as having ancestry other than non-Hispanic white. These data are from 2018. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% in Poverty</Table.Cell>\n              <Table.Cell><a href=\"https://www.census.gov/acs/www/data/data-tables-and-tools/data-profiles/\" target=\"_blank\" rel=\"noopener noreferrer\">American Community Survey </a> by the U.S. Census Bureau  </Table.Cell>\n              <Table.Cell><i>% in Poverty</i> is the percentage of residents in each county whose household income falls at or below the poverty thresholds set by the U.S. Census Bureau. These data are from 2018. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% Uninsured</Table.Cell>\n              <Table.Cell><a href=\"https://www.census.gov/acs/www/data/data-tables-and-tools/data-profiles/\" target=\"_blank\" rel=\"noopener noreferrer\">American Community Survey </a> by the U.S. Census Bureau  </Table.Cell>\n              <Table.Cell><i>% Uninsured</i> is the percentage of residents in each county who currently lack personal health insurance. These data are from 2018. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% Diabetes</Table.Cell>\n              <Table.Cell>CDC's<a href=\"https://www.cdc.gov/diabetes/data/index.html\" target=\"_blank\" rel=\"noopener noreferrer\"> Division of Diabetes Translation </a> </Table.Cell>\n              <Table.Cell><i>% Diabetes</i> is the percentage of residents in each county who currently have a medical diagnosis of Type 2 Diabetes, previously called Adult Onset Diabetes. These data are from 2016. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% Obesity</Table.Cell>\n              <Table.Cell>CDC's <a href=\"https://www.cdc.gov/diabetes/data/index.html\" target=\"_blank\" rel=\"noopener noreferrer\"> Division of Diabetes Translation </a></Table.Cell>\n              <Table.Cell><i>% Obesity</i> is the percentage of residents in each county who have obesity, defined as having a Body Mass Index (weight in kilograms divided by the square of height in meters) above 30. These data are from 2016.  </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% over 65 y/o</Table.Cell>\n              <Table.Cell><a href=\"https://www.census.gov/acs/www/data/data-tables-and-tools/data-profiles/\" target=\"_blank\" rel=\"noopener noreferrer\">American Community Survey </a> by the U.S. Census Bureau  </Table.Cell>\n              <Table.Cell><i>% over 65 y/o</i> is the percentage of residents in each county who are older than 65 years. These data are from 2018.</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% in Group Quarters</Table.Cell>\n              <Table.Cell><a href=\"https://www.census.gov/acs/www/data/data-tables-and-tools/data-profiles/\" target=\"_blank\" rel=\"noopener noreferrer\">American Community Survey </a> by the U.S. Census Bureau </Table.Cell>\n              <Table.Cell><i>% in Group Quarters</i> is the percentage of residents in each county who live in group living arrangements, such as nursing or assisted-living facilities. These data are from 2018. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% Male</Table.Cell>\n              <Table.Cell><a href=\"https://www.census.gov/acs/www/data/data-tables-and-tools/data-profiles/\" target=\"_blank\" rel=\"noopener noreferrer\">American Community Survey </a> by the U.S. Census Bureau  </Table.Cell>\n              <Table.Cell><i>% Male</i> is the percentage of residents in each county who are male. These data are from 2018.</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Socioeconomic Vulnerability</Table.Cell>\n              <Table.Cell> CDC’s <a href=\"https://svi.cdc.gov/data-and-tools-download.html\" target=\"_blank\" rel=\"noopener noreferrer\">Social Vulnerability Index data 2018 database</a> </Table.Cell>\n              <Table.Cell><i>Socioeconomic Vulnerability</i> is a composite measurement for each county that takes into account poverty, unemployment, per capita income, and not having a high school diploma; with the highest level of vulnerability assigned to tracts in the top 10% based on values for all of these measurements. These data are from 2018.</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Household Composition Vulnerability</Table.Cell>\n              <Table.Cell> CDC’s <a href=\"https://svi.cdc.gov/data-and-tools-download.html\" target=\"_blank\" rel=\"noopener noreferrer\">Social Vulnerability Index data 2018 database</a></Table.Cell>\n              <Table.Cell><i>Household Composition Vulnerability</i> is a composite measurement for each county that takes into account population aged 65 and older, population aged 17 and younger, people with disabilities who do not live in an institutional setting, and single-parent households with child(ren) under age 18; with the highest level of vulnerability assigned to tracts in the top 10% based on values for all of these measurements. These data are from 2018.</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Minority/Language Vulnerability</Table.Cell>\n              <Table.Cell> CDC’s <a href=\"https://svi.cdc.gov/data-and-tools-download.html\" target=\"_blank\" rel=\"noopener noreferrer\"> Social Vulnerability Index data 2018 database</a></Table.Cell>\n              <Table.Cell><i>Minority/Language Vulnerability</i> is a composite measurement for each county that takes into account all people except the white non-Hispanic population and those who speak English “less than well,” with the highest level of vulnerability assigned to tracts in the top 10% based on values for the measurements. These data are from 2018.</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Housing/Transportation Vulnerability</Table.Cell>\n              <Table.Cell> CDC's <a href=\"https://svi.cdc.gov/data-and-tools-download.html\" target=\"_blank\" rel=\"noopener noreferrer\"> Social Vulnerability Index data 2018 database</a></Table.Cell>\n              <Table.Cell><i>Housing/Transportation Vulnerability</i> is a composite measurement for each county that takes into account living structures with 10 or more units, mobile homes, having more people than rooms in occupied housing, households with no vehicle available, and those living in institutionalized group quarters; with the highest level of vulnerability assigned to tracts in the top 10% based on values for all of these measurements. These data are from 2018.</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Population</Table.Cell>\n              <Table.Cell> <a href=\"https://www.cdc.gov/nchs/nvss/bridged_race.htm#Newest%20Data%20Release\" target=\"_blank\" rel=\"noopener noreferrer\">Bridged-race population estimates </a> by The National Center for Health Statistics </Table.Cell>\n              <Table.Cell><i>Population</i> is the total number of people who live in each county. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Population Density</Table.Cell>\n              <Table.Cell><a href=\"https://www.census.gov/acs/www/data/data-tables-and-tools/data-profiles/\" target=\"_blank\" rel=\"noopener noreferrer\">American Community Survey </a> by the U.S. Census Bureau </Table.Cell>\n              <Table.Cell><i>Population Density</i> is the total number of people who live in each county per square mile. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Household Income</Table.Cell>\n              <Table.Cell><a href=\"https://www.census.gov/acs/www/data/data-tables-and-tools/data-profiles/\" target=\"_blank\" rel=\"noopener noreferrer\">American Community Survey </a> by the U.S. Census Bureau </Table.Cell>\n              <Table.Cell><i>Household Income</i> measures the average total income per household in each county. These data are from 2018.</Table.Cell>\n            </Table.Row>            \n          </Table.Body>\n        </Table>\n        <Notes />\n      </Container>\n    </div>);\n}\n","import React from 'react'\nimport AppBar from './AppBar';\nimport Notes from './Notes';\nimport { Container, Grid, List, Divider, Image, Header, Segment } from 'semantic-ui-react'\n\nexport default function AboutUs(props){\n\n  return (\n    <div>\n    <AppBar/>\n      <Container style={{marginTop: '8em', minWidth: '1260px'}}>\n        <Header style={{fontSize: 28, fontWeight: 600}}>\n          <Header.Content>\n            Privacy Policy\n            <Header.Subheader style={{fontSize: 22, fontWeight: 400, color: \"#000000\", paddingTop: \"15px\"}}>\n            Website Privacy Statement\n            </Header.Subheader>\n            <Header style={{fontSize: 14, fontWeight: 400}}>\n            Emory University’s COVID-19 Health Equity Dashboard (CHED) is committed to protecting your personal information and respecting your privacy. \n            In general, you can visit our website without telling us who you are or revealing information about yourself.  \n            CHED uses various methods to collect certain other kinds of information including cookies, referrers, IP addresses, and system information.\n            </Header>\n          </Header.Content>\n        </Header>\n        <Header style={{fontSize: 14, fontWeight: 400}}>\n          <Header.Content>\n            <b>Cookies: </b> Cookies are small snippets of data passed from a website to your PC as you browse the Internet that can be transferred\n             back to the original site or domain with future requests from your browser. Cookies can be used in a variety of ways, including \n             ways that have privacy implications, such as tracking your previous activities at a particular site. Most browsers allow you \n             to choose not to accept cookies. Choosing to accept cookies, however, enables some online services to work more efficiently \n             or makes the use of services more convenient.\n          </Header.Content>\n        </Header>\n\n        <Header style={{fontSize: 14, fontWeight: 400}}>\n          <Header.Content>\n            <b>Referrers: </b> A referrer is the information passed along by a browser that references the Internet URL you linked from. \n            Our Internet server automatically gathers this information. CHED uses this information for site statistical analysis. \n            CHED will not use this information to attempt to identify your personal information.\n          </Header.Content>\n        </Header>\n\n        <Header style={{fontSize: 14, fontWeight: 400}}>\n          <Header.Content>\n            <b>IP Addresses: </b> Your computer uses IP addresses every time you connect to the Internet. \n            Computers on the network use your IP address to identify your computer so that data, such as the webpages you request, \n            can be sent to you. Our server automatically gathers them. CHED uses this information for site statistical analysis. \n            CHED will not use your IP address to attempt to identify your personal information.\n          </Header.Content>\n        </Header>\n\n        <Header style={{fontSize: 14, fontWeight: 400}}>\n          <Header.Content>\n            <b>System Information: </b> System information includes time, type of browser being used, the operating system or platform, and CPU speed. \n            Your browser sends this information automatically when you are connected to a website. This information is used by CHED to \n            identify broad demographic statistics and may be used to provide information appropriate for your computer system. CHED will \n            not use this information to attempt to identify your personal information.\n          </Header.Content>\n        </Header>\n\n        <Header style={{fontSize: 14, fontWeight: 400}}>\n          <Header.Content>\n            <b>Security: </b> While no system can provide guaranteed security, we take reasonable efforts to keep information \n            you provide to us secure, including encryption technology and physical security at the location of the server where \n            information is stored.\n          </Header.Content>\n        </Header>\n\n        <Header style={{fontSize: 14, fontWeight: 400}}>\n          <Header.Content>\n            <b>Links to Other Sites: </b> The CHED website includes hyperlinks to sites maintained or controlled by others. \n            Any links to external websites is provided as a courtesy and are not an endorsement by CHED of the content or views of \n            the linked website or web page. CHED is not responsible for and does not routinely screen, approve, review, or endorse \n            the contents or use of any of the products or services that may be offered at at any other website. We advise you to \n            review the individual privacy policies of the respective sites.\n          </Header.Content>\n        </Header>\n\n        <Header.Subheader style={{fontSize: 22, fontWeight: 400, color: \"#000000\", paddingTop: \"15px\"}}>\n            Website Disclaimer\n        </Header.Subheader>\n        <Header style={{fontSize: 14, fontWeight: 400}}>\n            CHED provides information as a service to users. This website does not constitute a legal contract between CHED and the user. \n            Content is subject to change without notice and CHED makes no guarantees, warranties, or representations, express or limited, \n            on the website’s operation, information, content, and materials.\n        </Header>\n\n        <Header.Subheader style={{fontSize: 22, fontWeight: 400, color: \"#000000\", paddingTop: \"15px\"}}>\n            Liability\n        </Header.Subheader>\n        <Header style={{fontSize: 14, fontWeight: 400}}>\n            CHED is not liable for damages of any kind arising from the use of or reliance on any content, goods, or services available on \n            or through this website or any hyperlinked site or resource.\n        </Header>\n\n        <Header.Subheader style={{fontSize: 22, fontWeight: 400, color: \"#000000\", paddingTop: \"15px\"}}>\n            Contact Us\n        </Header.Subheader>\n        <Header style={{fontSize: 14, fontWeight: 400}}>\n            <a href=\"mailto:covid19dashboard@emory.edu\"> covid19dashboard@emory.edu</a>\n        </Header>\n\n        <Notes />\n\n      </Container>\n    </div>);\n}\n","// React\nimport React from \"react\";\n// Components & Hooks\nimport USMap from \"./USMap\";\nimport StateMap from \"./StateMap\";\nimport CountyReport from \"./CountyReport\";\nimport MapYourState from \"./MapState\";\nimport AboutUs from \"./AboutUs\";\nimport DataSources from \"./DataSources\";\nimport Privacy from \"./Privacy\";\nimport 'semantic-ui-css/semantic.min.css'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\n\nApp.propTypes = {};\nexport default function App() {\n\n  return (\n      <Router>\n        <Switch>\n          <Route path='/map-your-state'>\n            <MapYourState />\n          </Route>\n          <Route path='/about-team'>\n            <AboutUs />\n          </Route>\n          <Route path='/privacy'>\n            <Privacy />\n          </Route>\n          <Route path='/data-sources'>\n            <DataSources />\n          </Route>            \n          <Route path='/:stateFips/:countyFips'>\n            <CountyReport />\n          </Route>  \n          <Route path='/:stateFips'>\n            <StateMap />\n          </Route>\n          <Route path='/'>\n            <USMap />\n          </Route>\n          <Route path=\"*\">\n            <Redirect to='/'/>\n          </Route>\n        </Switch>\n      </Router>\n  );\n}\n\n","import 'react-app-polyfill/ie9';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}