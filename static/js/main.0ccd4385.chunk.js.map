{"version":3,"sources":["components/AppBar.js","components/MapProvider.js","utils.js","components/useGeographies.js","components/Geographies.js","components/Geography.js","components/ComposableMap.js","components/Marker.js","components/Annotation.js","components/Notes.js","components/USMap.js","components/StateMap.js","components/CountyReport.js","components/MapState.js","components/AboutUs.js","components/DataSources.js","components/App.js","index.js"],"names":["AppBar","props","history","useHistory","Menu","borderless","inverted","fixed","style","backgroundImage","backgroundSize","Container","width","Item","as","header","onClick","push","fontWeight","color","lineHeight","active","menu","content","name","position","Image","size","src","geoPath","d3Geo","projections","MapContext","createContext","MapProvider","height","offsetX","offsetY","projection","projectionConfig","restProps","center","cx","cy","rotate","rx","ry","rz","parallels","p1","p2","s","scale","projMemo","useMemo","scl","proj","translate","forEach","d","makeProjection","useCallback","value","path","Provider","getFeatures","geographies","parseGeographies","Array","isArray","feats","feature","objects","Object","keys","features","useGeographies","geography","useContext","useState","setGeographies","useEffect","url","window","fetch","then","res","ok","Error","statusText","json","catch","error","console","log","geos","map","i","rsmKey","svgPath","prepareFeatures","Geographies","children","className","length","memo","onMouseEnter","onMouseLeave","onMouseDown","onMouseUp","onFocus","onBlur","isPressed","setPressed","isFocused","setFocus","tabIndex","evt","ComposableMap","Marker","coordinates","x","y","transform","Annotation","subject","connectorProps","dx","dy","curve","connectorPath","curvature","curveX","curveY","createConnectorPath","fill","stroke","Notes","state","paddingTop","Divider","Grid","Row","Column","fontSize","href","hidden","columns","paddingLeft","List","paddingBottom","right","paddingRight","data-size","data-text","data-url","data-show-count","target","async","charSet","bottom","data-href","data-action","text","alert","numberWithCommas","toString","pattern","test","replace","colorPalette","MapLabels","offsets","VT","NH","MA","RI","CT","NJ","DE","MD","DC","geo","centroid","geoCentroid","cur","stateLabels","find","val","id","key","indexOf","textAnchor","alignmentBaseline","USMap","stateName","setStateName","fips","setFips","setTooltipContent","dataFltrd","setDataFltrd","dataStateFltrd","setDataStateFltrd","dataState","setDataState","data","setData","date","setDate","setStateLabels","colorScale","setColorScale","legendMax","setLegendMax","legendMin","setLegendMin","legendSplit","setLegendSplit","metric","setMetric","metricOptions","setMetricOptions","setMetricName","varMap","setVarMap","delayHandler","setDelayHandler","_","filter","variable","group","k","Population","black","cs","scaleQuantile","domain","range","scaleMap","each","max","min","toFixed","split","quantiles","c","l","marginTop","minWidth","Breadcrumb","Section","Header","Content","Subheader","padding","Dropdown","icon","background","theme","top","left","borderTop","borderLeft","borderRight","borderBottom","borderRadius","minHeight","placeholder","inline","search","pointing","options","onChange","e","strokeWidth","splitpoint","data-tip","setTimeout","stateFips","substring","configMatched","configs","clearTimeout","orientation","sortKey","datum","fillOpacity","label","dependentAxis","axisLabel","tickCount","tickFormat","Math","round","Loader","BarChart","colors","countyFips","VictoryTheme","material","domainPadding","ylog","minDomain","containerComponent","responsive","title","tickLabels","horizontal","barRatio","labels","var","labelComponent","StateMap","useParams","config","setConfig","setCountyFips","countyName","setCountyName","dataTS","setDataTS","dataRD","setDataRD","caseRate","setCaseRate","percentChangeCases","setPercentChangeCases","mortality","setMortality","percentChangeMortality","setPercentChangeMortality","hospRate","setHospRate","pctChangeHospRate","setPctChangeHospRate","testingRate","setTestingRate","pctChangeTestingRate","setPctChangeTestingRate","countyMost","mortalityMA","percentChangeCase","percentChangeHospitalizationRate","percentChangeTestingRate","v","t","caseRateMA","hospitalizationRate","isNaN","fips2county","link","tickValues","Date","toLocaleDateString","includes","axis","properties","COUNTYFP","flyoutStyle","ScatterChart","xlog","showLegend","cornerRadius","rescaleX","parseFloat","CountyReport","tooltipContent","cases","deaths","caseRateMean","mortalityMean","cfr","covidMetric","setCovidMetric","takeRight","Statistic","Label","textAlign","Value","toLocaleString","centered","Table","striped","compact","basic","HeaderCell","Body","Cell","colorPalette2","MapState","setStateFips","measureA","setMeasureA","measureB","setMeasureB","colorScaleA","setColorScaleA","colorScaleB","setColorScaleB","measureOptionsA","setMeasureOptionsA","measureOptionsB","setMeasureOptionsB","legendSplitA","setLegendSplitA","legendSplitB","setLegendSplitB","legendMaxA","setLegendMaxA","legendMaxB","setLegendMaxB","legendMinA","setLegendMinA","legendMinB","setLegendMinB","setName","coldata","splitA","maxA","minA","splitB","maxB","minB","selection","stateOptions","fluid","labeled","AboutUs","bulleted","DataSources","App","to","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.0ccd4385.chunk.js","sourcesContent":["import React from \"react\";\nimport ErrorBoundary from \"react-error-boundary\";\nimport { Container, Menu, Image } from 'semantic-ui-react';\n\nimport { useHistory } from 'react-router-dom';\n\n\nexport default function AppBar(props) {\n\n  const history = useHistory();\n\n  return (\n    <ErrorBoundary>\n      <Menu borderless inverted fixed='top'\n        style={{backgroundImage: 'url(\"/Emory_COVID_header_LightBlue.jpg\")',\n                backgroundSize: 'cover'}}>\n        <Container style={{width: '1290px'}}>\n          <Menu.Item as='a' header onClick={() => history.push('/')}>\n            <span style={{fontWeight: 400, color: '#fff', lineHeight: 1.3}}>\n           COVID-19 Health Equity<br/>Interactive Dashboard\n           </span>\n          </Menu.Item>\n          <Menu.Item \n            active={props.menu==='countyReport'} \n            content='Home'\n            onClick={() => history.push('/')}\n            name='countyReport'/>\n\n          <Menu.Item \n            active={props.menu==='mapState'} \n            onClick={() => history.push('/map-your-state')}\n            name='mapState'>\n            Map Your State\n          </Menu.Item>\n          <Menu.Item \n            active={props.menu==='dataSources'} \n            onClick={() => history.push('/data-sources')}\n            name='dataSources'>\n            Data Sources &<br/>Interpretation\n          </Menu.Item>\n          <Menu.Item \n            active={props.menu==='aboutUs'} \n            content='About Us'\n            onClick={() => history.push('/about-team')}\n            name='aboutUs'/>            \n          <Menu.Menu position='right'>\n            <Menu.Item as='a' header>\n              <Image size='small' src='/logo_white.png' />\n            </Menu.Item>\n          </Menu.Menu>\n        </Container>\n      </Menu>\n    </ErrorBoundary>\n  );\n}\n\n\n\n","\nimport React, {\n  createContext,\n  useMemo,\n  useCallback,\n} from \"react\"\nimport PropTypes from \"prop-types\"\nimport * as d3Geo from \"d3-geo\"\n\nconst { geoPath, ...projections } = d3Geo\n\nconst MapContext = createContext()\n\nconst makeProjection = ({\n  projectionConfig = {},\n  projection = \"geoEqualEarth\",\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0\n}) => {\n  const isFunc = typeof projection === \"function\"\n\n  if (isFunc) return projection\n\n  const scl = projectionConfig.scale || null;\n\n  let proj = projections[projection]().translate([width/2 + (offsetX)*scl/1000 ,\n                                              height/2 + (offsetY)*scl/1000]);\n\n  const supported = [\n    proj.center ? \"center\" : null,\n    proj.rotate ? \"rotate\" : null,\n    proj.scale ? \"scale\" : null,\n    proj.parallels ? \"parallels\" : null,\n  ]\n\n  supported.forEach(d => {\n    if (!d) return\n    proj = proj[d](projectionConfig[d] || proj[d]())\n  })\n\n  return proj\n}\n\nconst MapProvider = ({\n  width,\n  height,\n  offsetX,\n  offsetY,\n  projection,\n  projectionConfig,\n  ...restProps\n}) => {\n  const [cx, cy] = projectionConfig.center || []\n  const [rx, ry, rz] = projectionConfig.rotate || []\n  const [p1, p2] = projectionConfig.parallels || []\n  const s = projectionConfig.scale || null\n\n  const projMemo = useMemo(() => {\n    return makeProjection({\n      projectionConfig: {\n        center: (cx || cx === 0) || (cy || cy === 0) ? [cx, cy] : null,\n        rotate: (rx || rx === 0) || (ry || ry === 0) ? [rx, ry, rz] : null,\n        parallels: (p1 || p1 === 0) || (p2 || p2 === 0) ? [p1, p2] : null,\n        scale: s,\n      },\n      projection,\n      width,\n      height,\n      offsetX,\n      offsetY,\n    })\n  }, [ width, height, projection, cx, cy, rx, ry, rz, p1, p2, s, offsetX, offsetY ])\n\n  const proj = useCallback(projMemo, [projMemo])\n\n  const value = useMemo(() => {\n    return {\n      width,\n      height,\n      projection: proj,\n      path: geoPath().projection(proj),\n    }\n  }, [ width, height, proj ])\n\n  return (<MapContext.Provider value={value} {...restProps} />)\n}\n\nMapProvider.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  offsetX: PropTypes.number,\n  offsetY: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n}\n\nexport { MapProvider, MapContext }\n","\nimport { feature } from \"topojson-client\"\n\nexport function getCoords(w, h, t) {\n  const xOffset = (w * t.k - w) / 2\n  const yOffset = (h * t.k - h) / 2\n  return [w / 2 - (xOffset + t.x) / t.k, h / 2 - (yOffset + t.y) / t.k]\n}\n\nexport function fetchGeographies(url) {\n  return fetch(url)\n    .then(res => {\n      if (!res.ok) {\n        throw Error(res.statusText)\n      }\n      return res.json()\n    }).catch(error => {\n      console.log(\"There was a problem when fetching the data: \", error)\n    })\n}\n\nexport function getFeatures(geographies, parseGeographies) {\n  if (Array.isArray(geographies)) return parseGeographies ? parseGeographies(geographies) : geographies\n  const feats = feature(\n    geographies,\n    geographies.objects[Object.keys(geographies.objects)[0]]\n  ).features\n  return parseGeographies ? parseGeographies(feats) : feats\n}\n\nexport function prepareFeatures(geographies, path) {\n  return geographies ? geographies.map((d, i) => {\n    return {\n      ...d,\n      rsmKey: `geo-${i}`,\n      svgPath: path(d),\n    }\n  }) : []\n}\n\nexport function createConnectorPath(dx = 30, dy = 30, curve = 0.5) {\n  const curvature = Array.isArray(curve) ? curve : [curve, curve]\n  const curveX = dx / 2 * curvature[0]\n  const curveY = dy / 2 * curvature[1]\n  return `M${0},${0} Q${-dx / 2 - curveX},${-dy / 2 + curveY} ${-dx},${-dy}`\n}\n\nexport function isString(geo) { return typeof geo === \"string\" }\n","\nimport { useMemo, useState, useEffect, useContext } from \"react\"\nimport { MapContext } from \"./MapProvider\"\n\nimport { fetchGeographies, getFeatures, prepareFeatures, isString } from \"../utils\"\n\nexport default function useGeographies({ geography, parseGeographies }) {\n  const { path } = useContext(MapContext)\n  const [geographies, setGeographies] = useState()\n\n  useEffect(() => {\n    if (typeof window === `undefined`) return\n\n    if (isString(geography)) {\n      fetchGeographies(geography).then(geos => {\n        if (geos) setGeographies(getFeatures(geos, parseGeographies))\n      })\n    } else {\n      setGeographies(getFeatures(geography, parseGeographies))\n    }\n  }, [geography, parseGeographies])\n\n  const output = useMemo(() => {\n    return prepareFeatures(geographies, path)\n  }, [geographies, path])\n\n  return { geographies: output }\n}\n","\nimport React, { useContext } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapContext } from \"./MapProvider\"\nimport useGeographies from \"./useGeographies\"\n\nconst Geographies = ({\n  geography,\n  children,\n  parseGeographies,\n  className = \"\",\n  ...restProps\n}) => {\n  const { path, projection } = useContext(MapContext)\n  const { geographies } = useGeographies({ geography, parseGeographies })\n\n  return (\n    <g className={`rsm-geographies ${className}`} {...restProps}>\n      {\n        geographies && geographies.length > 0 &&\n        children({ geographies, path, projection })\n      }\n    </g>\n  )\n}\n\nGeographies.propTypes = {\n  geography: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n    PropTypes.array,\n  ]),\n  children: PropTypes.func,\n  parseGeographies: PropTypes.func,\n  className: PropTypes.string,\n}\n\nexport default Geographies\n","\nimport React, { useState, memo } from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Geography = ({\n  geography,\n  onMouseEnter,\n  onMouseLeave,\n  onMouseDown,\n  onMouseUp,\n  onFocus,\n  onBlur,\n  style = {},\n  className = \"\",\n  ...restProps\n}) => {\n  const [isPressed, setPressed] = useState(false)\n  const [isFocused, setFocus] = useState(false)\n\n  function handleMouseEnter(evt) {\n    setFocus(true)\n    if (onMouseEnter) onMouseEnter(evt)\n  }\n\n  function handleMouseLeave(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onMouseLeave) onMouseLeave(evt)\n  }\n\n  function handleFocus(evt) {\n    setFocus(true)\n    if (onFocus) onFocus(evt)\n  }\n\n  function handleBlur(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onBlur) onBlur(evt)\n  }\n\n  function handleMouseDown(evt) {\n    setPressed(true)\n    if (onMouseDown) onMouseDown(evt)\n  }\n\n  function handleMouseUp(evt) {\n    setPressed(false)\n    if (onMouseUp) onMouseUp(evt)\n  }\n\n  return (\n    <path\n      tabIndex=\"0\"\n      className={`rsm-geography ${className}`}\n      d={geography.svgPath}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      style={style[isPressed || isFocused ? (isPressed ? \"pressed\" : \"hover\") : \"default\"]}\n      {...restProps}\n    />\n  )\n}\n\nGeography.propTypes = {\n  geography: PropTypes.object,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  style: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default memo(Geography)\n","\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapProvider } from \"./MapProvider\"\n\nconst ComposableMap = ({\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0,\n  projection = \"geoEqualEarth\",\n  projectionConfig = {},\n  className = \"\",\n  ...restProps\n}) => {\n  return (\n    <MapProvider\n      width={width}\n      height={height}\n      offsetX={offsetX}\n      offsetY={offsetY}\n      projection={projection}\n      projectionConfig={projectionConfig}\n    >\n      <svg\n        width={width}\n        height={height}\n        className={`rsm-svg ${className}`}\n        {...restProps}\n      />\n    </MapProvider>\n  )\n}\n\nComposableMap.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default ComposableMap\n","\nimport React, { useContext, useState } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapContext } from \"./MapProvider\"\n\nconst Marker = ({\n  coordinates,\n  children,\n  onMouseEnter,\n  onMouseLeave,\n  onMouseDown,\n  onMouseUp,\n  onFocus,\n  onBlur,\n  style = {},\n  className = \"\",\n  ...restProps\n}) => {\n  const { projection } = useContext(MapContext)\n  const [isPressed, setPressed] = useState(false)\n  const [isFocused, setFocus] = useState(false)\n\n  const [x, y] = projection(coordinates)\n\n  function handleMouseEnter(evt) {\n    setFocus(true)\n    if (onMouseEnter) onMouseEnter(evt)\n  }\n\n  function handleMouseLeave(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onMouseLeave) onMouseLeave(evt)\n  }\n\n  function handleFocus(evt) {\n    setFocus(true)\n    if (onFocus) onFocus(evt)\n  }\n\n  function handleBlur(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onBlur) onBlur(evt)\n  }\n\n  function handleMouseDown(evt) {\n    setPressed(true)\n    if (onMouseDown) onMouseDown(evt)\n  }\n\n  function handleMouseUp(evt) {\n    setPressed(false)\n    if (onMouseUp) onMouseUp(evt)\n  }\n\n  return (\n    <g\n      transform={`translate(${x}, ${y})`}\n      className={`rsm-marker ${className}`}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      style={style[isPressed || isFocused ? (isPressed ? \"pressed\" : \"hover\") : \"default\"]}\n      {...restProps}\n    >\n      {children}\n    </g>\n  )\n}\n\nMarker.propTypes = {\n  coordinates: PropTypes.array,\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node),\n  ]),\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  style: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default Marker\n","\nimport React, { useContext } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapContext } from \"./MapProvider\"\nimport { createConnectorPath } from \"../utils\"\n\nconst Annotation = ({\n  subject,\n  children,\n  connectorProps,\n  dx = 30,\n  dy = 30,\n  curve = 0,\n  className = \"\",\n  ...restProps\n}) => {\n  const { projection } = useContext(MapContext)\n  const [x, y] = projection(subject)\n  const connectorPath = createConnectorPath(dx, dy, curve)\n\n  return (\n    <g\n      transform={`translate(${x + dx}, ${y + dy})`}\n      className={`rsm-annotation ${className}`}\n      {...restProps}\n    >\n      <path d={connectorPath} fill=\"transparent\" stroke=\"#000\" {...connectorProps} />\n      {children}\n    </g>\n  )\n}\n\nAnnotation.propTypes = {\n  subject: PropTypes.array,\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node),\n  ]),\n  dx: PropTypes.number,\n  dy: PropTypes.number,\n  curve: PropTypes.number,\n  connectorProps: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default Annotation\n","import React, {useState } from 'react'\nimport { Grid, List, Divider, Image } from 'semantic-ui-react'\nimport ReactDOM from 'react-dom';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nfunction myFunction() {\n  alert('Link is copied to clipboard!');\n  \n}\n\nexport default function Notes(props){\n\n\n  const [state, setState] = useState(\"https://covid19.emory.edu/\");\n \n  return (\n\n  \t\n\n    <div style={{paddingTop: '2em', fontWeight: 300}}>\n    <Divider/>\n    <Grid>\n      <Grid.Row>\n        <Grid.Column style={{fontSize: '1em', lineHeight: '1.5em'}}>\n          Early data about COVID-19 suggests that communities are affected very differently due to social determinants of health like population density, poverty, residential segregation, underlying chronic health conditions, and availability of medical services. \n          In order to predict how the epidemic will continue to unfold and prepare for the future, it is critical to understand differences in underlying risk factors. \n          There is no one-size-fits all approach to combat the epidemic, but accurate and meaningful data is a key component of a robust public health response that is informed by contextual factors and prioritizes health equity.\n          <br/><br/>\n          The COVID-19 Health Equity Dashboard (<a href=\"COVID19.emory.edu\"> COVID19.emory.edu</a>) seeks to fill the gaps in county-level data about the virus and underlying social determinants of health. \n          Our goal is for this Dashboard to facilitate easy comparisons of counties with respect to COVID-19 outcomes and social determinants. \n          We hope this becomes a valuable resource for and critical component of tailored public health responses to COVID-19 across the wide range of environments that Americans inhabit.\n\n        </Grid.Column>\n      </Grid.Row>\n      <Divider hidden/>\n      <Grid.Row columns={3}>\n        <Grid.Column>          \n          <Image size='small' src='/logo.png' />\n          &copy; 2020 Emory University. All rights reserved.\n        </Grid.Column>\n        <Grid.Column style={{paddingLeft: 130}}>          \n          <small>\n            This <a href=\"COVID19.emory.edu\"> COVID-19 Health Equity Dashboard </a> is created using\n            <List as='ol'>\n              <List.Item as='li' value='-'><a href=\"https://www.react-simple-maps.io/\">React Simple Maps</a> by <a href=\"https://www.zcreativelabs.com/\">z creative labs</a></List.Item>\n              <List.Item as='li' value='-'><a href=\"https://formidable.com/open-source/victory/\">Victory</a> by <a href=\"https://formidable.com/\">Formidable</a></List.Item>\n              <List.Item as='li' value='-'><a href=\"https://github.com/Semantic-Org/Semantic-UI-React\">Semantic UI React</a> by <a href=\"https://github.com/levithomason\">@levithomason</a> and an amazing community of <a href=\"https://github.com/Semantic-Org/Semantic-UI-React/graphs/contributors\">contributors</a></List.Item> \n              <List.Item as='li' value='-'><a href=\"https://github.com/facebook/create-react-app\">Create React App</a> by <a href=\"https://about.fb.com/company-info/\">Facebook</a></List.Item> \n            </List>\n          </small>\n\n        </Grid.Column>\n\n        <Grid.Column style={{paddingLeft: 0}}>\n          \t<Grid>\n\t        \t<Grid.Row style={{width: 400, paddingBottom: 0, right: -295}}> \n\t            \tShare This Dashboard \n\t\t\t\t</Grid.Row>\n\t\t\t\t<Grid.Row columns = {15} style ={{ paddingTop: 0}}>\n\t\t\t\t  <Grid.Column style ={{paddingLeft: 0, paddingRight: 0, right: -295}}>\n\t            \t<a href=\"https://twitter.com/share?ref_src=twsrc%5Etfw\" className=\"twitter-share-button\" data-size=\"large\" data-text=\"Check out the Emory COVID-19 Health Equity Interactive Dashboard! \" data-url=\"https://covid19.emory.edu/\" data-show-count=\"false\" target=\"_blank\"><Image width= \"24px\" src='/Twitter_Logo_Blue.png' /> </a><script async src=\"https://platform.twitter.com/widgets.js\" charSet=\"utf-8\"></script>\n\t\t\t  \t  </Grid.Column>\n\t\t\t  \t  <Grid.Column style ={{paddingLeft: 0, paddingRight: 0, right: -299, bottom: -5}}>\n\t            \t<a href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fcovid19.emory.edu%2F&amp;src=sdkpreparse\" data-href=\"https://covid19.emory.edu/\" target=\"_blank\"><Image width= \"14px\" src='/f_logo_RGB-Blue_512.png' /></a>\n\t\t\t  \t  </Grid.Column>\n\t\t\t  \t  <Grid.Column style ={{paddingLeft: 0, paddingRight: 0, right: -295}}>\n\t            \t<a href=\"https://web.whatsapp.com/send?text= Check out the Emory COVID-19 Health Equity Interactive Dashboard! https://covid19.emory.edu/\" data-action=\"share/whatsapp/share\" target=\"_blank\"><Image width= \"22px\" src='/WhatsApp_Logo_1.png' /></a>\n\t\t\t  \t  </Grid.Column>\n\t\t\t\t  <Grid.Column style ={{paddingLeft: 9, paddingRight: 0, paddingTop: 4, right: -290}}>\n\t\t\t\t      <div>\n \n              <CopyToClipboard text={state}>\n                <img onClick={()=>myFunction()} src='/copy_icon.png' style={{height: \"13px\", width: \"13px\" }}/>\n              </CopyToClipboard>\n              \n            </div>\n\t\t\t\t  \t\n\t\t\t\t\t\t\t\t\n\t\t\t\t  </Grid.Column>\n\t\t\t  \t</Grid.Row>\n\t\t  \t</Grid>\n\t\t  \t\n       \t  \n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n\n\n    </div>);\n}\n","import React, { useEffect, useState } from 'react'\nimport { Container, Grid, Dropdown, Breadcrumb, Header, List, Loader, Divider } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport { geoCentroid } from \"d3-geo\";\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport Marker from './Marker';\nimport Annotation from './Annotation';\nimport ReactTooltip from \"react-tooltip\";\nimport { VictoryChart, \n  VictoryGroup, \n  VictoryBar, \n  VictoryTheme, \n  VictoryAxis, \n  VictoryLegend,\n  VictoryLine,  \n  VictoryLabel, \n  VictoryScatter,\n} from 'victory';\nimport { useHistory } from \"react-router-dom\";\nimport Notes from './Notes';\nimport _ from 'lodash';\nimport { scaleQuantile } from \"d3-scale\";\nimport configs from \"./state_config.json\";\n\nfunction numberWithCommas(x) {\n    x = x.toString();\n    var pattern = /(-?\\d+)(\\d{3})/;\n    while (pattern.test(x))\n        x = x.replace(pattern, \"$1,$2\");\n    return x;\n}\n\n//const geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\"\nconst colorPalette = [\n        \"#e1dce2\",\n        \"#d3b6cd\",\n        \"#bf88b5\", \n        \"#af5194\", \n        \"#99528c\", \n        \"#633c70\", \n      ];\nconst colorHighlight = '#f2a900';\n\n\nfunction MapLabels(props){\n\n  const offsets = {\n    VT: [50, -8],\n    NH: [34, 2],\n    MA: [30, -1],\n    RI: [28, 2],\n    CT: [35, 10],\n    NJ: [34, 1],\n    DE: [33, 0],\n    MD: [47, 10],\n    DC: [49, 21],\n  };\n\n  return (\n    <svg>\n      {props.geographies.map(geo => {\n          const centroid = geoCentroid(geo);\n          const cur = props.stateLabels.find(s => s.val === geo.id);\n          return (\n            <g key={geo.rsmKey + \"-name\"}>\n              {cur &&\n                centroid[0] > -160 &&\n                centroid[0] < -67 &&\n                (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                  <Marker coordinates={centroid}>\n                    <text y=\"2\" fontSize={14} textAnchor=\"middle\" fill=\"#eee\">\n                      {cur.id}\n                    </text>\n                  </Marker>\n                ) : (\n                  <Annotation\n                    subject={centroid}\n                    dx={offsets[cur.id][0]}\n                    dy={offsets[cur.id][1]}\n                  >\n                    <text x={4} fontSize={14} alignmentBaseline=\"middle\">\n                      {cur.id}\n                    </text>\n                  </Annotation>\n                ))}\n            </g>\n          );\n        })}\n    </svg>\n    );\n}\n\n\nexport default function USMap(props) {\n\n  const [stateName, setStateName] = useState('Georgia');\n  const [fips, setFips] = useState('13');\n  const [tooltipContent, setTooltipContent] = useState('');\n  const history = useHistory();\n  const [dataFltrd, setDataFltrd] = useState();\n\n  const [dataStateFltrd, setDataStateFltrd] = useState();\n  const [dataState, setDataState] = useState();\n\n  const [data, setData] = useState();\n  const [date, setDate] = useState('');\n  const [stateLabels, setStateLabels] = useState();\n  const [colorScale, setColorScale] = useState();\n\n  const [legendMax, setLegendMax] = useState([]);\n  const [legendMin, setLegendMin] = useState([]);\n  const [legendSplit, setLegendSplit] = useState([]);\n\n  const [metric, setMetric] = useState('mean7daycases');\n  const [metricOptions, setMetricOptions] = useState('mean7daycases');\n  const [metricName, setMetricName] = useState('Average Daily COVID-19 Cases');\n\n  const [varMap, setVarMap] = useState({});\n  const [delayHandler, setDelayHandler] = useState();\n\n\n  useEffect(()=>{\n    fetch('/data/rawdata/variable_mapping.json').then(res => res.json())\n      .then(x => {\n        setVarMap(x);\n        setMetricOptions(_.filter(_.map(x, d=> {\n          return {key: d.id, value: d.variable, text: d.name, group: d.group};\n        }), d => (d.text !== \"Urban-Rural Status\" && d.group === \"outcomes\")));\n      });\n  }, []);\n\n\n\n\n  useEffect(() => {\n    if (metric) {\n    fetch('/data/data.json').then(res => res.json())\n      .then(x => {\n        \n        setData(x);\n        setDataFltrd(_.filter(_.map(x, (d, k) => {\n          d.fips = k\n          return d}), \n          d => (d.Population > 10000 && \n              d.black > 5 && \n              d.fips.length === 5 && \n              d['covidmortalityfig'] > 0)));\n      \n        const cs = scaleQuantile()\n        .domain(_.map(_.filter(_.map(x, (d, k) => {\n          d.fips = k\n          return d}), \n          d => (\n              d[metric] >= 0 &&\n              d.fips.length === 5)),\n          d=> d[metric]))\n        .range(colorPalette);\n\n        let scaleMap = {}\n        _.each(x, d=>{\n          if(d[metric] >= 0){\n          scaleMap[d[metric]] = cs(d[metric])}});\n      \n        setColorScale(scaleMap);\n        var max = 0\n        var min = 100\n        var length = 0\n        _.each(x, d=> { \n          if (d[metric] > max && d.fips.length === 5) {\n            max = d[metric]\n          } else if (d.fips.length === 5 && d[metric] < min && d[metric] >= 0){\n            min = d[metric]\n          }\n        });\n\n        if (max > 999) {\n          max = (max/1000).toFixed(0) + \"K\";\n          setLegendMax(max);\n        }else{\n          setLegendMax(max.toFixed(0));\n\n        }\n        setLegendMin(min.toFixed(0));\n\n        var split = scaleQuantile()\n        .domain(_.map(_.filter(_.map(x, (d, k) => {\n          d.fips = k\n          return d}), \n          d => (\n              d[metric] >= 0 &&\n              d.fips.length === 5)),\n          d=> d[metric]))\n        .range(colorPalette);\n\n        setLegendSplit(split.quantiles());\n\n\n      });\n\n    fetch('/data/date.json').then(res => res.json())\n      .then(x => setDate(x.date));\n    \n    fetch('/data/allstates.json').then(res => res.json())\n      .then(x => setStateLabels(x));\n\n    fetch('/data/data.json').then(res => res.json())\n      .then(x => {\n        setDataState(x);\n        setDataStateFltrd(_.filter(_.map(x, (c, l) => {\n          c.fips = l\n          return c}),\n          c => (c.fips.length === 2)));\n      });\n    }\n\n  }, [metric])\n\n  if (data && dataFltrd && stateLabels && dataStateFltrd && dataState) {\n\n  return (\n      <div>\n        <AppBar menu='countyReport'/>\n        <Container style={{marginTop: '6em', minWidth: '1260px'}}>\n          <Breadcrumb>\n            <Breadcrumb.Section active>United States</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n          </Breadcrumb>\n          <Divider hidden />\n          <Grid columns={16}>\n          <div>\n            See Dashboard Guide (<a href=\"Dashboard user guide.pdf\" target=\"_blank\"> PDF </a> / <a href=\"https://youtu.be/PmI42rHnI6U\" target=\"_blank\"> YouTube </a>)\n            \n          </div>\n            <Grid.Row>\n              <Grid.Column width={9}>\n                <Header as='h2' style={{fontWeight: 400}}>\n                  <Header.Content>\n                    COVID-19 is affecting every community differently.<br/>\n                    Some areas are much harder-hit than others.<br/>\n                    What is happening where you live?\n                    <Header.Subheader style={{fontWeight: 300}}></Header.Subheader>\n                  </Header.Content>\n                </Header>\n                \n\n                <Grid.Row columns={2} style={{width: 630, padding: 0, paddingTop: 0, paddingRight: 0, paddingBottom: 0}}>\n\n                      <Dropdown\n                        icon=''\n\n                        style={{background: '#fff', \n                                fontSize: 16,\n                                fontWeight: 400, \n                                theme: '#000000',\n                                width: '370px',\n                                top: '12px',\n                                left: '0px',\n                                text: \"Select\",\n                                borderTop: 'none',\n                                borderLeft: '1px solid #FFFFFF',\n                                borderRight: '0px', \n                                borderBottom: '0.5px solid #bdbfc1',\n                                borderRadius: 0,\n                                minHeight: '1.0em',\n                                paddingBottom: '0.0em'}}\n                        placeholder= \"Average Daily COVID-19 Cases\"\n                        inline\n                        search\n                        pointing = 'top'\n                        options={metricOptions}\n                        onChange={(e, { value }) => {\n                          setMetric(value);\n                          setMetricName(varMap[value]['name']);\n                        }}\n\n                        \n                      />\n\n                <svg width=\"260\" height=\"80\">\n                  \n\n                  <text x={50} y={70} style={{fontSize: '0.8em'}}>Low</text>\n                  <text x={50+20 * (colorPalette.length - 1)} y={70} style={{fontSize: '0.8em'}}>High</text>\n\n                  {_.map(colorPalette, (color, i) => {\n                    return <rect key={i} x={50+20*i} y={40} width=\"20\" height=\"20\" style={{fill: color, strokeWidth:1, stroke: color}}/>                    \n                  })} \n\n                  <rect x={195} y={40} width=\"20\" height=\"20\" style={{fill: \"#FFFFFF\", strokeWidth:0.5, stroke: \"#000000\"}}/>                    \n                  <text x={217} y={50} style={{fontSize: '0.7em'}}> None </text>\n                  <text x={217} y={59} style={{fontSize: '0.7em'}}> Reported </text>\n\n                  {_.map(legendSplit, (splitpoint, i) => {\n                    if(legendSplit[i] < 1){\n                      return <text key = {i} x={70 + 20 * (i)} y={37} style={{fontSize: '0.7em'}}> {legendSplit[i].toFixed(1)}</text>                    \n                    }\n                    return <text key = {i} x={70 + 20 * (i)} y={37} style={{fontSize: '0.7em'}}> {legendSplit[i].toFixed(0)}</text>                    \n                  })} \n                  <text x={50} y={37} style={{fontSize: '0.7em'}}>{legendMin}</text>\n                  <text x={170} y={37} style={{fontSize: '0.7em'}}>{legendMax}</text>\n\n                </svg>\n                </Grid.Row>\n\n\n                <ComposableMap \n                  projection=\"geoAlbersUsa\" \n                  data-tip=\"\"\n                  width={630} \n                  height={380}\n                  strokeWidth= {0.1}\n                  stroke= 'black'\n                  projectionConfig={{scale: 750}}\n                   >\n                  <Geographies geography={geoUrl}>\n                    {({ geographies }) => \n                      <svg>\n                        {geographies.map(geo => (\n                          <Geography\n                            key={geo.rsmKey}\n                            geography={geo}\n                            onMouseEnter={()=>{setDelayHandler(setTimeout(() => {\n\n                              //console.log(geo); \n                              const stateFips = geo.id.substring(0,2);\n                              const configMatched = configs.find(s => s.fips === stateFips);\n\n                              setFips(stateFips);\n                              setStateName(configMatched.name);\n                              //setStateName(geo.id.substring(0,2));\n                              //setStateName(geo.properties.name); \n                              //setTooltipContent()                            \n                            }, 300))\n                            }}\n\n\n\n                            onMouseLeave={()=>{\n                              clearTimeout(delayHandler);\n                              setTooltipContent(\"\")\n                            }}\n                            onClick={()=>{\n                              history.push(\"/\"+geo.id.substring(0,2)+\"\");\n                            }}\n\n                            \n                            fill={fips===geo.id.substring(0,2)?colorHighlight:\n                            ((colorScale && data[geo.id] && (data[geo.id][metric]) > 0)?\n                                colorScale[data[geo.id][metric]]: \n                                (colorScale && data[geo.id] && data[geo.id][metric] === 0)?\n                                  '#e1dce2':'#FFFFFF')}\n                            \n                          />\n                        ))}\n                        <MapLabels geographies={geographies} stateLabels={stateLabels} />\n                      </svg>\n                    }\n                  </Geographies>\n                  \n\n                </ComposableMap>\n                \n                <Grid.Row style={{paddingTop: \"11px\"}}>\n                    <small style={{fontWeight: 300}}>\n                    <em>Daily Cases</em> is the average number of new positive cases for COVID-19 infection over the last seven days. <br/>\n                    <em>Daily Deaths</em> is the average number of new deaths due to confirmed or presumed COVID-19 infection over the last seven days. <br/>\n                    For a complete table of variable defintion, click <a href=\"https://covid19.emory.edu/data-sources\" target=\"_blank\"> here. </a>\n                    </small>\n                </Grid.Row>\n              </Grid.Column>\n              <Grid.Column width={7} style ={{paddingLeft: 0}}>\n                <Header as='h2' style={{fontWeight: 400}}>\n                  <Header.Content style={{width : 550}}>\n                    A Snapshot of Health Disparities in <span style={{color: colorHighlight}}>{stateName}</span>\n                    <Header.Subheader style={{fontWeight: 300}}>\n                      Counties with higher proportions of African American residents tend to have higher rates of death from COVID-19. \n                    </Header.Subheader>\n                    <Header.Subheader style={{fontWeight: 300}}>\n                      Click on the map to explore your state and county.\n                    </Header.Subheader>\n                  </Header.Content>\n                </Header>\n                <Grid>\n                  <Grid.Row>\n                    <VictoryChart\n                      width={500}\n                      height={400}\n                      scale={{y: 'log'}}\n                      padding={{left: 65, right: 30, top: 50, bottom: 50}}>\n                      <VictoryLegend\n                        x={10} y={10}\n                        orientation=\"horizontal\"\n                        colorScale={[\"#bdbfc1\", colorHighlight]}\n                        data ={[\n                          {name: ('Other counties in '+ 'US')}, {name: 'Counties in '+stateName}\n                          ]}\n                      />\n                      <VictoryScatter\n                        sortKey={(d) => d.fips.substring(0,2)===fips}\n                        style={{ data: { fill: ({datum}) => datum.fips.substring(0,2)===fips?\"#f2a900\":\"#bdbfc1\",\n                                 fillOpacity: ({datum}) => datum.fips.substring(0,2)===fips?1.0:0.5} }}\n                        data={dataFltrd}\n                        size={4}\n                        x='black'\n                        y='covidmortalityfig'\n                      />\n                      <VictoryAxis label={'% African American'}/>\n                      <VictoryAxis dependentAxis \n                        label={'COVID-19 Deaths / 100k (log-scale)'} \n                        style={{ axisLabel: {padding: 40} }} \n                        tickCount={5}\n                        tickFormat={(y) => (Math.round(y*100)/100)}/>\n                    </VictoryChart>\n                  </Grid.Row>\n                  <Grid.Row style={{paddingTop: 0, paddingLeft: 10}}>\n                    <small style={{fontWeight: 300}}>\n                    Data last updated: {date}, updated every week<br/>\n                    The chart does not contain those counties with less than 10,000 population and less than 5% African American.\n                    </small>\n                  </Grid.Row>\n                </Grid>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <Notes />\n        </Container>\n        <ReactTooltip > <font size=\"+2\"><b >{stateName}</b> </font> <br/> <b> Daily Cases</b>: {numberWithCommas(dataState[fips]['mean7daycases'].toFixed(0))} <br/> <b> Daily Deaths</b>: {numberWithCommas(dataState[fips]['mean7daydeaths'].toFixed(0))} <br/> <b>Click for county-level data.</b> </ReactTooltip>\n      </div>\n      );\n  } else {\n    return <Loader active inline='centered' />\n  }\n}","import React, { useEffect, useState } from 'react'\nimport { Container, Dropdown, Grid, Breadcrumb, Header, Loader, Divider } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport { VictoryChart, \n  VictoryContainer,\n  VictoryGroup, \n  VictoryBar, \n  VictoryTheme, \n  VictoryAxis, \n  VictoryLegend,\n  VictoryLine,\n  VictoryLabel,\n  VictoryArea,\n  VictoryTooltip,\n  VictoryVoronoiContainer\n} from 'victory';\n\nimport { useParams, useHistory } from 'react-router-dom';\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\nimport _ from 'lodash';\nimport { scaleQuantile } from \"d3-scale\";\nimport fips2county from './fips2county.json'\nimport stateOptions from \"./stateOptions.json\";\n\n\n\nimport configs from \"./state_config.json\";\n\nfunction numberWithCommas(x) {\n    x = x.toString();\n    var pattern = /(-?\\d+)(\\d{3})/;\n    while (pattern.test(x))\n        x = x.replace(pattern, \"$1,$2\");\n    return x;\n}\n\n\nconst colorPalette = [\n        \"#e1dce2\",\n        \"#d3b6cd\",\n        \"#bf88b5\", \n        \"#af5194\", \n        \"#99528c\", \n        \"#633c70\", \n      ];\nconst countyColor = '#f2a900';\nconst stateColor = '#b2b3b3';\nconst nationColor = '#d9d9d7';\n\n\n\nfunction BarChart(props) {\n  const colors = {\"nation\": nationColor, \n                  \"state\": stateColor, \n                  \"county\": countyColor};\n  if (props.countyFips !== \"_nation\" && props.stateFips !== \"_nation\") {\n  return (\n    <VictoryChart\n      theme={VictoryTheme.material}\n      width={200}\n      height={90}       \n      domainPadding={10}\n      scale={{y: props.ylog?'log':'linear'}}\n      minDomain={{y: props.ylog?1:0}}\n      padding={{left: 55, right: 20, top: 20, bottom: 20}}\n      containerComponent={<VictoryContainer responsive={false}/>}\n    >\n      <VictoryLabel text={props.title} x={100} y={10} textAnchor=\"middle\" style={{fontSize: 12}}/>\n      <VictoryAxis style={{tickLabels: {fontSize: 10}}} />\n      <VictoryAxis dependentAxis style={{tickLabels: {fontSize: 8, padding: 1}}}/>\n      <VictoryBar\n        horizontal\n        barRatio={0.8}\n        labels={({ datum }) => (Math.round(datum.value*100)/100)}\n        data={[{key: 'nation', 'value': props.data['_nation'][props.var] || 0},\n              {key: 'state', 'value': props.data[props.stateFips][props.var]>0?props.data[props.stateFips][props.var] : 0},\n              {key: 'county', 'value': props.data[props.stateFips+props.countyFips][props.var] > 0? props.data[props.stateFips+props.countyFips][props.var]:  0}]}\n        labelComponent={<VictoryLabel dx={5} style={{ fontSize: 10, fill: ({datum}) => colors[datum.key] }}/>}\n        style={{\n          data: {\n            fill: ({ datum }) => colors[datum.key]\n          }\n        }}\n        x=\"key\"\n        y=\"value\"\n      />\n    </VictoryChart>);\n  }\n\n  return (\n\n    \n\n    <VictoryChart\n      theme={VictoryTheme.material}\n      width={280}\n      height={90}       \n      domainPadding={10}\n      scale={{y: props.ylog?'log':'linear'}}\n      minDomain={{y: props.ylog?1:0}}\n      padding={{left: 70, right: 30, top: 20, bottom: 30}}\n      containerComponent={<VictoryContainer responsive={false}/>}\n    >\n      <VictoryLabel text={props.title} x={140} y={10} textAnchor=\"middle\" style={{fontSize: 12}}/>\n      <VictoryAxis style={{tickLabels: {fontSize: 10}}} />\n      <VictoryAxis dependentAxis style={{tickLabels: {fontSize: 8, padding: 1}}}/>\n      <VictoryBar\n        horizontal\n        barRatio={0.8}\n        labels={({ datum }) => (Math.round(datum.value*100)/100)}\n        data={[{key: 'nation', 'value': props.data['_nation'][props.var] || 0}]}\n        labelComponent={<VictoryLabel dx={5} style={{fontSize: 10, fill: ({datum}) => colors[datum.key] }}/>}\n        style={{\n          data: {\n            fill: ({ datum }) => colors[datum.key]\n          }\n        }}\n        x=\"key\"\n        y=\"value\"\n      />\n    </VictoryChart>\n\n    \n    );\n  \n}\n\nexport default function StateMap(props) {\n\n  let {stateFips} = useParams();\n  const [config, setConfig] = useState();\n  const [stateName, setStateName] = useState('');\n  const [countyFips, setCountyFips] = useState('');\n  const [countyName, setCountyName] = useState('{County}');\n  const history = useHistory();\n  const [data, setData] = useState();\n  const [dataTS, setDataTS] = useState();\n  const [dataRD, setDataRD] = useState();\n  const [colorScale, setColorScale] = useState();\n  const [tooltipContent, setTooltipContent] = useState('');\n\n  const [legendMax, setLegendMax] = useState([]);\n  const [legendMin, setLegendMin] = useState([]);\n  const [legendSplit, setLegendSplit] = useState([]);\n\n  const [caseRate, setCaseRate] = useState();\n  const [percentChangeCases, setPercentChangeCases] = useState();\n\n  const [mortality, setMortality] = useState();\n  const [percentChangeMortality, setPercentChangeMortality] = useState();\n\n  const [dataHospTestTS, setDataHospTestTS] = useState();\n  const [hospRate, setHospRate] = useState();\n  const [pctChangeHospRate, setPctChangeHospRate] = useState();\n  const [testingRate, setTestingRate] = useState();\n  const [pctChangeTestingRate, setPctChangeTestingRate] = useState();\n\n  const [metric, setMetric] = useState('mean7daycases');\n  const [metricOptions, setMetricOptions] = useState('mean7daycases');\n  const [metricName, setMetricName] = useState('Average Daily COVID-19 Cases');\n\n  const [varMap, setVarMap] = useState({});\n  const [delayHandler, setDelayHandler] = useState();\n\n\n  useEffect(()=>{\n    fetch('/data/rawdata/variable_mapping.json').then(res => res.json())\n      .then(x => {\n        setVarMap(x);\n        setMetricOptions(_.filter(_.map(x, d=> {\n          return {key: d.id, value: d.variable, text: d.name, group: d.group};\n        }), d => (d.text !== \"Urban-Rural Status\" && d.group === \"outcomes\")));\n      });\n  }, []);\n\n  useEffect(()=>{\n    if (metric) {\n\n    \n    const configMatched = configs.find(s => s.fips === stateFips);\n\n    if (!configMatched){\n      history.push('/');\n    }else{\n\n      setConfig(configMatched);\n\n      setStateName(configMatched.name);\n\n      fetch('/data/data.json').then(res => res.json())\n        .then(x => {\n          setData(x);\n\n          const cs = scaleQuantile()\n          .domain(_.map(_.filter(_.map(x, (d, k) => {\n            d.fips = k\n            return d}), \n            d => (\n                d[metric] >= 0 &&\n                d.fips.length === 5)),\n            d=> d[metric]))\n          .range(colorPalette);\n\n          let scaleMap = {}\n          _.each(_.filter(_.map(x, (d, k) => {\n            d.fips = k\n            return d}), \n            d => (\n                d[metric] >= 0 &&\n                d.fips.length === 5))\n                , d=>{\n            scaleMap[d[metric]] = cs(d[metric])});\n\n          setColorScale(scaleMap);\n          var max = 0\n          var min = 100\n          _.each(x, d=> { \n            if (d[metric] > max && d.fips.length === 5) {\n              max = d[metric]\n            } else if (d.fips.length === 5 && d[metric] < min && d[metric] >= 0){\n              min = d[metric]\n            }\n          });\n\n          if (max > 999) {\n            max = (max/1000).toFixed(0) + \"K\";\n            setLegendMax(max);\n          }else{\n            setLegendMax(max.toFixed(0));\n\n          }\n          setLegendMin(min.toFixed(0));\n\n          var split = scaleQuantile()\n          .domain(_.map(_.filter(_.map(x, (d, k) => {\n            d.fips = k\n            return d}), \n            d => (\n                d[metric] >= 0 &&\n                d.fips.length === 5)),\n            d=> d[metric]))\n          .range(colorPalette);\n\n          setLegendSplit(split.quantiles());\n        });\n      \n      fetch('/data/timeseries'+stateFips+'.json').then(res => res.json())\n        .then(x => {\n\n          let countyMost = '';\n          let mortalityMA = 0;\n          let caseRate = 0.1;\n          let mortality = 0;\n          let t = 0;\n          let percentChangeCase = 0;\n          let percentChangeMortality = 0;\n\n          let hospRate = 0.1;\n          let testingRate = 0.1;\n          let percentChangeHospitalizationRate = 0;\n          let percentChangeTestingRate = 0;\n          _.each(x, (v, k)=>{\n            if (k.length===5 && v.length > 0 && v[v.length-1].mortalityMA > mortalityMA){\n              countyMost = k.substring(2, 5);\n              mortalityMA = v[v.length-1].mortalityMA;\n            }\n            if (k.length===2 && v.length > 0 && v[v.length-1].t > t){\n              percentChangeCase = (v[v.length-1].caseRateMA - v[v.length-2].caseRateMA)/v[v.length-2].caseRateMA;\n              caseRate = v[v.length-1].caseRate;\n\n              percentChangeMortality = (v[v.length-1].mortalityMA - v[v.length-2].mortalityMA)/v[v.length-2].mortalityMA;\n              mortality = v[v.length-1].mortality;\n\n              percentChangeHospitalizationRate = (v[v.length-1].hospitalizationRate - v[v.length-2].hospitalizationRate)/v[v.length-2].hospitalizationRate;\n              hospRate = v[v.length-1].hospitalizationRate;\n\n              percentChangeTestingRate = (v[v.length-1].testingRate - v[v.length-2].testingRate)/v[v.length-2].testingRate;\n              testingRate = v[v.length-1].testingRate;\n            }\n          });\n\n\n          if ((percentChangeCase*100).toFixed(0) > 0) {\n            setPercentChangeCases(\"+\" + (percentChangeCase*100).toFixed(0) + \"%\");\n          }else if((percentChangeCase*100).toFixed(0) < 0){\n            setPercentChangeCases((percentChangeCase*100).toFixed(0) + \"%\");\n          }else if(isNaN((percentChangeCase*100).toFixed(0))){\n            setPercentChangeCases(\"None Reported\");\n          }else{\n            setPercentChangeCases(\"\" + (percentChangeCase*100).toFixed(0) + \"%\");\n          }\n\n          if ((percentChangeMortality*100).toFixed(0) > 0) {\n            setPercentChangeMortality(\"+\" + (percentChangeMortality*100).toFixed(0) + \"%\");\n          }else if ((percentChangeMortality*100).toFixed(0) < 0) {\n            setPercentChangeMortality((percentChangeMortality*100).toFixed(0) + \"%\");\n          }else if(isNaN((percentChangeMortality*100).toFixed(0))){\n            setPercentChangeMortality(\"None Reported\");\n          }else{\n            setPercentChangeMortality(\"\" + (percentChangeMortality*100).toFixed(0) + \"%\");\n\n          }\n\n          if ((percentChangeHospitalizationRate*100).toFixed(0) > 0) {\n            setPctChangeHospRate(\"+\" + (percentChangeHospitalizationRate*100).toFixed(0) + \"%\");\n          }else if((percentChangeHospitalizationRate*100).toFixed(0) < 0){\n            setPctChangeHospRate((percentChangeHospitalizationRate*100).toFixed(0) + \"%\");\n          }else if(isNaN((percentChangeHospitalizationRate*100).toFixed(0))){\n            setPctChangeHospRate(\"None Reported\");\n          }else{\n            setPctChangeHospRate(\"\" + (percentChangeHospitalizationRate*100).toFixed(0) + \"%\");\n          }\n\n          if ((percentChangeTestingRate*100).toFixed(0) > 0) {\n            setPctChangeTestingRate(\"+\" + (percentChangeTestingRate*100).toFixed(0) + \"%\");\n          }else if ((percentChangeTestingRate*100).toFixed(0) < 0) {\n            setPctChangeTestingRate((percentChangeTestingRate*100).toFixed(0) + \"%\");\n          }else if(isNaN((percentChangeTestingRate*100).toFixed(0))){\n            setPctChangeTestingRate(\"None Reported\");\n          }else{\n            setPctChangeTestingRate(\"\" + (percentChangeTestingRate*100).toFixed(0) + \"%\");\n\n          }\n\n          setPctChangeHospRate(\"Coming soon...\");\n          setHospRate(\"\");\n                    //setHospRate(numberWithCommas(hospRate.toFixed(0)));\n\n          setTestingRate(numberWithCommas(testingRate.toFixed(0)));\n          setCaseRate(numberWithCommas(caseRate.toFixed(0)));\n          setMortality(numberWithCommas(mortality.toFixed(0)));\n\n          setCountyFips(countyMost);\n          setCountyName(fips2county[stateFips+countyMost]);\n          \n\n          setDataTS(x);\n        });\n\n  fetch('/data/staticracedata'+stateFips+'.json').then(res => res.json())\n        .then(x => {\n          setDataRD(x);\n        });\n\n      }\n    }\n  }, [stateFips, metric]);\n\n\n  if (data && dataTS && dataRD) {\n    console.log(stateFips);\n  return (\n      <div>\n        <AppBar menu='countyReport'/>\n        <Container style={{marginTop: '6em', minWidth: '1260px'}}>\n          {config &&\n          <div>\n          <Breadcrumb>\n            <Breadcrumb.Section link onClick={() => history.push('/')}>United States</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n            <Breadcrumb.Section active>{stateName}</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n          </Breadcrumb>\n          <Divider hidden/>\n\n          <Divider horizontal style={{fontWeight: 400, color: 'black', fontSize: '2.0em', paddingBottom: 10}}> Covid-19 Outcomes in {stateName} </Divider>\n\n\n          <Grid columns={15}>\n\n          <Grid.Row columns={5} style={{width: 252, padding: 0, paddingTop: '2em', paddingBottom: \"0\"}}>\n\n            <VictoryChart theme={VictoryTheme.material} \n                        minDomain={{ x: dataTS[\"_nation\"][dataTS[\"_nation\"].length-15].t }}\n                        width={252}\n                        height={180}       \n                        padding={{left: 11, right: -1, top: 60, bottom: -0.9}}\n                        containerComponent={<VictoryContainer responsive={false}/>}>\n                        <VictoryLabel text=\"Daily Cases\" x={115} y={10} textAnchor=\"middle\" style={{fontSize: 21}}/>\n                        \n                        <VictoryAxis\n                          tickValues={[\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3)*2 - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3) - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length-1].t]}                        \n                          style={{tickLabels: {fontSize: 10}}} \n                          tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}/>\n                        \n                        <VictoryGroup \n                          colorScale={[stateColor]}\n                        >\n\n                        <VictoryLine data={stateFips !== \"_nation\"? dataTS[stateFips] : dataTS[\"_\"]}\n                            x='t' y='caseRateMA'\n                            />\n\n                        </VictoryGroup>\n                        <VictoryArea\n                          style={{ data: {  fill: percentChangeCases.includes(\"+\")? \"#C0C0C0\": percentChangeCases.includes(\"-\")? \"#C0C0C0\" : \"#C0C0C0\" , fillOpacity: 0.1} }}\n                          data={stateFips !== \"_nation\"? dataTS[stateFips] : dataTS[\"_\"]}\n                          x= 't' y = 'caseRateMA'\n\n                        />\n\n                        <VictoryLabel text= {caseRate} x={130} y={110} textAnchor=\"middle\" style={{fontSize: 21}}/>\n                        <VictoryLabel text= {percentChangeCases}  x={130} y={130} textAnchor=\"middle\" style={{fontSize: 21}}/>\n\n                        \n            </VictoryChart>\n            \n\n            <VictoryChart theme={VictoryTheme.material}\n                        minDomain={{ x: dataTS[\"_nation\"][dataTS[\"_nation\"].length-15].t }}\n                        width={252}\n                        height={180}       \n                        padding={{left: 11, right: -1, top: 60, bottom: -0.9}}\n                        containerComponent={<VictoryContainer responsive={false}/>}>\n                        <VictoryLabel text=\"Daily Deaths\" x={115} y={10} textAnchor=\"middle\" style={{fontSize: 21}}/>\n                        \n                        <VictoryAxis\n                          tickValues={[\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3)*2 - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3) - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length-1].t]}                        \n                          style={{tickLabels: {fontSize: 10}}} \n                          tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}/>\n                        \n                        <VictoryGroup \n                          colorScale={[stateColor]}\n                        >\n\n                          <VictoryLine data={stateFips !== \"_nation\"? dataTS[stateFips] : dataTS[\"_\"]}\n                            x='t' y='mortalityMA'\n                            />\n\n                        </VictoryGroup>\n\n                        <VictoryArea\n                          style={{ data: { fill: percentChangeMortality.includes(\"+\")? \"#C0C0C0\": (percentChangeMortality.includes(\"-\")? \"#C0C0C0\" : \"##C0C0C0\"), fillOpacity: 0.1} }}\n                          data={stateFips !== \"_nation\"? dataTS[stateFips] : dataTS[\"_\"]}\n                          x= 't' y = 'mortalityMA'\n\n                        />\n                        <VictoryLabel text= {mortality} x={130} y={110} textAnchor=\"middle\" style={{fontSize: 21}}/>\n                        <VictoryLabel text= {percentChangeMortality} x={130} y={130} textAnchor=\"middle\" style={{fontSize: 21}}/>\n\n            </VictoryChart>\n\n            <VictoryChart theme={VictoryTheme.material}\n                        minDomain={{ x: dataTS[\"_nation\"][dataTS[\"_nation\"].length-15].t }}\n                        width={252}\n                        height={180}       \n                        padding={{left: 11, right: -1, top: 60, bottom: -0.9}}\n                        containerComponent={<VictoryContainer responsive={false}/>}>\n                        <VictoryLabel text=\"Hospitalization Rate\" x={115} y={10} textAnchor=\"middle\" style={{fontSize: 21}}/>\n                        \n                        <VictoryAxis\n                          tickValues={[\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3)*2 - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3) - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length-1].t]}                        \n                          style={{tickLabels: {fontSize: 10}}} \n                          tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}/>\n                        \n                        <VictoryGroup \n                          colorScale={[stateColor]}\n                        >\n\n                          <VictoryLine data={stateFips !== \"_nation\"? dataTS[stateFips] : dataTS[\"_\"]}\n                            x='t' y='hospitalizationRate'\n                            />\n\n                        </VictoryGroup>\n\n                        <VictoryArea\n                          style={{ data: { fill: pctChangeHospRate.includes(\"+\")? \"#C0C0C0\": (pctChangeHospRate.includes(\"-\")? \"#C0C0C0\" : \"##C0C0C0\"), fillOpacity: 0.1} }}\n                          data={stateFips !== \"_nation\"? dataTS[stateFips] : dataTS[\"_\"]}\n                          x= 't' y = ''\n\n                        />\n                        <VictoryLabel text= {hospRate} x={130} y={110} textAnchor=\"middle\" style={{fontSize: 21}}/>\n                        <VictoryLabel text= {pctChangeHospRate} x={130} y={130} textAnchor=\"middle\" style={{fontSize: 21}}/>\n\n            </VictoryChart>\n\n            <VictoryChart theme={VictoryTheme.material}\n                        minDomain={{ x: dataTS[\"_nation\"][dataTS[\"_nation\"].length-15].t }}\n                        width={252}\n                        height={180}       \n                        padding={{left: 11, right: -1, top: 60, bottom: -0.9}}\n                        containerComponent={<VictoryContainer responsive={false}/>}>\n                        <VictoryLabel text=\"Testing Rate\" x={115} y={10} textAnchor=\"middle\" style={{fontSize: 21}}/>\n\n                        \n                        <VictoryAxis\n                          tickValues={[\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3)*2 - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3) - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length-1].t]}                        \n                          style={{tickLabels: {fontSize: 10}}} \n                          tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}/>\n                        \n                        <VictoryGroup \n                          colorScale={[stateColor]}\n                        >\n\n                          <VictoryLine data={stateFips !== \"_nation\"? dataTS[stateFips] : dataTS[\"_\"]}\n                            x='t' y='testingRate'\n                            />\n\n                        </VictoryGroup>\n\n                        <VictoryArea\n                          style={{ data: { fill: pctChangeTestingRate.includes(\"+\")? \"#C0C0C0\": (pctChangeTestingRate.includes(\"-\")? \"#C0C0C0\" : \"##C0C0C0\"), fillOpacity: 0.1} }}\n                          data={stateFips !== \"_nation\"? dataTS[stateFips] : dataTS[\"_\"]}\n                          x= 't' y = 'testingRate'\n\n                        />\n                        <VictoryLabel text= {testingRate} x={130} y={110} textAnchor=\"middle\" style={{fontSize: 21}}/>\n                        <VictoryLabel text= {pctChangeTestingRate} x={130} y={130} textAnchor=\"middle\" style={{fontSize: 21}}/>\n\n            </VictoryChart>\n\n\n            <VictoryChart\n                        theme={VictoryTheme.material} \n                        width={252}\n                        height={180}        \n                        scale={{y: props.ylog?'log':'linear'}}\n                        minDomain={{y: props.ylog?1:0}}\n                        domainPadding={10}\n                        padding={{left: 115, right: 10, top: 80, bottom: -0.9}}\n                        containerComponent={<VictoryContainer responsive={false}/>}\n                      >\n                        <VictoryLabel text=\"Cases per 100,000\" x={115} y={10} textAnchor=\"middle\" style={{fontSize: 21}}/>\n                        <VictoryLabel text=\"persons by race\" x={115} y={30} textAnchor=\"middle\" style={{fontSize: 21}}/>\n\n                        <VictoryAxis \n                            style={{axis: {stroke: \"transparent\"}, tickLabels: {fontSize: 10}}}\n\n                         />\n                        <VictoryAxis dependentAxis \n                            tickValues = {[\n                              dataRD[stateFips][0]['All Races Combined'][0]['caseRate'],\n                              dataRD[stateFips][1]['African American'][0]['caseRate'],\n                              dataRD[stateFips][2]['White'][0]['caseRate']\n                            \n                            \n                                  \n                                    ]}\n\n                        />\n                        <VictoryBar\n                          horizontal\n                          barRatio={0.8}\n                          labels={({ datum }) => numberWithCommas((Math.round(datum.value*dataRD[stateFips][0]['All Races Combined'][0]['caseRate']))) !== 0?\n                                                  numberWithCommas((Math.round(datum.value*dataRD[stateFips][0]['All Races Combined'][0]['caseRate']))): \"Not Available\"}\n                          data={[\n                            {key: \"White\", 'value': dataRD[stateFips][2]['White'][0]['caseRate']/dataRD[stateFips][0]['All Races Combined'][0]['caseRate'] || 0},\n                            {key: \"African American\", 'value': dataRD[stateFips][1]['African American'][0]['caseRate']/dataRD[stateFips][0]['All Races Combined'][0]['caseRate'] || 0},\n                            {key: \"All Races Combined\", 'value': dataRD[stateFips][0]['All Races Combined'][0]['caseRate']/dataRD[stateFips][0]['All Races Combined'][0]['caseRate'] || 0}\n                                  \n                                    ]}\n                          labelComponent={<VictoryLabel dx = {0} style={{fontSize: 12, fill: ({datum}) => '#000000' }}/>}\n                          style={{\n                            data: {\n                              fill: ({ datum }) => '#b2b3b3'\n                            }\n                          }}\n                          x=\"key\"\n                          y=\"value\"\n                        />\n            </VictoryChart>\n\n\n            </Grid.Row>\n\n            <Grid.Row columns = {5} style={{paddingBottom: 0, paddingTop: 0, paddingLeft: 10, paddingRight: 0}}>\n              \n                <Grid.Column style={{padding: 0, paddingLeft: 0, lineHeight: '1em'}}>\n                  <small style={{fontWeight: 300}}>\n                    <i>Daily cases</i>: Daily new COVID-19 cases <br/> \n                    (7-day rolling average) <br/>\n                    <i>Data source</i>: New York Times <br/>\n                    </small>\n                </Grid.Column>\n                <Grid.Column style={{left: -3, padding: 0, paddingLeft: 0, lineHeight: '1em'}}>\n                  <small style={{fontWeight: 300}}>\n                    <i>Daily Deaths</i>: Daily new COVID-19 Death <br/> \n                    (7-day rolling average) <br/>\n                    <i>Data source</i>: New York Times <br/>\n                    </small>\n                </Grid.Column>\n                <Grid.Column style={{left: -7, padding: 0, paddingLeft: 0, paddingRight: 0, lineHeight: '1em'}}>\n                  <small style={{fontWeight: 300}}>\n                    <i>Hospitalizations</i>: COVID-19 hospitalizations per 100,000 population<br/>\n                    <i>Data source</i>: Johns Hopkins University <br/>\n                    </small>\n                </Grid.Column>\n                <Grid.Column style={{left: -10, padding: 0, paddingLeft: 0, lineHeight: '1em'}}>\n                  <small style={{fontWeight: 300}}>\n                    <i>Testing rate</i>: COVID-19 tests per <br/>\n                    100,000 population <br/>\n                    <i>Data Source</i>: Johns Hopkins University <br/>\n                    </small>\n                </Grid.Column>\n                <Grid.Column style={{left: -15, padding: 0, paddingLeft: 0, lineHeight: '1em'}}>\n                  <small style={{fontWeight: 300}}>\n                    <i>Rates</i>: Cases per 100,000, <br/> \n                    among those with race information available <br/>\n                    <i>Data source</i>: <a href=\"https://covidtracking.com/race\" target=\"_blank\"> The COVID Racial Data Tracker </a> <br/> \n\n                    </small>\n                </Grid.Column>\n              \n            </Grid.Row>\n\n            <Grid.Row style={{paddingTop: 20, paddingBottom: 50, paddingLeft: 10}}>\n                    <small style={{fontWeight: 300}}>\n                      All percent changes for a 24-Hour period\n                    </small>\n            </Grid.Row>\n\n          </Grid>\n         <Divider horizontal style={{fontWeight: 400, color: 'black', fontSize: '2.0em', paddingBottom: 10}}> COVID-19 County Outcomes </Divider>\n\n                      \n\n          <Grid columns={16}>\n            <Grid.Row>\n              <Grid.Column width={5}>\n\n                <Dropdown\n                        icon=''\n\n                        style={{background: '#fff', \n                                fontSize: 16,\n                                fontWeight: 400, \n                                theme: '#000000',\n                                width: '370px',\n                                top: '0px',\n                                left: '0px',\n                                text: \"Select\",\n                                borderTop: 'none',\n                                borderLeft: '1px solid #FFFFFF',\n                                borderRight: 'none', \n                                borderBottom: '0.5px solid #bdbfc1',\n                                borderRadius: 0,\n                                minHeight: '1.0em',\n                                paddingBottom: '0.0em',\n                                paddingRight: 0}}\n                        placeholder= \"Average Daily COVID-19 Cases\"\n                        inline\n                        search\n                        pointing = 'top'\n                        options={metricOptions}\n                        onChange={(e, { value }) => {\n                          setMetric(value);\n                          setMetricName(varMap[value]['name']);\n                        }}\n\n                        \n                      />\n                \n                <svg width=\"400\" height=\"90\">\n                  <text x={0} y={70} style={{fontSize: '0.8em'}}>Low</text>\n                  <text x={20 * (colorPalette.length - 1)} y={70} style={{fontSize: '0.8em'}}>High</text>\n\n                  {_.map(colorPalette, (color, i) => {\n                    return <rect key={i} x={20*i} y={40} width=\"20\" height=\"20\" style={{fill: color, strokeWidth:1, stroke: color}}/>                    \n                  })} \n\n                  <rect x={145} y={40} width=\"20\" height=\"20\" style={{fill: \"#FFFFFF\", strokeWidth:0.5, stroke: \"#000000\"}}/>                    \n                  <text x={167} y={50} style={{fontSize: '0.7em'}}> None </text>\n                  <text x={167} y={59} style={{fontSize: '0.7em'}}> Reported </text>\n\n                  {_.map(legendSplit, (splitpoint, i) => {\n                    if(legendSplit[i] < 1){\n                      return <text key = {i} x={20 + 20 * (i)} y={37} style={{fontSize: '0.7em'}}> {legendSplit[i].toFixed(1)}</text>                    \n                    }\n                    return <text key = {i} x={20 + 20 * (i)} y={37} style={{fontSize: '0.7em'}}> {legendSplit[i].toFixed(0)}</text>                    \n                  })} \n                  <text x={0} y={37} style={{fontSize: '0.7em'}}> {legendMin} </text>\n                  <text x={120} y={37} style={{fontSize: '0.7em'}}>{legendMax}</text>\n\n                  <text x={250} y={49} style={{fontSize: '0.7em'}}> Double click on a county</text>\n                  <text x={250} y={59} style={{fontSize: '0.7em'}}> below for a detailed report. </text>\n\n\n                </svg>\n                <ComposableMap projection=\"geoAlbersUsa\" \n                  projectionConfig={{scale:`${config.scale*0.7}`}} \n                  width={400} \n                  height={500} \n                  strokeWidth = {0.1}\n                  stroke = 'black'\n                  data-tip=\"\"\n                  offsetX={config.offsetX}\n                  offsetY={config.offsetY}>\n                  <Geographies geography={config.url}>\n                    {({geographies}) => geographies.map(geo =>\n                      <Geography \n                        key={geo.rsmKey} \n                        geography={geo} \n                        onClick={()=>{\n                          history.push(\"/\" + stateFips + \"/\" +geo.properties.COUNTYFP);\n                        }}\n                        onMouseEnter={()=>{setDelayHandler(setTimeout(() => {\n                            setCountyFips(geo.properties.COUNTYFP);\n                            setCountyName(fips2county[stateFips + geo.properties.COUNTYFP]);\n                            // setTooltipContent('Click to see more county data');\n                          }, 300))\n                        }}\n                        onMouseLeave={()=>{\n                          clearTimeout(delayHandler);\n\n                          setTooltipContent(\"\")\n                        }}\n                        \n                        fill={countyFips===geo.properties.COUNTYFP?countyColor:\n                            ((colorScale && data[stateFips+geo.properties.COUNTYFP] && (data[stateFips+geo.properties.COUNTYFP][metric]) > 0)?\n                                colorScale[data[stateFips+geo.properties.COUNTYFP][metric]]: \n                                (colorScale && data[stateFips+geo.properties.COUNTYFP] && data[stateFips+geo.properties.COUNTYFP][metric] === 0)?\n                                  '#e1dce2':'#FFFFFF')}\n                        />\n                    )}\n                  </Geographies>\n                </ComposableMap>\n              </Grid.Column>\n              <Grid.Column width={5} style={{padding: 0, paddingLeft: 40}}>\n                <Header as='h2' style={{fontWeight: 400, width: 420}}>\n                  <Header.Content style={{fontSize: 20}}>\n                    How Does <span style={{color: countyColor, fontSize: 20}}>{countyName}</span> Compare?\n                    <Header.Subheader style={{fontWeight: 300, width: 400, fontSize: 14}}>\n                      The number of cases and deaths due to COVID-19 are dynamic. \n                      Cases are declining in many counties and rising in others. \n                      Trends in the case and hospitalization count in the past 14 days are being monitored to determine whether it is safe to reopen a county.\n                    </Header.Subheader>\n                  </Header.Content>\n                </Header>\n                <Grid>\n                  <Grid.Row columns={1} style={{padding: 0, paddingTop: 20, paddingBottom: 0}}>\n                     <text x={0} y={20} style={{fontSize: '1.0em', paddingLeft: 15, fontWeight: 400}}>Average Daily COVID-19 Cases /100,000 </text>\n\n                      <VictoryChart theme={VictoryTheme.material} minDomain={{ y: 0 }}\n                        width={330}\n                        height={160}       \n                        padding={{left: 50, right: 30, top: 24, bottom: 30}}\n                        containerComponent={<VictoryVoronoiContainer flyoutStyle={{fill: \"white\"}}/>}\n                        >\n                        <VictoryLegend\n                          x={40} y={5}\n                          orientation=\"horizontal\"\n                          colorScale={[nationColor, stateColor, countyColor]}\n                          data ={[\n                            {name: \"nation\"}, {name: \"state\"}, {name: \"county\"}\n                            ]}\n                        />\n                        <VictoryAxis\n                          tickValues={[\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3)*2 - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3) - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length-1].t]}                        \n                          style={{tickLabels: {fontSize: 10}}} \n                          tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}/>\n                        <VictoryAxis dependentAxis tickCount={5}\n                         style={{tickLabels: {fontSize: 8, padding: 1}}} \n                          tickFormat={(y) => (y<1000?y:(y/1000+'k'))}\n                          />\n                        <VictoryGroup \n                          colorScale={[nationColor, stateColor, countyColor]}\n                        >\n                          <VictoryLine data={dataTS[\"_nation\"]}\n                            x='t' y='caseRateMA'\n                            labels={({ datum }) => `${new Date(datum.t*1000).toLocaleDateString()}: ${datum.caseRateMA.toFixed(1)}`}\n                            labelComponent={<VictoryTooltip flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                            style={{\n                              data: { strokeWidth: ({ active }) => active ? 3 : 2},\n                            }}\n                            />\n                          <VictoryLine data={stateFips !== \"_nation\"? dataTS[stateFips] : dataTS[\"_\"]}\n                            x='t' y='caseRateMA'\n                            labels={({ datum }) => `${new Date(datum.t*1000).toLocaleDateString()}: ${datum.caseRateMA.toFixed(1)}`}\n                            labelComponent={<VictoryTooltip flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                            style={{\n                              data: { strokeWidth: ({ active }) => active ? 3 : 2},\n                            }}\n                            />\n                          <VictoryLine data={dataTS[stateFips+countyFips] && (stateFips !== \"_nation\")?dataTS[stateFips+countyFips]:dataTS[\"99999\"]}\n                            x='t' y='caseRateMA'\n                            labels={({ datum }) => `${new Date(datum.t*1000).toLocaleDateString()}: ${datum.caseRateMA.toFixed(1)}`}\n                            labelComponent={<VictoryTooltip flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                            style={{\n                              data: { strokeWidth: ({ active }) => active ? 3 : 2},\n                            }}\n                            />\n                        </VictoryGroup>\n                      </VictoryChart>\n                    </Grid.Row>\n                  <Grid.Row columns={1} style={{padding: 0, paddingTop: 20, paddingBottom: 0}}>\n                      <text x={0} y={20} style={{fontSize: '1.0em', paddingLeft: 15, fontWeight: 400}}>Average Daily COVID-19 Deaths /100,000 </text>\n\n                      <VictoryChart theme={VictoryTheme.material} minDomain={{ y: 0 }}\n                        width={330}\n                        height={160}       \n                        padding={{left: 50, right: 30, top: 24, bottom: 30}}\n                        containerComponent={<VictoryVoronoiContainer/>}\n                        >\n                        <VictoryLegend\n                          x={40} y={5}\n                          orientation=\"horizontal\"\n                          colorScale={[nationColor, stateColor, countyColor]}\n                          data ={[\n                            {name: \"nation\"}, {name: \"state\"}, {name: \"county\"}\n                            ]}\n                        />\n                        <VictoryAxis\n                          tickValues={[\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3)*2 - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3) - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length-1].t]}                        \n                          style={{tickLabels: {fontSize: 10}}} \n                          tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}/>\n                        <VictoryAxis dependentAxis tickCount={5}\n                         style={{tickLabels: {fontSize: 8, padding: 1}}} \n                          tickFormat={(y) => (y<1000?y:(y/1000+'k'))}\n                          />\n                        <VictoryGroup \n                          colorScale={[nationColor, stateColor, countyColor]}\n                        >\n                          <VictoryLine data={dataTS[\"_nation\"]}\n                            x='t' y='mortalityMA'\n                            labels={({ datum }) => `${new Date(datum.t*1000).toLocaleDateString()}: ${datum.mortalityMA.toFixed(1)}`}\n                            labelComponent={<VictoryTooltip flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                            style={{\n                              data: { strokeWidth: ({ active }) => active ? 3 : 2},\n                            }}\n                            />\n                          <VictoryLine data={stateFips !== \"_nation\"? dataTS[stateFips] : dataTS[\"_\"]}\n                            x='t' y='mortalityMA'\n                            labels={({ datum }) => `${new Date(datum.t*1000).toLocaleDateString()}: ${datum.mortalityMA.toFixed(1)}`}\n                            labelComponent={<VictoryTooltip flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                            style={{\n                              data: { strokeWidth: ({ active }) => active ? 3 : 2},\n                            }}\n                            />\n                          <VictoryLine data={dataTS[stateFips+countyFips] && (stateFips !== \"_nation\")?dataTS[stateFips+countyFips]:dataTS[\"99999\"]}\n                            x='t' y='mortalityMA'\n                            labels={({ datum }) => `${new Date(datum.t*1000).toLocaleDateString()}: ${datum.mortalityMA.toFixed(1)}`}\n                            labelComponent={<VictoryTooltip flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                            style={{\n                              data: { strokeWidth: ({ active }) => active ? 3 : 2},\n                            }}\n                            />\n                        </VictoryGroup>\n                      </VictoryChart>\n                  </Grid.Row>\n                </Grid>\n              </Grid.Column>\n              <Grid.Column width={6} style={{padding: 0, paddingLeft: 80}}>\n                <Header as='h2' style={{width:400}}>\n                  <Header.Content style={{fontSize: 20}}>\n                    <br/>\n                    <Header.Subheader style={{fontWeight: 300, width: 400, fontSize: 14}}>\n                    Social, economic, health and environmental factors impact an individual’s risk of infection and COVID-19 severity. \n                    Counties with large groups of vulnerable people may be  disproportionately impacted by COVID-19.\n                    </Header.Subheader>\n                  </Header.Content>\n\n                </Header>\n                <Grid>\n                  <Grid.Row columns={2} style={{padding: 10, width: 400, paddingBottom: 20}}>                    \n                      <BarChart \n                        title=\"% African American\" \n                        var=\"black\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data} />\n                      <BarChart \n                        title=\"% Hispanic or Latino\" \n                        var=\"hispanic\"  \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data} />\n                  </Grid.Row>\n                  <Grid.Row columns={2} style={{padding: 10, width: 400, paddingBottom: 20}}>\n                      <BarChart \n                        title=\"% Obese\" \n                        var=\"obesity\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data} />  \n                      <BarChart \n                        title=\"% Diabetes\" \n                        var=\"diabetes\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data} /> \n                  </Grid.Row>\n                  <Grid.Row columns={2} style={{padding: 10, width: 400, paddingBottom: 20}}>                    \n                      <BarChart \n                        title=\"% in Poverty\" \n                        var=\"poverty\"  \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data} />\n                      <BarChart \n                        title=\"% Uninsured\" \n                        var=\"PCTUI\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data} />\n                  </Grid.Row>\n                  <Grid.Row columns={2} style={{padding: 10, width: 400}}>                    \n                      <BarChart \n                        title=\"% Over 65 y/o\" \n                        var=\"age65over\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data} />\n                      <BarChart \n                        title=\"% in Group Quarters\" \n                        var=\"groupquater\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data} />\n                  </Grid.Row>\n                </Grid>\n              </Grid.Column>\n\n            </Grid.Row>            \n          </Grid>\n          </div>\n        }\n        <Notes />\n      </Container>\n      <ReactTooltip><font size=\"+1\"> <b> {countyName} </b> </font> <br/> Click for a detailed report. </ReactTooltip>\n    </div>\n    );\n  } else{\n    return <Loader active inline='centered' />\n  }\n\n\n\n\n}","import React, { useEffect, useState } from 'react'\nimport { Container, Grid, Breadcrumb, Header, Loader, Statistic, Table, Divider } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport { VictoryChart, \n  VictoryContainer,\n  VictoryGroup, \n  VictoryBar, \n  VictoryTheme, \n  VictoryAxis, \n  VictoryLegend,\n  VictoryLine,\n  VictoryLabel, \n  VictoryScatter,\n  VictoryTooltip,\n  VictoryVoronoiContainer\n} from 'victory';\n\nimport { useParams, useHistory } from 'react-router-dom';\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\nimport fips2county from './fips2county.json'\nimport configs from \"./state_config.json\";\nimport _ from 'lodash';\n\nconst countyColor = '#f2a900';\nconst stateColor = '#b2b3b3';\nconst nationColor = '#d9d9d7';\n\nfunction numberWithCommas(x) {\n    x = x.toString();\n    var pattern = /(-?\\d+)(\\d{3})/;\n    while (pattern.test(x))\n        x = x.replace(pattern, \"$1,$2\");\n    return x;\n}\n\nfunction ScatterChart(props) {\n\n  return (\n    <VictoryChart\n      width={400}\n      height={300}\n      scale={{x: props.xlog?'log':'linear', y: props.ylog?'log':'linear'}}\n      minDomain={{y: props.ylog?1:0}}\n      padding={{left: 80, right: 20, top: 50, bottom: 50}}>\n      {props.showLegend && <VictoryLegend\n        x={10} y={10}\n        orientation=\"horizontal\"\n        colorScale={[stateColor, countyColor]}\n        data ={[\n          {name: ('Other counties in '+ props.stateName)}, {name: props.countyName}\n          ]}\n      />}\n      <VictoryScatter\n        data={_.filter(_.map(props.data, (d, k)=>{d.fips=k; return d;}), (d)=> (\n                 d.fips.length===5 &&\n                 d.fips.substring(0,2)===props.stateFips &&\n                 d[props.x] >= 0 && d[props.y] >= 0))}\n        sortKey={(d) => d.fips===(props.stateFips + props.countyFips)}\n        style={{ data: { fill: ({datum}) => datum.fips===(props.stateFips + props.countyFips)?countyColor:stateColor,\n                 fillOpacity: ({datum}) => datum.fips===(props.stateFips + props.countyFips)?1.0:0.7} }}\n        size={4}\n        x={props.x}\n        y={props.y}\n        labels={({ datum }) => `${datum[props.y].toFixed(1)}`}\n        labelComponent={<VictoryTooltip cornerRadius={4} flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n\n      />\n      <VictoryAxis label={props.varMap[props.x]?props.varMap[props.x].name:props.x}\n        tickCount={4}\n        tickFormat={(y) => (props.rescaleX?(Math.round(y/1000)+'k'):(Math.round(y*100)/100))} />\n      <VictoryAxis dependentAxis label={props.varMap[props.y]?props.varMap[props.y].name:props.y} \n        style={{ axisLabel: {padding: 40} }}\n        tickCount={5}\n        tickFormat={(y) => (Math.round(y*100)/100)} />\n    </VictoryChart>);\n\n}\n\nfunction BarChart(props) {\n  const colors = {\"nation\": nationColor, \n                  \"state\": stateColor, \n                  \"county\": countyColor};\n  return (\n    <VictoryChart\n      theme={VictoryTheme.material}\n      width={props.width || 560}\n      height={140}       \n      domainPadding={10}\n      scale={{y: props.ylog?'log':'linear'}}\n      minDomain={{y: props.ylog?1:0}}\n      padding={{left: 150, right: 50, top: 40, bottom: 50}}\n      containerComponent={<VictoryContainer responsive={false}/>}\n    >\n      <VictoryLabel text={props.title} x={(props.width || 560)/2} y={30} textAnchor=\"middle\"/>\n      <VictoryAxis \n        style={{\n          tickLabels: {fontSize: 14}\n        }}\n\n\n      />\n      <VictoryAxis dependentAxis\n        style={{\n          tickLabels: {fontSize: 14}\n        }}\n      />\n      <VictoryBar\n        horizontal\n        barRatio={0.8}\n        labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(1))}\n        data={[{key: 'nation', 'value': props.data['_nation'][props.var] || 0},\n              {key: 'state', 'value': props.data[props.stateFips][props.var] > 0? props.data[props.stateFips][props.var] : 0},\n              {key: props.countyName, 'value': props.data[props.stateFips+props.countyFips][props.var] > 0 ? props.data[props.stateFips+props.countyFips][props.var] : 0}]}\n        labelComponent={<VictoryLabel dx={5} style={{fill: ({datum}) => colors[datum.key] }}/>}\n        style={{\n          data: {\n            fill: ({ datum }) => colors[datum.key]?colors[datum.key]:countyColor\n          }\n        }}\n        x=\"key\"\n        y=\"value\"\n      />\n    </VictoryChart>);\n}\n\nexport default function CountyReport() {\n\n  let { stateFips, countyFips } = useParams();\n  const [config, setConfig] = useState();\n  const [stateName, setStateName] = useState('');\n  const [countyName, setCountyName] = useState('');\n  const history = useHistory();\n  const [data, setData] = useState();\n  const [dataTS, setDataTS] = useState();\n  const [tooltipContent, setTooltipContent] = useState('');\n  const [covidMetric, setCovidMetric] = useState({cases: 'N/A', deaths: 'N/A', \n                                                  caseRate: \"N/A\", mortality: \"N/A\", \n                                                  caseRateMean: \"N/A\", mortalityMean: \"N/A\",\n                                                  caseRateMA: \"N/A\", mortalityMA: \"N/A\",\n                                                  cfr:\"N/A\", t: 'n/a'});\n  const [varMap, setVarMap] = useState({});\n\n  useEffect(()=>{\n\n    const configMatched = configs.find(s => s.fips === stateFips);\n    if(!configMatched || !fips2county[stateFips+countyFips]){\n      history.push('/');\n    }else{\n      setConfig(configMatched);\n      setStateName(configMatched.name);\n      setCountyName(fips2county[stateFips+countyFips]);\n\n      fetch('/data/rawdata/variable_mapping.json').then(res => res.json())\n        .then(x => setVarMap(x));\n\n      fetch('/data/data.json').then(res => res.json())\n        .then(x => setData(x));\n      \n      fetch('/data/timeseries'+stateFips+'.json').then(res => res.json())\n        .then(x => setDataTS(x));\n    }\n  }, [stateFips]);\n\n  useEffect(() => {\n    if (dataTS && dataTS[stateFips+countyFips]){\n      setCovidMetric(_.takeRight(dataTS[stateFips+countyFips])[0]);\n    }\n  }, [dataTS])\n\n\n  if (data && dataTS && varMap) {\n\n  return (\n      <div>\n        <AppBar menu='countyReport'/>\n        <Container style={{marginTop: '8em', minWidth: '1260px', paddingRight: 0}}>\n          {config &&\n          <div>\n          <Breadcrumb>\n            <Breadcrumb.Section link onClick={() => history.push('/')}>United States</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n            <Breadcrumb.Section link onClick={() => history.push('/'+stateFips)}>{stateName}</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n            <Breadcrumb.Section active>{countyName}</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n          </Breadcrumb>\n          <Header as='h1' style={{fontWeight: 300}}>\n            <Header.Content>\n              Covid-19 Health Equity Report for <span style={{color: countyColor}}>{countyName}</span>\n              <Header.Subheader style={{fontWeight: 300}}>\n              See how health determinants impact COVID-19 outcomes. \n              </Header.Subheader>\n            </Header.Content>\n          </Header>\n          <Grid style={{paddingTop: '2em', width: \"1260px\"}}>\n            <Grid.Row columns={9} style = {{padding: 25}}>\n              <Grid.Column style={{width:140, padding: 0}}>\n                <Statistic.Label style={{width:180, textAlign: \"center\"}}> <b> TOTAL TO DATE</b></Statistic.Label>\n\n                <Statistic size='small'>\n                  <Statistic.Label>Cases</Statistic.Label>\n                  <Statistic.Value>\n                    {covidMetric.cases===null?'0':covidMetric.cases.toLocaleString()}\n                  </Statistic.Value>\n                </Statistic>\n              </Grid.Column>\n\n              <Grid.Column style={{width:140, left: -40}}>\n                <Statistic style={{paddingTop: '33px'}} size='small'>\n                  <Statistic.Label>Deaths</Statistic.Label>\n                  <Statistic.Value>\n                    {covidMetric.deaths===null?'0':covidMetric.deaths.toLocaleString()}\n                  </Statistic.Value>\n                </Statistic>\n              </Grid.Column>\n\n\n              <Grid.Column style={{width: 140, left: -40}}>\n                <Statistic.Label style={{width:190, textAlign: \"center\"}}> <b> TOTAL TO DATE PER 100,000 </b></Statistic.Label>\n\n                <Statistic size='small'>\n                  <Statistic.Label>Cases</Statistic.Label>\n                  <Statistic.Value>\n                    {covidMetric.caseRate===null?'0':numberWithCommas(parseFloat(covidMetric.caseRate).toFixed(0)).toLocaleString()}\n                  </Statistic.Value>\n                </Statistic>\n              </Grid.Column>\n\n              <Grid.Column style={{width:140, left: -64}}>\n                <Statistic style={{paddingTop: '33px'}} size='small'>\n                  <Statistic.Label>Deaths</Statistic.Label>\n                  <Statistic.Value>\n                    {covidMetric.mortality===null?'0':numberWithCommas(parseFloat(covidMetric.mortality).toFixed(0)).toLocaleString()}\n                  </Statistic.Value>\n                </Statistic>\n              </Grid.Column>\n\n              <Grid.Column style={{width:140, left: -33}}>\n                <Statistic.Label style={{width:140, textAlign: \"center\"}}> <b> DAILY AVERAGE </b></Statistic.Label>\n\n                <Statistic size='small'>\n                  <Statistic.Label>Cases</Statistic.Label>\n                  <Statistic.Value>\n                    {covidMetric.caseRateMean===null?'0':numberWithCommas(parseFloat(covidMetric.caseRateMean).toFixed(0)).toLocaleString()}\n                  </Statistic.Value>\n                </Statistic>\n              </Grid.Column>\n\n              <Grid.Column style={{width:140, left: -84}}>\n                <Statistic style={{paddingLeft: '0em', paddingTop: '33px'}} size='small'>\n                  <Statistic.Label>Deaths</Statistic.Label>\n                  <Statistic.Value>\n                    {covidMetric.mortalityMean===null?'0':numberWithCommas(parseFloat(covidMetric.mortalityMean).toFixed(0)).toLocaleString()}\n                  </Statistic.Value>\n                </Statistic>\n              </Grid.Column>\n\n              <Grid.Column style={{width:140, left: -70}} >\n                <Statistic.Label style={{width:190, textAlign: \"center\"}}> <b> DAILY AVERAGE PER 100,000 </b></Statistic.Label>\n\n                <Statistic size='small'>\n                  <Statistic.Label style={{paddingLeft: 13}}>Cases</Statistic.Label>\n                  <Statistic.Value>\n                    {covidMetric.caseRateMA===null?'0':numberWithCommas(parseFloat(covidMetric.caseRateMA).toFixed(0)).toLocaleString()}\n                  </Statistic.Value>\n                </Statistic>\n              </Grid.Column>\n\n              <Grid.Column style={{width:140, left: -110}}>\n                <Statistic style={{paddingLeft: 8, paddingTop: '33px'}} size='small'>\n                  <Statistic.Label>Deaths</Statistic.Label>\n                  <Statistic.Value>\n                    {covidMetric.mortalityMA===null?'0':numberWithCommas(parseFloat(covidMetric.mortalityMA).toFixed(0)).toLocaleString()}\n                  </Statistic.Value>\n                </Statistic>\n              </Grid.Column>\n\n              <Grid.Column style={{width:140, left: -40}}>\n                <Statistic.Label style={{width:160, textAlign: \"left\"}}> <b> CASE FATALITY RATIO </b></Statistic.Label>\n\n                <Statistic size='small'>\n                  <Statistic.Label style={{paddingLeft:10, width:140}}> Death : Cases</Statistic.Label>\n                  <Statistic.Value style={{paddingLeft:15}}>\n                    {covidMetric.cfr===null?'0':numberWithCommas(parseFloat(covidMetric.cfr).toFixed(2)).toLocaleString()}\n                  </Statistic.Value>\n                </Statistic>\n              </Grid.Column>\n              \n\n\n            </Grid.Row>\n                          <span style={{color: '#bdbfc1'}}>Last updated on {covidMetric.t==='n/a'?'N/A':(new Date(covidMetric.t*1000).toLocaleDateString())}</span>\n\n          </Grid>\n          <Divider horizontal style={{fontWeight: 300, color: '#b1b3b3', fontSize: '1.2em', paddingTop: '1em'}}>COVID-19 Outcomes </Divider>\n          <Grid columns={2} centered>\n            <Grid.Row>\n              <Grid.Column>\n                <text x={0} y={20} style={{fontSize: '1.0em', paddingBottom: 0, fontWeight: 400}}>Average Daily COVID-19 Cases /100,000 </text>\n\n                <VictoryChart theme={VictoryTheme.material}\n                  width={550}\n                  height={300}       \n                  padding={{left: 50, right: 60, top: 60, bottom: 30}}\n                  containerComponent={<VictoryVoronoiContainer/>}\n                  \n                  >\n                  <VictoryLegend\n                    x={10} y={35}\n                    orientation=\"horizontal\"\n                    colorScale={[nationColor, stateColor, countyColor]}\n                    data ={[\n                      {name: \"nation\"}, {name: \"state\"}, {name: countyName}\n                      ]}\n                  />\n\n                  <VictoryAxis\n                    tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}\n                    tickValues={[\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/4)*3 - 1].t,\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/4)*2 - 1].t,\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/4) - 1].t,\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length-1].t]}/>\n                  <VictoryAxis dependentAxis tickCount={5}\n                    tickFormat={(y) => (y<1000?y:(y/1000+'k'))}\n                    />\n                  <VictoryGroup \n                    colorScale={[nationColor, stateColor, countyColor]}\n                  >\n                    <VictoryLine data={dataTS[\"_nation\"]}\n                      x='t' y='caseRateMA'\n                      labels={({ datum }) => `${new Date(datum.t*1000).toLocaleDateString()}: ${datum.caseRateMA.toFixed(1)}`}\n                      labelComponent={<VictoryTooltip flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                      style={{\n                          data: { strokeWidth: ({ active }) => active ? 3 : 2},\n                      }}\n                      />\n                    <VictoryLine data={dataTS[stateFips]}\n                      x='t' y='caseRateMA'\n                      labels={({ datum }) => `${new Date(datum.t*1000).toLocaleDateString()}: ${datum.caseRateMA.toFixed(1)}`}\n                      labelComponent={<VictoryTooltip flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                      style={{\n                          data: { strokeWidth: ({ active }) => active ? 3 : 2},\n                      }}\n                      />\n                    <VictoryLine data={dataTS[stateFips+countyFips]?dataTS[stateFips+countyFips]:dataTS[\"99999\"]}\n                      x='t' y='caseRateMA'\n                      labels={({ datum }) => `${new Date(datum.t*1000).toLocaleDateString()}: ${datum.caseRateMA.toFixed(1)}`}\n                      labelComponent={<VictoryTooltip flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                      style={{\n                          data: { strokeWidth: ({ active }) => active ? 3 : 2},\n                      }}\n\n                      />\n                  </VictoryGroup>\n                </VictoryChart>\n              </Grid.Column>\n              <Grid.Column>\n                <text x={0} y={20} style={{fontSize: '1.0em', paddingBottom: 0, fontWeight: 400}}>Average Daily COVID-19 Deaths /100,000 </text>\n\n                <VictoryChart theme={VictoryTheme.material}\n                  width={550}\n                  height={300}       \n                  padding={{left: 50, right: 60, top: 60, bottom: 30}}\n                  containerComponent={<VictoryVoronoiContainer/>}\n                  \n                  >\n                  <VictoryLegend\n                    x={10} y={35}\n                    orientation=\"horizontal\"\n                    colorScale={[nationColor, stateColor, countyColor]}\n                    data ={[\n                      {name: \"nation\"}, {name: \"state\"}, {name: countyName}\n                      ]}\n                  />\n                  <VictoryAxis\n                    tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}\n                    tickValues={[\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/4)*3 - 1].t,\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/4)*2 - 1].t,\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/4) - 1].t,\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length-1].t]}/>\n                  <VictoryAxis dependentAxis tickCount={5}\n                    tickFormat={(y) => (y<1000?y:(y/1000+'k'))}\n                    />\n                  <VictoryGroup \n                    colorScale={[nationColor, stateColor, countyColor]}\n                  >\n                    <VictoryLine data={dataTS[\"_nation\"]}\n                      x='t' y='mortalityMA'\n                      labels={({ datum }) => `${new Date(datum.t*1000).toLocaleDateString()}: ${datum.mortalityMA.toFixed(1)}`}\n                      labelComponent={<VictoryTooltip flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                      style={{\n                          data: { strokeWidth: ({ active }) => active ? 3 : 2},\n                      }}\n                      />\n                    <VictoryLine data={dataTS[stateFips]}\n                      x='t' y='mortalityMA'\n                      labels={({ datum }) => `${new Date(datum.t*1000).toLocaleDateString()}: ${datum.mortalityMA.toFixed(1)}`}\n                      labelComponent={<VictoryTooltip flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                      style={{\n                          data: { strokeWidth: ({ active }) => active ? 3 : 2},\n                      }}\n                      />\n                    <VictoryLine data={dataTS[stateFips+countyFips]?dataTS[stateFips+countyFips]:dataTS[\"99999\"]}\n                      x='t' y='mortalityMA'\n                      labels={({ datum }) => `${new Date(datum.t*1000).toLocaleDateString()}: ${datum.mortalityMA.toFixed(1)}`}\n                      labelComponent={<VictoryTooltip flyoutStyle={{ fillOpacity: 0, stroke: \"#FFFFFF\", strokeWidth: 0 }}/>}\n                      style={{\n                          data: { strokeWidth: ({ active }) => active ? 3 : 2},\n                      }}\n                      />\n                  </VictoryGroup>\n                </VictoryChart>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row columns={2}>\n              <Grid.Column>\n                <BarChart \n                  title=\"Average Daily COVID-19 Cases per 100,000\" \n                  var=\"caserate7dayfig\" \n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  countyName={countyName}\n                  data={data} />\n              </Grid.Column>\n              <Grid.Column>\n                <BarChart \n                  title=\"Average Daily COVID-19 Deaths per 100,000\" \n                  var=\"covidmortality7dayfig\" \n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  countyName={countyName}\n                  data={data} />\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <span style={{color: '#bdbfc1'}}>Last updated on {covidMetric.t==='n/a'?'N/A':(new Date(covidMetric.t*1000).toLocaleDateString())}</span>\n\n          <Divider horizontal style={{fontWeight: 300, color: '#b1b3b3', fontSize: '1.2em', paddingTop: '1em'}}>County Characteristics</Divider>\n          <Grid>\n            <Grid.Row columns={3}>                    \n              <Grid.Column>\n                <BarChart \n                  title=\"% African American\" \n                  var=\"black\" \n                  width={400}\n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  countyName={countyName}\n                  data={data} />\n                <BarChart \n                  title=\"% Diabetes\" \n                  var=\"diabetes\" \n                  width={400}\n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  countyName={countyName}\n                  data={data} /> \n                <BarChart \n                  title=\"% Over 65 y/o\" \n                  var=\"age65over\" \n                  width={400}\n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  countyName={countyName}\n                  data={data} />\n                  \n              </Grid.Column>\n              <Grid.Column>\n                <BarChart \n                  title=\"% Hispanic or Latino\" \n                  var=\"hispanic\" \n                  width={400}\n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  countyName={countyName}\n                  data={data} />\n                <BarChart \n                  title=\"% in Poverty\" \n                  var=\"poverty\" \n                  width={400}                 \n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  countyName={countyName}\n                  data={data} />\n                <BarChart \n                  title=\"% in Group Quarters\" \n                  var=\"groupquater\" \n                  width={400}\n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  countyName={countyName}\n                  data={data} />\n                \n              </Grid.Column>\n\n\n              <Grid.Column>\n                <BarChart \n                  title=\"% Obese\" \n                  var=\"obesity\"\n                  width={400} \n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  countyName={countyName}\n                  data={data} />\n                <BarChart \n                  title=\"% Uninsured\" \n                  var=\"PCTUI\" \n                  width={400}\n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  countyName={countyName}\n                  data={data} />\n                <BarChart \n                  title=\"% Male\" \n                  var=\"male\" \n                  width={400}\n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  countyName={countyName}\n                  data={data} />\n                \n              </Grid.Column>\n            </Grid.Row>\n            <span style={{color: '#bdbfc1'}}>Last updated on {covidMetric.t==='n/a'?'N/A':(new Date(covidMetric.t*1000).toLocaleDateString())}</span>\n          </Grid>\n\n          <Divider horizontal style={{fontWeight: 300, color: '#b1b3b3', fontSize: '1.2em', paddingTop: '1em'}}>Bivariate Relationships of Outcomes and Exposure Variables</Divider>\n          <Grid columns={3}>\n            <Grid.Row>\n              <Grid.Column>\n                <ScatterChart x=\"casesfig\" y=\"deathsfig\" \n                  showLegend={true}\n                  varMap={varMap}\n                  xlog={true} \n                  ylog={true} \n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n              <Grid.Column>\n                <ScatterChart x=\"caseratefig\" y=\"covidmortalityfig\" \n                  varMap={varMap}\n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n              <Grid.Column>\n                <ScatterChart x=\"RPL_THEME1\" y=\"covidmortalityfig\"\n                 varMap={varMap} \n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <ScatterChart x=\"RPL_THEME2\" y=\"covidmortalityfig\"\n                  showLegend={true}\n                  varMap={varMap}\n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n              <Grid.Column>\n                <ScatterChart x=\"RPL_THEME3\" y=\"covidmortalityfig\"\n                  varMap={varMap}\n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n              <Grid.Column>\n                <ScatterChart x=\"RPL_THEME4\" y=\"covidmortalityfig\"\n                  varMap={varMap}\n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <ScatterChart x=\"popden\" y=\"covidmortalityfig\"\n                  showLegend={true}\n                  xlog={true}\n                  varMap={varMap}\n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n              <Grid.Column>\n                <ScatterChart x=\"hhincome\" y=\"covidmortalityfig\"\n                  varMap={varMap}\n                  xlog={true}\n                  rescaleX={true}\n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n              <Grid.Column>\n                <ScatterChart x=\"black\" y=\"covidmortalityfig\"\n                  varMap={varMap}\n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n            </Grid.Row>\n            <span style={{color: '#bdbfc1'}}>Last updated on {covidMetric.t==='n/a'?'N/A':(new Date(covidMetric.t*1000).toLocaleDateString())}</span>\n\n          </Grid>\n          <Divider horizontal style={{fontWeight: 300, color: '#b1b3b3', fontSize: '1.2em', paddingTop: '1em'}}>Data Table</Divider>\n          <Table striped compact basic='very'>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Variable Name</Table.HeaderCell>\n                <Table.HeaderCell>{countyName}</Table.HeaderCell>\n                <Table.HeaderCell>{stateName}</Table.HeaderCell>\n                <Table.HeaderCell>United States</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                  {_.map(data[stateFips + countyFips],\n                    (v, k) => {\n                      var rmList = [\"casesfig\", \"deathsfig\", \"dailycases\", \"dailydeaths\", \"mean7daycases\", \"mean7daydeaths\", \"covidmortalityfig\"\n                        , \"caseratefig\", \"covidmortality7dayfig\", \"caserate7dayfig\", \"fips\"];\n                      if (!rmList.includes(k)) {\n                        return (\n                          <Table.Row key={k}>\n                            <Table.Cell>{varMap[k] ? varMap[k].name : k}</Table.Cell>\n                            <Table.Cell>{isNaN(v) ? v : (Math.round(v * 100) / 100)}</Table.Cell>\n                            <Table.Cell>{isNaN(data[stateFips][k]) ? data[stateFips][k] : (Math.round(data[stateFips][k] * 100) / 100)}</Table.Cell>\n                            <Table.Cell>{isNaN(data['_nation'][k]) ? data['_nation'][k] : (Math.round(data['_nation'][k] * 100) / 100)}</Table.Cell>\n                          </Table.Row>\n                        )\n                      }\n                    })}\n                </Table.Body>\n          </Table>\n          </div>\n        }\n        <Notes />\n      </Container>\n      <ReactTooltip>{tooltipContent}</ReactTooltip>\n    </div>\n    );\n  } else{\n    return <Loader active inline='centered' />\n  }\n\n\n\n}","import React, { useEffect, useState } from 'react'\nimport { Container, Dropdown, Header, Grid } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport { useParams, useHistory } from 'react-router-dom';\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\nimport stateOptions from \"./stateOptions.json\";\nimport configs from \"./state_config.json\";\nimport _ from 'lodash';\nimport { scaleQuantile } from \"d3-scale\";\n\n\nconst colorPalette = [\n        \"#e1dce2\",\n        \"#d3b6cd\",\n        \"#bf88b5\", \n        \"#af5194\", \n        \"#99528c\", \n        \"#633c70\", \n      ];\nconst colorPalette2 = [\n        \"#e1dce2\",\n        \"#71C7EC\",\n        \"#1EBBD7\",\n        \"#0B92BF\", \n        \"#0270A1\", \n        \"#024174\",  \n      ];\n\nexport default function MapState() {\n\n  const [stateFips, setStateFips] = useState();\n  const [measureA, setMeasureA] = useState();\n  const [measureB, setMeasureB] = useState();  \n  const [colorScaleA, setColorScaleA] = useState();\n  const [colorScaleB, setColorScaleB] = useState();\n  const [config, setConfig] = useState();\n  const [tooltipContent, setTooltipContent] = useState('');\n  const [data, setData] = useState();\n  const [varMap, setVarMap] = useState({});\n  const [measureOptionsA, setMeasureOptionsA] = useState([]);\n  const [measureOptionsB, setMeasureOptionsB] = useState([]);\n\n  const [legendSplitA, setLegendSplitA] = useState([]);\n  const [legendSplitB, setLegendSplitB] = useState([]);\n\n  const [legendMaxA, setLegendMaxA] = useState([]);\n  const [legendMaxB, setLegendMaxB] = useState([]);\n\n  const [legendMinA, setLegendMinA] = useState([]);\n  const [legendMinB, setLegendMinB] = useState([]);\n\n  const [name, setName] = useState([]);\n\n\n\n  useEffect(()=>{\n    fetch('/data/rawdata/variable_mapping.json').then(res => res.json())\n      .then(x => {\n        setVarMap(x);\n        setMeasureOptionsA(_.filter(_.map(x, d=> {\n          return {key: d.id, value: d.name, text: d.name, group: d.group};\n        }), d => (d.text !== \"Urban-Rural Status\") && (d.group === \"outcomes\")));\n        setMeasureOptionsB(_.filter(_.map(x, d=> {\n          return {key: d.id, value: d.name, text: d.name, group: d.group};\n        }), d => (d.text !== \"Urban-Rural Status\") && (d.group !== \"outcomes\")));\n\n      });\n  }, []);\n\n  useEffect(()=>{\n    \n    const configMatched = configs.find(s => s.fips === stateFips);\n    setConfig(configMatched);\n\n    if (stateFips && varMap){\n      fetch('/data/data.json').then(res => res.json())\n        .then(data => {\n          let coldata = {};\n          const dataFltrd = _.filter(_.map(data, (d, k)=>{d.fips=k; return d;}), (d)=> (\n                 d.fips.length===5 &&\n                 d.fips.substring(0,2)===stateFips));\n          _.each(dataFltrd, (d) => {\n            _.each(d, (v, k)=>{\n              if (varMap[k]){\n                if (!(varMap[k].name in coldata)){\n                  coldata[varMap[k].name] = {};\n                }\n                coldata[varMap[k].name][d.fips] = v; \n              }\n            });\n          });\n          setData(coldata);\n\n        });\n      setMeasureA(null);\n      setMeasureB(null);\n      setColorScaleA(null);\n      setColorScaleB(null);\n    }\n  }, [stateFips]);\n\n  useEffect(() => {\n    if (measureA){\n      const cs = scaleQuantile()\n        .domain(_.map(data[measureA], d=>d))\n        .range(colorPalette);\n      let scaleMap = {}\n      _.each(data[measureA], d=>{\n        scaleMap[d] = cs(d)});\n      setColorScaleA(scaleMap);\n      \n      var splitA = scaleQuantile()\n        .domain(_.map(data[measureA], d=>d))\n        .range(colorPalette);\n\n      setLegendSplitA(splitA.quantiles());\n\n      var maxA = 0\n      var minA = 0\n      _.each(data[measureA],d=>{\n        if (d > maxA) {\n          maxA = d\n        }else if (d < minA && d >= 0){\n            minA = d\n        }\n      });\n\n      if (maxA > 999) {\n        setLegendMaxA((maxA/1000).toFixed(0) + \"K\");\n      }else{\n        setLegendMaxA(maxA.toFixed(0));\n      }\n      setLegendMinA(minA.toFixed(0));\n\n      setName(measureA);\n    }\n  }, [measureA]);\n\n  useEffect(() => {\n    if (measureB){\n      const cs = scaleQuantile()\n        .domain(_.map(data[measureB], d=>d))\n        .range(colorPalette2);\n      let scaleMap = {}\n      _.each(data[measureB], d=>{\n        scaleMap[d] = cs(d)});\n      setColorScaleB(scaleMap);\n\n      var splitB = scaleQuantile()\n        .domain(_.map(data[measureB], d=>d))\n        .range(colorPalette);\n\n      setLegendSplitB(splitB.quantiles());\n\n      var maxB = 0\n      var minB = 0\n      _.each(data[measureB],d=>{\n        if (d > maxB) {\n          maxB = d\n        }else if (d < minB && d >=0){\n          minB = d\n        }\n      });\n      if (maxB > 999) {\n        setLegendMaxB((maxB/1000).toFixed(0) + \"K\");\n      }else{\n        setLegendMaxB(maxB.toFixed(0));\n\n      }\n      setLegendMinB(minB.toFixed(0));\n    }\n  }, [measureB]);  \n\n\n\n  return (\n      <div>\n        <AppBar menu='mapState'/>\n        <Container style={{marginTop: '8em', minWidth: '1260px'}}>\n          <Header as='h3'>\n            <Header.Content style={{fontWeight: 400}}>\n              Side-by-Side View of Counties in&nbsp;\n              <Dropdown\n                icon=''\n                style={{background: '#fff', \n                        fontWeight: 400, \n                        width: '200px',\n                        borderTop: 'none',\n                        borderLeft: 'none',\n                        borderRight: 'none', \n                        borderBottom: '1px solid #bdbfc1',\n                        borderRadius: 0,\n                        minHeight: '2.2em',\n                        paddingBottom: '0.2em'}}\n                placeholder='Select State'\n                inline\n                search\n                selection\n                options={stateOptions}\n                onChange={(e, { value }) => {\n                  setStateFips(value);\n                }}\n              />\n            </Header.Content>\n          </Header>\n\n          {config &&\n          <Grid columns={2} style={{paddingTop: '2em', minHeight: '400px'}}>\n            <Grid.Row>\n              <Grid.Column>\n                <Grid columns={2} centered>\n                  <Grid.Column>\n                  <svg width = \"500\" height=\"30\">\n                       <text x={0} y={15} style={{fontSize: '1.4em'}}>COVID-19 Outcome Measure:  </text>\n                  </svg>\n                    <Dropdown\n                      style={{background: '#fff', \n                              fontWeight: 400, \n                              borderTop: 'none',\n                              borderLeft: 'none',\n                              borderRight: 'none', \n                              borderBottom: '1ox solid #bdbfc1',\n                              borderRadius: 0}}\n                      placeholder='Select Measure'\n                      search\n                      selection\n                      value={measureA}\n                      options={measureOptionsA}\n                      onChange={(e, { value }) => {\n                        setMeasureA(value)\n                      }}\n                    />\n\n                    <svg width=\"450\" height=\"110\">\n                            {_.map(colorPalette, (color, i) => {\n                              return <rect key={i} x={40*i} y={40} width=\"40\" height=\"40\" style={{fill: color, strokeWidth:1, stroke: color}}/>                    \n                            })} \n                            <rect x={280} y={40} width=\"40\" height=\"40\" style={{fill: '#FFFFFF', strokeWidth:0.1, stroke: '#000000'}}/>\n                            <text x={330} y={58} style={{fontSize: '1.2em'}}> None </text>\n                            <text x={330} y={74} style={{fontSize: '1.2em'}}> Reported </text>\n                            <text x={0} y={36} style={{fontSize: '1.2em'}}> Low </text>\n                            <text x={40 * (colorPalette.length - 1)} y={36} style={{fontSize: '1.2em'}}> High </text> \n                            {_.map(legendSplitA, (split, i) => {\n                              if (legendSplitA[0].toFixed(0) === legendSplitA[1].toFixed(0) && legendSplitA[1].toFixed(0) === legendSplitA[2].toFixed(0) && legendSplitA[2].toFixed(0) === legendSplitA[3].toFixed(0) && legendSplitA[3].toFixed(0) === legendSplitA[4].toFixed(0) ) {\n                                return <text key = {i} x={40 + 40*i} y={95} style={{fontSize: '1.0em'}}> {legendSplitA[i].toFixed(2) < 0? 0:legendSplitA[i].toFixed(2)} </text>\n                              }else if (legendSplitA[i].toFixed(0) < 1) {\n                                return <text key = {i} x={40 + 40*i} y={95} style={{fontSize: '1.0em'}}> {legendSplitA[i].toFixed(1) < 0? 0:legendSplitA[i].toFixed(1)} </text>\n                              }else if (legendSplitA[i] > 999) {\n                                return <text key = {i} x={40 + 40*i} y={95} style={{fontSize: '1.0em'}}> {(legendSplitA[i]/1000).toFixed(0) < 0? 0:(legendSplitA[i]/1000).toFixed(0)}K </text>\n                              }\n                              return <text key = {i} x={40 + 40*i} y={95} style={{fontSize: '1.0em'}}> {legendSplitA[i].toFixed(0) < 0? 0:legendSplitA[i].toFixed(0)} </text>                    \n                            })}\n                            <text x={0} y={95} style={{fontSize: '1.0em'}}> {legendMinA} </text> \n                            <text x={240} y={95} style={{fontSize: '1.0em'}}> {legendMaxA} </text> \n\n                    </svg>\n\n                  </Grid.Column>\n                </Grid>\n              </Grid.Column>\n              <Grid.Column>\n                <Grid columns={2} centered>\n                  <Grid.Column>\n\n                  <svg width = \"500\" height=\"30\">\n                      <text x={0} y={15} style={{fontSize: '1.4em'}}>COVID-19 County Population Characteristics:  </text>\n                  </svg>\n\n                    <Dropdown\n                      style={{background: '#fff', \n                              fontWeight: 400, \n                              borderTop: 'none',\n                              borderLeft: 'none',\n                              borderRight: 'none', \n                              borderBottom: '1ox solid #bdbfc1',\n                              borderRadius: 0}}\n                      placeholder='Select Measure'\n                      fluid\n                      labeled\n                      search\n                      selection\n                      value={measureB}\n                      options={measureOptionsB}\n                      onChange={(e, { value }) => {\n                        setMeasureB(value)\n                      }}\n                    />\n\n                    <svg width=\"450\" height=\"110\">\n                            {_.map(colorPalette2, (color, i) => {\n                              return <rect key={i} x={40*i} y={40} width=\"40\" height=\"40\" style={{fill: color, strokeWidth:1, stroke: color}}/>                    \n                            })} \n                            <rect x={280} y={40} width=\"40\" height=\"40\" style={{fill: '#FFFFFF', strokeWidth:0.1, stroke: '#000000'}}/>\n                            <text x={330} y={58} style={{fontSize: '1.2em'}}> None </text>\n                            <text x={330} y={74} style={{fontSize: '1.2em'}}> Reported </text>\n                            <text x={0} y={36} style={{fontSize: '1.2em'}}>Low</text>\n                            <text x={40 * (colorPalette2.length - 1)} y={36} style={{fontSize: '1.2em'}}>High</text> \n                            {_.map(legendSplitB, (split, i) => {\n                              if (legendSplitB[0].toFixed(0) === legendSplitB[1].toFixed(0) && legendSplitB[1].toFixed(0) === legendSplitB[2].toFixed(0) && legendSplitB[2].toFixed(0) === legendSplitB[3].toFixed(0) && legendSplitB[3].toFixed(0) === legendSplitB[4].toFixed(0) ) {\n                                return <text key = {i} x={40 + 40*i} y={95} style={{fontSize: '1.0em'}}> {legendSplitB[i].toFixed(2) < 0? 0:legendSplitB[i].toFixed(2)} </text>\n                              }else if (legendSplitB[i].toFixed(0) < 1) {\n                                return <text key = {i} x={40 + 40*i} y={95} style={{fontSize: '1.0em'}}> {legendSplitB[i].toFixed(1)< 0? 0:legendSplitB[i].toFixed(1)} </text>\n                              }else if (legendSplitB[i] > 999) {\n                                return <text key = {i} x={40 + 40*i} y={95} style={{fontSize: '1.0em'}}> {(legendSplitB[i]/1000).toFixed(0)< 0? 0:(legendSplitB[i]/1000).toFixed(0)}K </text>\n                              }\n                              return <text key = {i} x={40 + 40*i} y={95} style={{fontSize: '1.0em'}}> {legendSplitB[i].toFixed(0)< 0? 0:legendSplitB[i].toFixed(0)} </text>                    \n                            })}   \n                            <text x={0} y={95} style={{fontSize: '1.0em'}}> {legendMinB} </text> \n                            <text x={240} y={95} style={{fontSize: '1.0em'}}> {legendMaxB} </text>\n\n                            \n\n                    </svg>\n\n                  </Grid.Column>\n                </Grid>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <ComposableMap projection=\"geoAlbersUsa\" \n                  projectionConfig={{scale:`${config.scale}`}} \n                  width={500} \n                  height={600} \n                  strokeWidth = {0.1}\n                  stroke = 'black'\n                  data-tip=\"\"\n                  offsetX={config.offsetX}\n                  offsetY={config.offsetY}>\n                  <Geographies geography={config.url}>\n                    {({geographies}) => geographies.map(geo => \n                      <Geography \n                        key={geo.rsmKey} \n                        geography={geo} \n                        onMouseEnter={()=>{\n                          if(measureA && colorScaleA){\n                            const cur = data[measureA][geo.properties.COUNTYFP];\n                            setTooltipContent(cur?(Math.round(cur*100)/100):'');\n                          }\n                        }}\n                        onMouseLeave={()=>{\n                          setTooltipContent(\"\")\n                        }}\n                        fill={(measureA && colorScaleA && data[measureA][stateFips+geo.properties.COUNTYFP])?\n                                colorScaleA[data[measureA][stateFips+geo.properties.COUNTYFP]] : \"#FFFFFF\"}\n                      />\n                    )}\n                  </Geographies>\n                </ComposableMap>\n              </Grid.Column>\n              <Grid.Column>\n                <ComposableMap projection=\"geoAlbersUsa\" \n                  projectionConfig={{scale:`${config.scale}`}} \n                  width={500} \n                  height={600} \n                  strokeWidth = {0.1}\n                  stroke = 'black'\n                  data-tip=\"\"\n                  offsetX={config.offsetX}\n                  offsetY={config.offsetY}>\n                  <Geographies geography={config.url}>\n                    {({geographies}) => geographies.map(geo => \n                      <Geography \n                        key={geo.rsmKey} \n                        geography={geo} \n                        onMouseEnter={()=>{\n                          if(measureB && colorScaleB){\n                            const cur = data[measureB][geo.properties.COUNTYFP];\n                            setTooltipContent(cur?(Math.round(cur*100)/100):'');\n                          }\n                        }}\n                        onMouseLeave={()=>{\n                          setTooltipContent(\"\")\n                        }}\n                        fill = {(measureB && colorScaleB && data[measureB][stateFips+geo.properties.COUNTYFP])?\n                                colorScaleB[data[measureB][stateFips+geo.properties.COUNTYFP]] : \"#FFFFFF\"}\n                      />\n                    )}\n                  </Geographies>\n                </ComposableMap>\n                <ReactTooltip>{tooltipContent}</ReactTooltip>\n              </Grid.Column>\n            </Grid.Row>  \n          </Grid>\n          }\n          <Notes />\n        </Container>\n\n      </div>\n    );\n\n}","import React from 'react'\nimport AppBar from './AppBar';\nimport Notes from './Notes';\nimport { Container, Grid, List, Divider, Image, Header, Segment } from 'semantic-ui-react'\n\nexport default function AboutUs(props){\n\n  return (\n    <div>\n      <AppBar menu='aboutUs'/>\n      <Container style={{marginTop: '8em', minWidth: '1260px'}}>\n        <Header as='h1' style={{fontWeight: 400}}>\n          <Header.Content>\n            About Us\n            <Header.Subheader style={{fontWeight: 300}}>We are a group of epidemiologists, doctors, and software engineers from Emory University and University of Michigan.</Header.Subheader>\n          </Header.Content>\n        </Header>\n        <Grid columns={3}>\n          <Grid.Column>\n            <List bulleted>\n              <List.Item>Shivani A. Patel, PhD</List.Item>\n              <List.Item>K. M. Venkat Narayan, MD</List.Item>\n              <List.Item>Carlos Del Rio, MD</List.Item>\n              <List.Item>Mark Hutcheson, BS</List.Item>\n              <List.Item>Yubin Park, PhD</List.Item>\n              <List.Item>Daesung Choi, PhD</List.Item>\n              <List.Item>Pooja Naik, B.Pharm</List.Item>\n              <List.Item>Star Liu</List.Item>\n            </List>\n          </Grid.Column>\n          <Grid.Column>\n            <List bulleted>\n              <List.Item>Leanna Ehrlich, BA</List.Item>\n              <List.Item>Neil K. Mehta, PhD</List.Item>\n              <List.Item>Vince Marconi, MD</List.Item>\n              <List.Item>Michael Kramer, PhD</List.Item>\n              <List.Item>Rob O'Reilly, PhD</List.Item>\n              <List.Item>Sanjana Pampati, MPH</List.Item>\n              <List.Item>Joyce Ho, PhD</List.Item>\n              <List.Item>Shabatun Jamila Islam, MD</List.Item>\n            </List>\n          </Grid.Column>\n          <Grid.Column>\n            <List bulleted>\n              <List.Item>Anurag Mehta, MD</List.Item>\n              <List.Item>Aditi Nayak , MD</List.Item>\n              <List.Item>Arshed Quyyumi , MD</List.Item>\n              <List.Item>Yi-Ann Co, PhD</List.Item>\n              <List.Item>Samaah Sullivan, MD</List.Item>\n              <List.Item>Mohammed K. Ali, MD</List.Item>\n            </List>\n          </Grid.Column>\n        </Grid>\n        <Divider hidden/>\n        <Header as='h2' style={{fontWeight: 400}}>\n          <Header.Content>\n            Funding\n          </Header.Content>\n        </Header>\n        <p>The COVID-19 Health Equity Dashboard was developed with funding from the Robert Wood Johnson Foundation and Emory University’s Woodruff Health Sciences Center. Development was also supported by the Georgia Center for Diabetes Translation Research.</p>\n        <Divider hidden/>\n        <Header as='h2' style={{fontWeight: 400}}>\n          <Header.Content>\n            Feedback\n          </Header.Content>\n        </Header>\n        <p>We strive to make this a user-friendly resource for policy makers, public health actors, the public, researchers, \n          and the media. Please share your feedback by mailing us at: \n          <a href=\"mailto:covid19dashboard@emory.edu\"> covid19dashboard@emory.edu</a>\n        </p>\n\n        <Notes />\n\n      </Container>\n    </div>);\n}\n","import React from 'react'\nimport AppBar from './AppBar';\nimport Notes from './Notes';\nimport { Container, Grid, List, Divider, Image, Header, Table } from 'semantic-ui-react'\n\nexport default function DataSources(props){\n\n  return (\n    <div>\n      <AppBar menu='dataSources'/>\n      <Container style={{marginTop: '8em', minWidth: '1260px'}}>\n        <Header as='h2' style={{fontWeight: 400}}>\n          <Header.Content>\n            Data Sources and Interpretation\n          </Header.Content>\n        </Header>\n        <Divider hidden/>\n        <Table basic='very' style={{fontWeight: 400}}>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell width={3}>Measure</Table.HeaderCell>\n              <Table.HeaderCell width={5}>Data Source</Table.HeaderCell>\n              <Table.HeaderCell width={8}>How to Interpret</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            <Table.Row>\n              <Table.Cell>Total COVID-19 Cases</Table.Cell>\n              <Table.Cell>The New York Times Coronavirus (Covid-19) Data in the United States </Table.Cell>\n              <Table.Cell><i>Total COVID-19 Cases</i> is the number of people who have tested positive for COVID-19 in each county. This database includes case counts from \"both laboratory confirmed and probable cases using criteria that were developed by states and the federal government.\" </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Total COVID-19 Deaths</Table.Cell>\n              <Table.Cell>The New York Times Coronavirus (Covid-19) Data in the United States  </Table.Cell>\n              <Table.Cell><i>Total COVID-19 Deaths</i> is the number of people who have died of confirmed or presumed COVID-19 cases in each county. This database includes case counts from \"both laboratory confirmed and probable cases using criteria that were developed by states and the federal government.\" </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Average Daily COVID-19 Cases</Table.Cell>\n              <Table.Cell>Derived from the New York Times Coronavirus (Covid-19) Data in the United States </Table.Cell>\n              <Table.Cell><i>Average Daily Cases</i> is the average number of positive cases for COVID-19 infection per county in the United States over the last seven days.</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Average Daily COVID-19 Deaths</Table.Cell>\n              <Table.Cell>Derived from the New York Times Coronavirus (Covid-19) Data in the United States  </Table.Cell>\n              <Table.Cell><i>Average Daily Deaths</i> is the average number of deaths due to confirmed or presumed COVID-19 infection per county in the United States over the last seven days.</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Total COVID-19 Deaths per 100,000</Table.Cell>\n              <Table.Cell>Derived from the New York Times Coronavirus (Covid-19) Data in the United States and Bridged-race population estimates by The National Center for Health Statistics.</Table.Cell>\n              <Table.Cell><i>Total Deaths per 100,000</i> helps us understand COVID-19 deaths by population of the county per 100,000 people. <br/>\n                          If every county in the United States had 100,000 residents, this is how many would have died in each county from COVID-19. This measurement adjusts for different counties’ populations to provide a standardized point of comparison of deaths in each county.\n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Total COVID-19 Cases per 100,000</Table.Cell>\n              <Table.Cell>Derived from the New York Times Coronavirus (Covid-19) Data in the United States and Bridged-race population estimates by The National Center for Health Statistics. </Table.Cell>\n              <Table.Cell><i>Total Cases per 100,000</i> helps us understand COVID-19 cases (people who have tested positive for COVID-19) by the population of the county per 100,000 people. <br/>\n                        If every county in the United States had 100,000 residents, this is how many would have COVID-19 in each county. This measurement adjusts for different counties’ populations to provide a standardized point of comparison of cases in each county.\n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Average Daily COVID-19 Deaths per 100,000</Table.Cell>\n              <Table.Cell>Derived from the New York Times Coronavirus (Covid-19) Data in the United States and Bridged-race population estimates by The National Center for Health Statistics. </Table.Cell>\n              <Table.Cell><i>Average Daily Deaths per 100,000</i> helps us understand the average number of deaths due to confirmed or presumed COVID-19 infection over the last seven days by population of the county per 100,000 people. \n                <br/>If every county in the United States had 100,000 residents, this is how many would have died from COVID-19 over a recent 7-day period, in each county. This measurement adjusts for different counties’ populations to provide a standardized point of comparison of deaths in each county.\n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Average Daily COVID-19 Cases per 100,000</Table.Cell>\n              <Table.Cell>Derived from the New York Times Coronavirus (Covid-19) Data in the United States and Bridged-race population estimates by The National Center for Health Statistics. </Table.Cell>\n              <Table.Cell><i>Average Daily Cases per 100,000</i> helps us understand the average number of positive cases for COVID-19 infection over the last seven days by population of the county per 100,000 people. <br/>\n                  If every county in the United States had 100,000 residents, this is how many would have tested positive for COVID-19 over a recent 7-day period, in each county. This measurement adjusts for different counties’ populations to provide a standardized point of comparison of cases in each county.\n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% African American</Table.Cell>\n              <Table.Cell>American Community Survey by the U.S. Census Bureau </Table.Cell>\n              <Table.Cell><i>% African American</i> is the percentage of residents in each county who self-identify as having African American ancestry. These data are from 2018. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% Hispanic or Latino</Table.Cell>\n              <Table.Cell>American Community Survey by the U.S. Census Bureau </Table.Cell>\n              <Table.Cell><i>% Hispanic or Latino</i> is the percentage of residents in each county who self-identified as Hispanic or Latino to the American Community Survey (ACS). These data are from ACS 2014-2016 (5-Year Estimate). </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% Minority</Table.Cell>\n              <Table.Cell>American Community Survey by the U.S. Census Bureau </Table.Cell>\n              <Table.Cell><i>% Minority</i> is the percentage of residents in each county who self-identify as having ancestry other than non-Hispanic white. These data are from 2018. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% in Poverty</Table.Cell>\n              <Table.Cell>American Community Survey by the U.S. Census Bureau </Table.Cell>\n              <Table.Cell><i>% in Poverty</i> is the percentage of residents in each county whose household income falls at or below the poverty thresholds set by the U.S. Census Bureau. These data are from 2018. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% Uninsured</Table.Cell>\n              <Table.Cell>American Community Survey by the U.S. Census Bureau </Table.Cell>\n              <Table.Cell><i>% Uninsured</i> is the percentage of residents in each county who currently lack personal health insurance. These data are from 2018. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% Diabetes</Table.Cell>\n              <Table.Cell>CDC Division of Diabetes Translation </Table.Cell>\n              <Table.Cell><i>% Diabetes</i> is the percentage of residents in each county who currently have a medical diagnosis of Type 2 Diabetes, previously called Adult Onset Diabetes. These data are from 2016. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% Obesity</Table.Cell>\n              <Table.Cell>CDC Division of Diabetes Translation </Table.Cell>\n              <Table.Cell><i>% Obesity</i> is the percentage of residents in each county who have obesity, defined as having a Body Mass Index (weight in kilograms divided by the square of height in meters) above 30. These data are from 2016.  </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% over 65 y/o</Table.Cell>\n              <Table.Cell>American Community Survey by the U.S. Census Bureau </Table.Cell>\n              <Table.Cell><i>% over 65 y/o</i> is the percentage of residents in each county who are older than 65 years. These data are from 2018.</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% in Group Quarters</Table.Cell>\n              <Table.Cell>American Community Survey by the U.S. Census Bureau </Table.Cell>\n              <Table.Cell><i>% in Group Quarters</i> is the percentage of residents in each county who live in group living arrangements, such as nursing or assisted-living facilities. These data are from 2018. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% Male</Table.Cell>\n              <Table.Cell>American Community Survey by the U.S. Census Bureau </Table.Cell>\n              <Table.Cell><i>% Male</i> is the percentage of residents in each county who are male. These data are from 2018.</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Socioeconomic Vulnerability</Table.Cell>\n              <Table.Cell>CDC’s Social Vulnerability Index data 2018 database</Table.Cell>\n              <Table.Cell><i>Socioeconomic Vulnerability</i> is a composite measurement for each county that takes into account poverty, unemployment, per capita income, and not having a high school diploma; with the highest level of vulnerability assigned to tracts in the top 10% based on values for all of these measurements. These data are from 2018.</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Household Composition Vulnerability</Table.Cell>\n              <Table.Cell>CDC’s Social Vulnerability Index data 2018 database</Table.Cell>\n              <Table.Cell><i>Household Composition Vulnerability</i> is a composite measurement for each county that takes into account population aged 65 and older, population aged 17 and younger, people with disabilities who do not live in an institutional setting, and single-parent households with child(ren) under age 18; with the highest level of vulnerability assigned to tracts in the top 10% based on values for all of these measurements. These data are from 2018.</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Minority/Language Vulnerability</Table.Cell>\n              <Table.Cell>CDC’s Social Vulnerability Index data 2018 database</Table.Cell>\n              <Table.Cell><i>Minority/Language Vulnerability</i> is a composite measurement for each county that takes into account all people except the white non-Hispanic population and those who speak English “less than well,” with the highest level of vulnerability assigned to tracts in the top 10% based on values for the measurements. These data are from 2018.</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Housing/Transportation Vulnerability</Table.Cell>\n              <Table.Cell>CDC’s Social Vulnerability Index data 2018 database</Table.Cell>\n              <Table.Cell><i>Housing/Transportation Vulnerability</i> is a composite measurement for each county that takes into account living structures with 10 or more units, mobile homes, having more people than rooms in occupied housing, households with no vehicle available, and those living in institutionalized group quarters; with the highest level of vulnerability assigned to tracts in the top 10% based on values for all of these measurements. These data are from 2018.</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Population</Table.Cell>\n              <Table.Cell>Bridged-race population estimates by The National Center for Health Statistics </Table.Cell>\n              <Table.Cell><i>Population</i> is the total number of people who live in each county. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Population Density</Table.Cell>\n              <Table.Cell>American Community Survey by the U.S. Census Bureau </Table.Cell>\n              <Table.Cell><i>Population Density</i> is the total number of people who live in each county per square mile. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Household Income</Table.Cell>\n              <Table.Cell>American Community Survey by the U.S. Census Bureau</Table.Cell>\n              <Table.Cell><i>Household Income</i> measures the average total income per household in each county. These data are from 2018.</Table.Cell>\n            </Table.Row>            \n          </Table.Body>\n        </Table>\n        <Notes />\n      </Container>\n    </div>);\n}\n","// React\nimport React from \"react\";\n// Components & Hooks\nimport USMap from \"./USMap\";\nimport StateMap from \"./StateMap\";\nimport CountyReport from \"./CountyReport\";\nimport MapYourState from \"./MapState\";\nimport AboutUs from \"./AboutUs\";\nimport DataSources from \"./DataSources\";\nimport 'semantic-ui-css/semantic.min.css'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\n\nApp.propTypes = {};\nexport default function App() {\n\n  return (\n      <Router>\n        <Switch>\n          <Route path='/map-your-state'>\n            <MapYourState />\n          </Route>\n          <Route path='/about-team'>\n            <AboutUs />\n          </Route>\n          <Route path='/data-sources'>\n            <DataSources />\n          </Route>          \n          <Route path='/:stateFips/:countyFips'>\n            <CountyReport />\n          </Route>  \n          <Route path='/:stateFips'>\n            <StateMap />\n          </Route>\n          <Route path='/'>\n            <USMap />\n          </Route>\n          <Route path=\"*\">\n            <Redirect to='/'/>\n          </Route>\n        </Switch>\n      </Router>\n  );\n}\n\n","import 'react-app-polyfill/ie9';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}